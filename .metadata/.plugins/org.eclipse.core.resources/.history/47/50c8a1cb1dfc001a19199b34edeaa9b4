/*
 * simple_neural_networks.h
 *
 *  Created on: Sep 19, 2020
 *      Author: Mateus Sousa
 */

#ifndef INC_SIMPLE_NEURAL_NETWORKS_H_
#define INC_SIMPLE_NEURAL_NETWORKS_H_

#include <stdint.h>

double single_in_single_out_nn(double  input, double weight);
double weighted_sum(double * input, double * weight, uint32_t input_len);
double multiple_inputs_single_output_nn(double * input, double *weight, uint32_t input_len);

void single_in_multiple_out_nn(double input_scalar,
							   double *weight_vector,
							   double *out_vector,
							   double vector_len);

void multiple_in_multiple_out_nn(double *input_vector,
								 uint32_t input_len,
								 double *output_vector,
								 uint32_t output_len,
								 double weights_matrix[output_len][input_len]);

void hidden_layer_nn(double *input_vector,
			   	     uint32_t input_len,
					 uint32_t hidden_len,
					 double in_to_hid_weights[hidden_len][input_len],
					 uint32_t output_len,
					 double hid_to_out_weights[output_len][hidden_len],
					 double *output_vector);

double find_error_simple(double yhat, double y);
double find_error(double input, double weight, double expected_value);

/* void brute_force_learning(double input,
						  double weight,
						  double expected_value,
						  double step_amount,	// epoch numbers
						  uint32_t itr); */

void normalize_data(double *input_vector, double * output_vector, uint32_t len);

void weights_random_initialization(uint32_t HIDDEN_LEN, uint32_t INPUT_LEN, double weight_matrix[HIDDEN_LEN][INPUT_LEN]);

void vector_sigmoid(double *input_vector, double *output_vector, uint32_t LEN);

void normalize_data_2d(uint32_t ROW, uint32_t COL, double input_matrix[ROW][COL], double output_matrix[ROW][COL]);

void weights_random_initialization_1d(double *output_vector, uint32_t LEN) {

#endif /* INC_SIMPLE_NEURAL_NETWORKS_H_ */
