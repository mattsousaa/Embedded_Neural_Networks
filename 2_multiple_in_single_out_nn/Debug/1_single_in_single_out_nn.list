
1_single_in_single_out_nn.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002144  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08002344  08002344  00012344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023a4  080023a4  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080023a4  080023a4  000123a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080023ac  080023ac  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023ac  080023ac  000123ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023b0  080023b0  000123b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080023b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000088  0800243c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  0800243c  00020138  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000765c  00000000  00000000  000200b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000012f2  00000000  00000000  00027712  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000638  00000000  00000000  00028a08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000580  00000000  00000000  00029040  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027ef1  00000000  00000000  000295c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000061a6  00000000  00000000  000514b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fa879  00000000  00000000  00057657  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00151ed0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b00  00000000  00000000  00151f4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000088 	.word	0x20000088
 800021c:	00000000 	.word	0x00000000
 8000220:	0800232c 	.word	0x0800232c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000008c 	.word	0x2000008c
 800023c:	0800232c 	.word	0x0800232c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <printmsg>:
void UART3_Init(void);

int32_t temperature[] = {12, 23, 50, -10, 16};
int32_t weight = -2;

void printmsg(char *format, ...){
 80005f0:	b40f      	push	{r0, r1, r2, r3}
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b096      	sub	sp, #88	; 0x58
 80005f6:	af00      	add	r7, sp, #0

	char str[80];

	/*Extract the argument list using VA apis */
	va_list args;
	va_start(args, format);
 80005f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80005fc:	607b      	str	r3, [r7, #4]
	vsprintf(str, format, args);
 80005fe:	f107 0308 	add.w	r3, r7, #8
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000606:	4618      	mov	r0, r3
 8000608:	f001 faa0 	bl	8001b4c <vsiprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 800060c:	f107 0308 	add.w	r3, r7, #8
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff fe15 	bl	8000240 <strlen>
 8000616:	4603      	mov	r3, r0
 8000618:	b29a      	uxth	r2, r3
 800061a:	f107 0108 	add.w	r1, r7, #8
 800061e:	f04f 33ff 	mov.w	r3, #4294967295
 8000622:	4805      	ldr	r0, [pc, #20]	; (8000638 <printmsg+0x48>)
 8000624:	f000 fdb4 	bl	8001190 <HAL_UART_Transmit>
	va_end(args);

}
 8000628:	bf00      	nop
 800062a:	3758      	adds	r7, #88	; 0x58
 800062c:	46bd      	mov	sp, r7
 800062e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000632:	b004      	add	sp, #16
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	200000b0 	.word	0x200000b0

0800063c <main>:

int main(void){
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0

	HAL_Init();
 8000640:	f000 f933 	bl	80008aa <HAL_Init>
	SystemClock_Config();
 8000644:	f000 f816 	bl	8000674 <SystemClock_Config>
	UART3_Init();
 8000648:	f000 f81c 	bl	8000684 <UART3_Init>

	printmsg("The first predicted value is %d \r\n", single_in_single_out(temperature[0], weight));
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <main+0x2c>)
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <main+0x30>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4619      	mov	r1, r3
 8000656:	4610      	mov	r0, r2
 8000658:	f000 f83d 	bl	80006d6 <single_in_single_out>
 800065c:	4603      	mov	r3, r0
 800065e:	4619      	mov	r1, r3
 8000660:	4803      	ldr	r0, [pc, #12]	; (8000670 <main+0x34>)
 8000662:	f7ff ffc5 	bl	80005f0 <printmsg>

	while(1);
 8000666:	e7fe      	b.n	8000666 <main+0x2a>
 8000668:	20000000 	.word	0x20000000
 800066c:	20000014 	.word	0x20000014
 8000670:	08002344 	.word	0x08002344

08000674 <SystemClock_Config>:

}

void SystemClock_Config(void){
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0

}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
	...

08000684 <UART3_Init>:

void UART3_Init(void){
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0

	huart3.Instance = USART3;
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <UART3_Init+0x44>)
 800068a:	4a10      	ldr	r2, [pc, #64]	; (80006cc <UART3_Init+0x48>)
 800068c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <UART3_Init+0x44>)
 8000690:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000694:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <UART3_Init+0x44>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800069c:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <UART3_Init+0x44>)
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <UART3_Init+0x44>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a8:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <UART3_Init+0x44>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	619a      	str	r2, [r3, #24]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <UART3_Init+0x44>)
 80006b0:	220c      	movs	r2, #12
 80006b2:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart3) != HAL_OK){
 80006b4:	4804      	ldr	r0, [pc, #16]	; (80006c8 <UART3_Init+0x44>)
 80006b6:	f000 fd1d 	bl	80010f4 <HAL_UART_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <UART3_Init+0x40>
		Error_Handler();
 80006c0:	f000 f806 	bl	80006d0 <Error_Handler>
	}

}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	200000b0 	.word	0x200000b0
 80006cc:	40004800 	.word	0x40004800

080006d0 <Error_Handler>:

void Error_Handler(void){
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  while(1);
 80006d4:	e7fe      	b.n	80006d4 <Error_Handler+0x4>

080006d6 <single_in_single_out>:
 *      Author: Mateus Sousa
 */

#include "simple_neural_networks.h"

int32_t single_in_single_out(int32_t input, int32_t weight){
 80006d6:	b480      	push	{r7}
 80006d8:	b083      	sub	sp, #12
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
 80006de:	6039      	str	r1, [r7, #0]
	return (input * weight);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	683a      	ldr	r2, [r7, #0]
 80006e4:	fb02 f303 	mul.w	r3, r2, r3
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr

080006f4 <HAL_MspInit>:
 *      Author: Mateus Sousa
 */

#include "main.h"

void HAL_MspInit(void){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	//__HAL_RCC_PWR_CLK_ENABLE();
	//__HAL_RCC_SYSCFG_CLK_ENABLE();

	//1. Set up the priority grouping of the arm cortex mx processor
	// This line is not required because priority grouping will be 4 by default
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006f8:	2003      	movs	r0, #3
 80006fa:	f000 fa03 	bl	8000b04 <HAL_NVIC_SetPriorityGrouping>
	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 80006fe:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <HAL_MspInit+0x40>)
 8000700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000702:	4a0c      	ldr	r2, [pc, #48]	; (8000734 <HAL_MspInit+0x40>)
 8000704:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000708:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	2100      	movs	r1, #0
 800070e:	f06f 000b 	mvn.w	r0, #11
 8000712:	f000 fa02 	bl	8000b1a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2100      	movs	r1, #0
 800071a:	f06f 000a 	mvn.w	r0, #10
 800071e:	f000 f9fc 	bl	8000b1a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000722:	2200      	movs	r2, #0
 8000724:	2100      	movs	r1, #0
 8000726:	f06f 0009 	mvn.w	r0, #9
 800072a:	f000 f9f6 	bl	8000b1a <HAL_NVIC_SetPriority>

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	e000ed00 	.word	0xe000ed00

08000738 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart){
 8000738:	b580      	push	{r7, lr}
 800073a:	b08a      	sub	sp, #40	; 0x28
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef gpio_uart;
	//here we are going to do the low level inits. of the USART2 peripheral

	//1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	__HAL_RCC_USART3_CLK_ENABLE();
 8000740:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <HAL_UART_MspInit+0x74>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000744:	4a19      	ldr	r2, [pc, #100]	; (80007ac <HAL_UART_MspInit+0x74>)
 8000746:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800074a:	6413      	str	r3, [r2, #64]	; 0x40
 800074c:	4b17      	ldr	r3, [pc, #92]	; (80007ac <HAL_UART_MspInit+0x74>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000754:	613b      	str	r3, [r7, #16]
 8000756:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <HAL_UART_MspInit+0x74>)
 800075a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075c:	4a13      	ldr	r2, [pc, #76]	; (80007ac <HAL_UART_MspInit+0x74>)
 800075e:	f043 0308 	orr.w	r3, r3, #8
 8000762:	6313      	str	r3, [r2, #48]	; 0x30
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <HAL_UART_MspInit+0x74>)
 8000766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000768:	f003 0308 	and.w	r3, r3, #8
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	68fb      	ldr	r3, [r7, #12]

	//2. Do the pin muxing configurations
	gpio_uart.Pin = GPIO_PIN_8|GPIO_PIN_9; //UART2_TX
 8000770:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000774:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 8000776:	2302      	movs	r3, #2
 8000778:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 800077a:	2301      	movs	r3, #1
 800077c:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 800077e:	2300      	movs	r3, #0
 8000780:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART3;
 8000782:	2307      	movs	r3, #7
 8000784:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(GPIOD, &gpio_uart);
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	4619      	mov	r1, r3
 800078c:	4808      	ldr	r0, [pc, #32]	; (80007b0 <HAL_UART_MspInit+0x78>)
 800078e:	f000 f9fb 	bl	8000b88 <HAL_GPIO_Init>

	//3. Enable the IRQ and set up the priority (NVIC settings)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000792:	2026      	movs	r0, #38	; 0x26
 8000794:	f000 f9dd 	bl	8000b52 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8000798:	2200      	movs	r2, #0
 800079a:	210f      	movs	r1, #15
 800079c:	2026      	movs	r0, #38	; 0x26
 800079e:	f000 f9bc 	bl	8000b1a <HAL_NVIC_SetPriority>

}
 80007a2:	bf00      	nop
 80007a4:	3728      	adds	r7, #40	; 0x28
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40020c00 	.word	0x40020c00

080007b4 <SysTick_Handler>:
 */

#include "main.h"
#include "stm32f7xx_it.h"

void SysTick_Handler(void){
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80007b8:	f000 f8b4 	bl	8000924 <HAL_IncTick>
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}

080007c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007c8:	4a14      	ldr	r2, [pc, #80]	; (800081c <_sbrk+0x5c>)
 80007ca:	4b15      	ldr	r3, [pc, #84]	; (8000820 <_sbrk+0x60>)
 80007cc:	1ad3      	subs	r3, r2, r3
 80007ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007d4:	4b13      	ldr	r3, [pc, #76]	; (8000824 <_sbrk+0x64>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d102      	bne.n	80007e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <_sbrk+0x64>)
 80007de:	4a12      	ldr	r2, [pc, #72]	; (8000828 <_sbrk+0x68>)
 80007e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <_sbrk+0x64>)
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4413      	add	r3, r2
 80007ea:	693a      	ldr	r2, [r7, #16]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d207      	bcs.n	8000800 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007f0:	f001 f96c 	bl	8001acc <__errno>
 80007f4:	4602      	mov	r2, r0
 80007f6:	230c      	movs	r3, #12
 80007f8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80007fa:	f04f 33ff 	mov.w	r3, #4294967295
 80007fe:	e009      	b.n	8000814 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <_sbrk+0x64>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000806:	4b07      	ldr	r3, [pc, #28]	; (8000824 <_sbrk+0x64>)
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4413      	add	r3, r2
 800080e:	4a05      	ldr	r2, [pc, #20]	; (8000824 <_sbrk+0x64>)
 8000810:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000812:	68fb      	ldr	r3, [r7, #12]
}
 8000814:	4618      	mov	r0, r3
 8000816:	3718      	adds	r7, #24
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20080000 	.word	0x20080000
 8000820:	00000400 	.word	0x00000400
 8000824:	200000a4 	.word	0x200000a4
 8000828:	20000138 	.word	0x20000138

0800082c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000830:	4b08      	ldr	r3, [pc, #32]	; (8000854 <SystemInit+0x28>)
 8000832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000836:	4a07      	ldr	r2, [pc, #28]	; (8000854 <SystemInit+0x28>)
 8000838:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800083c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000840:	4b04      	ldr	r3, [pc, #16]	; (8000854 <SystemInit+0x28>)
 8000842:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000846:	609a      	str	r2, [r3, #8]
#endif
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000858:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000890 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800085c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800085e:	e003      	b.n	8000868 <LoopCopyDataInit>

08000860 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000862:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000864:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000866:	3104      	adds	r1, #4

08000868 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000868:	480b      	ldr	r0, [pc, #44]	; (8000898 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800086c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800086e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000870:	d3f6      	bcc.n	8000860 <CopyDataInit>
  ldr  r2, =_sbss
 8000872:	4a0b      	ldr	r2, [pc, #44]	; (80008a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000874:	e002      	b.n	800087c <LoopFillZerobss>

08000876 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000876:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000878:	f842 3b04 	str.w	r3, [r2], #4

0800087c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800087e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000880:	d3f9      	bcc.n	8000876 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000882:	f7ff ffd3 	bl	800082c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000886:	f001 f927 	bl	8001ad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800088a:	f7ff fed7 	bl	800063c <main>
  bx  lr    
 800088e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000890:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000894:	080023b4 	.word	0x080023b4
  ldr  r0, =_sdata
 8000898:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800089c:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 80008a0:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 80008a4:	20000138 	.word	0x20000138

080008a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008a8:	e7fe      	b.n	80008a8 <ADC_IRQHandler>

080008aa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ae:	2003      	movs	r0, #3
 80008b0:	f000 f928 	bl	8000b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008b4:	2000      	movs	r0, #0
 80008b6:	f000 f805 	bl	80008c4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80008ba:	f7ff ff1b 	bl	80006f4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80008be:	2300      	movs	r3, #0
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <HAL_InitTick+0x54>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <HAL_InitTick+0x58>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	4619      	mov	r1, r3
 80008d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008da:	fbb3 f3f1 	udiv	r3, r3, r1
 80008de:	fbb2 f3f3 	udiv	r3, r2, r3
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 f943 	bl	8000b6e <HAL_SYSTICK_Config>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
 80008f0:	e00e      	b.n	8000910 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2b0f      	cmp	r3, #15
 80008f6:	d80a      	bhi.n	800090e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f8:	2200      	movs	r2, #0
 80008fa:	6879      	ldr	r1, [r7, #4]
 80008fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000900:	f000 f90b 	bl	8000b1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000904:	4a06      	ldr	r2, [pc, #24]	; (8000920 <HAL_InitTick+0x5c>)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800090a:	2300      	movs	r3, #0
 800090c:	e000      	b.n	8000910 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800090e:	2301      	movs	r3, #1
}
 8000910:	4618      	mov	r0, r3
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000018 	.word	0x20000018
 800091c:	20000020 	.word	0x20000020
 8000920:	2000001c 	.word	0x2000001c

08000924 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <HAL_IncTick+0x20>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	461a      	mov	r2, r3
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <HAL_IncTick+0x24>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4413      	add	r3, r2
 8000934:	4a04      	ldr	r2, [pc, #16]	; (8000948 <HAL_IncTick+0x24>)
 8000936:	6013      	str	r3, [r2, #0]
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	20000020 	.word	0x20000020
 8000948:	20000130 	.word	0x20000130

0800094c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  return uwTick;
 8000950:	4b03      	ldr	r3, [pc, #12]	; (8000960 <HAL_GetTick+0x14>)
 8000952:	681b      	ldr	r3, [r3, #0]
}
 8000954:	4618      	mov	r0, r3
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	20000130 	.word	0x20000130

08000964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f003 0307 	and.w	r3, r3, #7
 8000972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000974:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <__NVIC_SetPriorityGrouping+0x40>)
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800097a:	68ba      	ldr	r2, [r7, #8]
 800097c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000980:	4013      	ands	r3, r2
 8000982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <__NVIC_SetPriorityGrouping+0x44>)
 800098e:	4313      	orrs	r3, r2
 8000990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000992:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <__NVIC_SetPriorityGrouping+0x40>)
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	60d3      	str	r3, [r2, #12]
}
 8000998:	bf00      	nop
 800099a:	3714      	adds	r7, #20
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	e000ed00 	.word	0xe000ed00
 80009a8:	05fa0000 	.word	0x05fa0000

080009ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b0:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <__NVIC_GetPriorityGrouping+0x18>)
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	0a1b      	lsrs	r3, r3, #8
 80009b6:	f003 0307 	and.w	r3, r3, #7
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	db0b      	blt.n	80009f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	f003 021f 	and.w	r2, r3, #31
 80009e0:	4907      	ldr	r1, [pc, #28]	; (8000a00 <__NVIC_EnableIRQ+0x38>)
 80009e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e6:	095b      	lsrs	r3, r3, #5
 80009e8:	2001      	movs	r0, #1
 80009ea:	fa00 f202 	lsl.w	r2, r0, r2
 80009ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000e100 	.word	0xe000e100

08000a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	6039      	str	r1, [r7, #0]
 8000a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	db0a      	blt.n	8000a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	b2da      	uxtb	r2, r3
 8000a1c:	490c      	ldr	r1, [pc, #48]	; (8000a50 <__NVIC_SetPriority+0x4c>)
 8000a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a22:	0112      	lsls	r2, r2, #4
 8000a24:	b2d2      	uxtb	r2, r2
 8000a26:	440b      	add	r3, r1
 8000a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a2c:	e00a      	b.n	8000a44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	4908      	ldr	r1, [pc, #32]	; (8000a54 <__NVIC_SetPriority+0x50>)
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	f003 030f 	and.w	r3, r3, #15
 8000a3a:	3b04      	subs	r3, #4
 8000a3c:	0112      	lsls	r2, r2, #4
 8000a3e:	b2d2      	uxtb	r2, r2
 8000a40:	440b      	add	r3, r1
 8000a42:	761a      	strb	r2, [r3, #24]
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	e000e100 	.word	0xe000e100
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b089      	sub	sp, #36	; 0x24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60f8      	str	r0, [r7, #12]
 8000a60:	60b9      	str	r1, [r7, #8]
 8000a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	f003 0307 	and.w	r3, r3, #7
 8000a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a6c:	69fb      	ldr	r3, [r7, #28]
 8000a6e:	f1c3 0307 	rsb	r3, r3, #7
 8000a72:	2b04      	cmp	r3, #4
 8000a74:	bf28      	it	cs
 8000a76:	2304      	movcs	r3, #4
 8000a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	2b06      	cmp	r3, #6
 8000a80:	d902      	bls.n	8000a88 <NVIC_EncodePriority+0x30>
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	3b03      	subs	r3, #3
 8000a86:	e000      	b.n	8000a8a <NVIC_EncodePriority+0x32>
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	43da      	mvns	r2, r3
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	401a      	ands	r2, r3
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aaa:	43d9      	mvns	r1, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab0:	4313      	orrs	r3, r2
         );
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3724      	adds	r7, #36	; 0x24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
	...

08000ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ad0:	d301      	bcc.n	8000ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e00f      	b.n	8000af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ad6:	4a0a      	ldr	r2, [pc, #40]	; (8000b00 <SysTick_Config+0x40>)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ade:	210f      	movs	r1, #15
 8000ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae4:	f7ff ff8e 	bl	8000a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ae8:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <SysTick_Config+0x40>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aee:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <SysTick_Config+0x40>)
 8000af0:	2207      	movs	r2, #7
 8000af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	e000e010 	.word	0xe000e010

08000b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f7ff ff29 	bl	8000964 <__NVIC_SetPriorityGrouping>
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b086      	sub	sp, #24
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	4603      	mov	r3, r0
 8000b22:	60b9      	str	r1, [r7, #8]
 8000b24:	607a      	str	r2, [r7, #4]
 8000b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b2c:	f7ff ff3e 	bl	80009ac <__NVIC_GetPriorityGrouping>
 8000b30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	68b9      	ldr	r1, [r7, #8]
 8000b36:	6978      	ldr	r0, [r7, #20]
 8000b38:	f7ff ff8e 	bl	8000a58 <NVIC_EncodePriority>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b42:	4611      	mov	r1, r2
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ff5d 	bl	8000a04 <__NVIC_SetPriority>
}
 8000b4a:	bf00      	nop
 8000b4c:	3718      	adds	r7, #24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	4603      	mov	r3, r0
 8000b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff ff31 	bl	80009c8 <__NVIC_EnableIRQ>
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b082      	sub	sp, #8
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f7ff ffa2 	bl	8000ac0 <SysTick_Config>
 8000b7c:	4603      	mov	r3, r0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b089      	sub	sp, #36	; 0x24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
 8000ba6:	e175      	b.n	8000e94 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000ba8:	2201      	movs	r2, #1
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	697a      	ldr	r2, [r7, #20]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	f040 8164 	bne.w	8000e8e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d00b      	beq.n	8000be6 <HAL_GPIO_Init+0x5e>
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	2b02      	cmp	r3, #2
 8000bd4:	d007      	beq.n	8000be6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bda:	2b11      	cmp	r3, #17
 8000bdc:	d003      	beq.n	8000be6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	2b12      	cmp	r3, #18
 8000be4:	d130      	bne.n	8000c48 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	2203      	movs	r2, #3
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	68da      	ldr	r2, [r3, #12]
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	69ba      	ldr	r2, [r7, #24]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	69ba      	ldr	r2, [r7, #24]
 8000c14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	43db      	mvns	r3, r3
 8000c26:	69ba      	ldr	r2, [r7, #24]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	091b      	lsrs	r3, r3, #4
 8000c32:	f003 0201 	and.w	r2, r3, #1
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	69ba      	ldr	r2, [r7, #24]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	69ba      	ldr	r2, [r7, #24]
 8000c46:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	2203      	movs	r2, #3
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	69ba      	ldr	r2, [r7, #24]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	689a      	ldr	r2, [r3, #8]
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d003      	beq.n	8000c88 <HAL_GPIO_Init+0x100>
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	2b12      	cmp	r3, #18
 8000c86:	d123      	bne.n	8000cd0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	08da      	lsrs	r2, r3, #3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3208      	adds	r2, #8
 8000c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	f003 0307 	and.w	r3, r3, #7
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	220f      	movs	r2, #15
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	691a      	ldr	r2, [r3, #16]
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	08da      	lsrs	r2, r3, #3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	3208      	adds	r2, #8
 8000cca:	69b9      	ldr	r1, [r7, #24]
 8000ccc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	2203      	movs	r2, #3
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f003 0203 	and.w	r2, r3, #3
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	f000 80be 	beq.w	8000e8e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d12:	4b65      	ldr	r3, [pc, #404]	; (8000ea8 <HAL_GPIO_Init+0x320>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d16:	4a64      	ldr	r2, [pc, #400]	; (8000ea8 <HAL_GPIO_Init+0x320>)
 8000d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1e:	4b62      	ldr	r3, [pc, #392]	; (8000ea8 <HAL_GPIO_Init+0x320>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000d2a:	4a60      	ldr	r2, [pc, #384]	; (8000eac <HAL_GPIO_Init+0x324>)
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	089b      	lsrs	r3, r3, #2
 8000d30:	3302      	adds	r3, #2
 8000d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f003 0303 	and.w	r3, r3, #3
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	220f      	movs	r2, #15
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43db      	mvns	r3, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a57      	ldr	r2, [pc, #348]	; (8000eb0 <HAL_GPIO_Init+0x328>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d037      	beq.n	8000dc6 <HAL_GPIO_Init+0x23e>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a56      	ldr	r2, [pc, #344]	; (8000eb4 <HAL_GPIO_Init+0x32c>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d031      	beq.n	8000dc2 <HAL_GPIO_Init+0x23a>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a55      	ldr	r2, [pc, #340]	; (8000eb8 <HAL_GPIO_Init+0x330>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d02b      	beq.n	8000dbe <HAL_GPIO_Init+0x236>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a54      	ldr	r2, [pc, #336]	; (8000ebc <HAL_GPIO_Init+0x334>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d025      	beq.n	8000dba <HAL_GPIO_Init+0x232>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a53      	ldr	r2, [pc, #332]	; (8000ec0 <HAL_GPIO_Init+0x338>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d01f      	beq.n	8000db6 <HAL_GPIO_Init+0x22e>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a52      	ldr	r2, [pc, #328]	; (8000ec4 <HAL_GPIO_Init+0x33c>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d019      	beq.n	8000db2 <HAL_GPIO_Init+0x22a>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a51      	ldr	r2, [pc, #324]	; (8000ec8 <HAL_GPIO_Init+0x340>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d013      	beq.n	8000dae <HAL_GPIO_Init+0x226>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a50      	ldr	r2, [pc, #320]	; (8000ecc <HAL_GPIO_Init+0x344>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d00d      	beq.n	8000daa <HAL_GPIO_Init+0x222>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a4f      	ldr	r2, [pc, #316]	; (8000ed0 <HAL_GPIO_Init+0x348>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d007      	beq.n	8000da6 <HAL_GPIO_Init+0x21e>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a4e      	ldr	r2, [pc, #312]	; (8000ed4 <HAL_GPIO_Init+0x34c>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d101      	bne.n	8000da2 <HAL_GPIO_Init+0x21a>
 8000d9e:	2309      	movs	r3, #9
 8000da0:	e012      	b.n	8000dc8 <HAL_GPIO_Init+0x240>
 8000da2:	230a      	movs	r3, #10
 8000da4:	e010      	b.n	8000dc8 <HAL_GPIO_Init+0x240>
 8000da6:	2308      	movs	r3, #8
 8000da8:	e00e      	b.n	8000dc8 <HAL_GPIO_Init+0x240>
 8000daa:	2307      	movs	r3, #7
 8000dac:	e00c      	b.n	8000dc8 <HAL_GPIO_Init+0x240>
 8000dae:	2306      	movs	r3, #6
 8000db0:	e00a      	b.n	8000dc8 <HAL_GPIO_Init+0x240>
 8000db2:	2305      	movs	r3, #5
 8000db4:	e008      	b.n	8000dc8 <HAL_GPIO_Init+0x240>
 8000db6:	2304      	movs	r3, #4
 8000db8:	e006      	b.n	8000dc8 <HAL_GPIO_Init+0x240>
 8000dba:	2303      	movs	r3, #3
 8000dbc:	e004      	b.n	8000dc8 <HAL_GPIO_Init+0x240>
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	e002      	b.n	8000dc8 <HAL_GPIO_Init+0x240>
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e000      	b.n	8000dc8 <HAL_GPIO_Init+0x240>
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	69fa      	ldr	r2, [r7, #28]
 8000dca:	f002 0203 	and.w	r2, r2, #3
 8000dce:	0092      	lsls	r2, r2, #2
 8000dd0:	4093      	lsls	r3, r2
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000dd8:	4934      	ldr	r1, [pc, #208]	; (8000eac <HAL_GPIO_Init+0x324>)
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	089b      	lsrs	r3, r3, #2
 8000dde:	3302      	adds	r3, #2
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000de6:	4b3c      	ldr	r3, [pc, #240]	; (8000ed8 <HAL_GPIO_Init+0x350>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	43db      	mvns	r3, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4013      	ands	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d003      	beq.n	8000e0a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e0a:	4a33      	ldr	r2, [pc, #204]	; (8000ed8 <HAL_GPIO_Init+0x350>)
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e10:	4b31      	ldr	r3, [pc, #196]	; (8000ed8 <HAL_GPIO_Init+0x350>)
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d003      	beq.n	8000e34 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e34:	4a28      	ldr	r2, [pc, #160]	; (8000ed8 <HAL_GPIO_Init+0x350>)
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e3a:	4b27      	ldr	r3, [pc, #156]	; (8000ed8 <HAL_GPIO_Init+0x350>)
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	43db      	mvns	r3, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4013      	ands	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d003      	beq.n	8000e5e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e5e:	4a1e      	ldr	r2, [pc, #120]	; (8000ed8 <HAL_GPIO_Init+0x350>)
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e64:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <HAL_GPIO_Init+0x350>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d003      	beq.n	8000e88 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e88:	4a13      	ldr	r2, [pc, #76]	; (8000ed8 <HAL_GPIO_Init+0x350>)
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3301      	adds	r3, #1
 8000e92:	61fb      	str	r3, [r7, #28]
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	2b0f      	cmp	r3, #15
 8000e98:	f67f ae86 	bls.w	8000ba8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000e9c:	bf00      	nop
 8000e9e:	3724      	adds	r7, #36	; 0x24
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40013800 	.word	0x40013800
 8000eb0:	40020000 	.word	0x40020000
 8000eb4:	40020400 	.word	0x40020400
 8000eb8:	40020800 	.word	0x40020800
 8000ebc:	40020c00 	.word	0x40020c00
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	40021400 	.word	0x40021400
 8000ec8:	40021800 	.word	0x40021800
 8000ecc:	40021c00 	.word	0x40021c00
 8000ed0:	40022000 	.word	0x40022000
 8000ed4:	40022400 	.word	0x40022400
 8000ed8:	40013c00 	.word	0x40013c00

08000edc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	2300      	movs	r3, #0
 8000eec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ef2:	4b63      	ldr	r3, [pc, #396]	; (8001080 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	f003 030c 	and.w	r3, r3, #12
 8000efa:	2b04      	cmp	r3, #4
 8000efc:	d007      	beq.n	8000f0e <HAL_RCC_GetSysClockFreq+0x32>
 8000efe:	2b08      	cmp	r3, #8
 8000f00:	d008      	beq.n	8000f14 <HAL_RCC_GetSysClockFreq+0x38>
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	f040 80b4 	bne.w	8001070 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000f08:	4b5e      	ldr	r3, [pc, #376]	; (8001084 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8000f0a:	60bb      	str	r3, [r7, #8]
      break;
 8000f0c:	e0b3      	b.n	8001076 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000f0e:	4b5e      	ldr	r3, [pc, #376]	; (8001088 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8000f10:	60bb      	str	r3, [r7, #8]
      break;
 8000f12:	e0b0      	b.n	8001076 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f14:	4b5a      	ldr	r3, [pc, #360]	; (8001080 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f1c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000f1e:	4b58      	ldr	r3, [pc, #352]	; (8001080 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d04a      	beq.n	8000fc0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f2a:	4b55      	ldr	r3, [pc, #340]	; (8001080 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	099b      	lsrs	r3, r3, #6
 8000f30:	f04f 0400 	mov.w	r4, #0
 8000f34:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000f38:	f04f 0200 	mov.w	r2, #0
 8000f3c:	ea03 0501 	and.w	r5, r3, r1
 8000f40:	ea04 0602 	and.w	r6, r4, r2
 8000f44:	4629      	mov	r1, r5
 8000f46:	4632      	mov	r2, r6
 8000f48:	f04f 0300 	mov.w	r3, #0
 8000f4c:	f04f 0400 	mov.w	r4, #0
 8000f50:	0154      	lsls	r4, r2, #5
 8000f52:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000f56:	014b      	lsls	r3, r1, #5
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4622      	mov	r2, r4
 8000f5c:	1b49      	subs	r1, r1, r5
 8000f5e:	eb62 0206 	sbc.w	r2, r2, r6
 8000f62:	f04f 0300 	mov.w	r3, #0
 8000f66:	f04f 0400 	mov.w	r4, #0
 8000f6a:	0194      	lsls	r4, r2, #6
 8000f6c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000f70:	018b      	lsls	r3, r1, #6
 8000f72:	1a5b      	subs	r3, r3, r1
 8000f74:	eb64 0402 	sbc.w	r4, r4, r2
 8000f78:	f04f 0100 	mov.w	r1, #0
 8000f7c:	f04f 0200 	mov.w	r2, #0
 8000f80:	00e2      	lsls	r2, r4, #3
 8000f82:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000f86:	00d9      	lsls	r1, r3, #3
 8000f88:	460b      	mov	r3, r1
 8000f8a:	4614      	mov	r4, r2
 8000f8c:	195b      	adds	r3, r3, r5
 8000f8e:	eb44 0406 	adc.w	r4, r4, r6
 8000f92:	f04f 0100 	mov.w	r1, #0
 8000f96:	f04f 0200 	mov.w	r2, #0
 8000f9a:	0262      	lsls	r2, r4, #9
 8000f9c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8000fa0:	0259      	lsls	r1, r3, #9
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	4614      	mov	r4, r2
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	4621      	mov	r1, r4
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f04f 0400 	mov.w	r4, #0
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4623      	mov	r3, r4
 8000fb4:	f7ff f99c 	bl	80002f0 <__aeabi_uldivmod>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	460c      	mov	r4, r1
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	e049      	b.n	8001054 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fc0:	4b2f      	ldr	r3, [pc, #188]	; (8001080 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	099b      	lsrs	r3, r3, #6
 8000fc6:	f04f 0400 	mov.w	r4, #0
 8000fca:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	ea03 0501 	and.w	r5, r3, r1
 8000fd6:	ea04 0602 	and.w	r6, r4, r2
 8000fda:	4629      	mov	r1, r5
 8000fdc:	4632      	mov	r2, r6
 8000fde:	f04f 0300 	mov.w	r3, #0
 8000fe2:	f04f 0400 	mov.w	r4, #0
 8000fe6:	0154      	lsls	r4, r2, #5
 8000fe8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000fec:	014b      	lsls	r3, r1, #5
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4622      	mov	r2, r4
 8000ff2:	1b49      	subs	r1, r1, r5
 8000ff4:	eb62 0206 	sbc.w	r2, r2, r6
 8000ff8:	f04f 0300 	mov.w	r3, #0
 8000ffc:	f04f 0400 	mov.w	r4, #0
 8001000:	0194      	lsls	r4, r2, #6
 8001002:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001006:	018b      	lsls	r3, r1, #6
 8001008:	1a5b      	subs	r3, r3, r1
 800100a:	eb64 0402 	sbc.w	r4, r4, r2
 800100e:	f04f 0100 	mov.w	r1, #0
 8001012:	f04f 0200 	mov.w	r2, #0
 8001016:	00e2      	lsls	r2, r4, #3
 8001018:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800101c:	00d9      	lsls	r1, r3, #3
 800101e:	460b      	mov	r3, r1
 8001020:	4614      	mov	r4, r2
 8001022:	195b      	adds	r3, r3, r5
 8001024:	eb44 0406 	adc.w	r4, r4, r6
 8001028:	f04f 0100 	mov.w	r1, #0
 800102c:	f04f 0200 	mov.w	r2, #0
 8001030:	02a2      	lsls	r2, r4, #10
 8001032:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001036:	0299      	lsls	r1, r3, #10
 8001038:	460b      	mov	r3, r1
 800103a:	4614      	mov	r4, r2
 800103c:	4618      	mov	r0, r3
 800103e:	4621      	mov	r1, r4
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f04f 0400 	mov.w	r4, #0
 8001046:	461a      	mov	r2, r3
 8001048:	4623      	mov	r3, r4
 800104a:	f7ff f951 	bl	80002f0 <__aeabi_uldivmod>
 800104e:	4603      	mov	r3, r0
 8001050:	460c      	mov	r4, r1
 8001052:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001054:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	0c1b      	lsrs	r3, r3, #16
 800105a:	f003 0303 	and.w	r3, r3, #3
 800105e:	3301      	adds	r3, #1
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001064:	68fa      	ldr	r2, [r7, #12]
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	fbb2 f3f3 	udiv	r3, r2, r3
 800106c:	60bb      	str	r3, [r7, #8]
      break;
 800106e:	e002      	b.n	8001076 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001070:	4b04      	ldr	r3, [pc, #16]	; (8001084 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001072:	60bb      	str	r3, [r7, #8]
      break;
 8001074:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001076:	68bb      	ldr	r3, [r7, #8]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001080:	40023800 	.word	0x40023800
 8001084:	00f42400 	.word	0x00f42400
 8001088:	007a1200 	.word	0x007a1200

0800108c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001090:	4b03      	ldr	r3, [pc, #12]	; (80010a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001092:	681b      	ldr	r3, [r3, #0]
}
 8001094:	4618      	mov	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20000018 	.word	0x20000018

080010a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80010a8:	f7ff fff0 	bl	800108c <HAL_RCC_GetHCLKFreq>
 80010ac:	4601      	mov	r1, r0
 80010ae:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	0a9b      	lsrs	r3, r3, #10
 80010b4:	f003 0307 	and.w	r3, r3, #7
 80010b8:	4a03      	ldr	r2, [pc, #12]	; (80010c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80010ba:	5cd3      	ldrb	r3, [r2, r3]
 80010bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40023800 	.word	0x40023800
 80010c8:	08002368 	.word	0x08002368

080010cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80010d0:	f7ff ffdc 	bl	800108c <HAL_RCC_GetHCLKFreq>
 80010d4:	4601      	mov	r1, r0
 80010d6:	4b05      	ldr	r3, [pc, #20]	; (80010ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	0b5b      	lsrs	r3, r3, #13
 80010dc:	f003 0307 	and.w	r3, r3, #7
 80010e0:	4a03      	ldr	r2, [pc, #12]	; (80010f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80010e2:	5cd3      	ldrb	r3, [r2, r3]
 80010e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40023800 	.word	0x40023800
 80010f0:	08002368 	.word	0x08002368

080010f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d101      	bne.n	8001106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e040      	b.n	8001188 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800110a:	2b00      	cmp	r3, #0
 800110c:	d106      	bne.n	800111c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff fb0e 	bl	8000738 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2224      	movs	r2, #36	; 0x24
 8001120:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f022 0201 	bic.w	r2, r2, #1
 8001130:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f000 f8be 	bl	80012b4 <UART_SetConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b01      	cmp	r3, #1
 800113c:	d101      	bne.n	8001142 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e022      	b.n	8001188 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001146:	2b00      	cmp	r3, #0
 8001148:	d002      	beq.n	8001150 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f000 fb5c 	bl	8001808 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800115e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	689a      	ldr	r2, [r3, #8]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800116e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f042 0201 	orr.w	r2, r2, #1
 800117e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f000 fbe3 	bl	800194c <UART_CheckIdleState>
 8001186:	4603      	mov	r3, r0
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	; 0x28
 8001194:	af02      	add	r7, sp, #8
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	603b      	str	r3, [r7, #0]
 800119c:	4613      	mov	r3, r2
 800119e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011a4:	2b20      	cmp	r3, #32
 80011a6:	d17f      	bne.n	80012a8 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d002      	beq.n	80011b4 <HAL_UART_Transmit+0x24>
 80011ae:	88fb      	ldrh	r3, [r7, #6]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d101      	bne.n	80011b8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e078      	b.n	80012aa <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d101      	bne.n	80011c6 <HAL_UART_Transmit+0x36>
 80011c2:	2302      	movs	r3, #2
 80011c4:	e071      	b.n	80012aa <HAL_UART_Transmit+0x11a>
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2201      	movs	r2, #1
 80011ca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2200      	movs	r2, #0
 80011d2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2221      	movs	r2, #33	; 0x21
 80011d8:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80011da:	f7ff fbb7 	bl	800094c <HAL_GetTick>
 80011de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	88fa      	ldrh	r2, [r7, #6]
 80011e4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	88fa      	ldrh	r2, [r7, #6]
 80011ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011f8:	d108      	bne.n	800120c <HAL_UART_Transmit+0x7c>
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d104      	bne.n	800120c <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	61bb      	str	r3, [r7, #24]
 800120a:	e003      	b.n	8001214 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001210:	2300      	movs	r3, #0
 8001212:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800121c:	e02c      	b.n	8001278 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	2200      	movs	r2, #0
 8001226:	2180      	movs	r1, #128	; 0x80
 8001228:	68f8      	ldr	r0, [r7, #12]
 800122a:	f000 fbd4 	bl	80019d6 <UART_WaitOnFlagUntilTimeout>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e038      	b.n	80012aa <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d10b      	bne.n	8001256 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	461a      	mov	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800124c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	3302      	adds	r3, #2
 8001252:	61bb      	str	r3, [r7, #24]
 8001254:	e007      	b.n	8001266 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	781a      	ldrb	r2, [r3, #0]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	3301      	adds	r3, #1
 8001264:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800126c:	b29b      	uxth	r3, r3
 800126e:	3b01      	subs	r3, #1
 8001270:	b29a      	uxth	r2, r3
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800127e:	b29b      	uxth	r3, r3
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1cc      	bne.n	800121e <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	2200      	movs	r2, #0
 800128c:	2140      	movs	r1, #64	; 0x40
 800128e:	68f8      	ldr	r0, [r7, #12]
 8001290:	f000 fba1 	bl	80019d6 <UART_WaitOnFlagUntilTimeout>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e005      	b.n	80012aa <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2220      	movs	r2, #32
 80012a2:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80012a4:	2300      	movs	r3, #0
 80012a6:	e000      	b.n	80012aa <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80012a8:	2302      	movs	r3, #2
  }
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3720      	adds	r7, #32
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80012bc:	2300      	movs	r3, #0
 80012be:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80012c0:	2300      	movs	r3, #0
 80012c2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689a      	ldr	r2, [r3, #8]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	691b      	ldr	r3, [r3, #16]
 80012cc:	431a      	orrs	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	431a      	orrs	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	69db      	ldr	r3, [r3, #28]
 80012d8:	4313      	orrs	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	4bb1      	ldr	r3, [pc, #708]	; (80015a8 <UART_SetConfig+0x2f4>)
 80012e4:	4013      	ands	r3, r2
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	6812      	ldr	r2, [r2, #0]
 80012ea:	6939      	ldr	r1, [r7, #16]
 80012ec:	430b      	orrs	r3, r1
 80012ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	68da      	ldr	r2, [r3, #12]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	430a      	orrs	r2, r1
 8001304:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a1b      	ldr	r3, [r3, #32]
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4313      	orrs	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	430a      	orrs	r2, r1
 8001328:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a9f      	ldr	r2, [pc, #636]	; (80015ac <UART_SetConfig+0x2f8>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d121      	bne.n	8001378 <UART_SetConfig+0xc4>
 8001334:	4b9e      	ldr	r3, [pc, #632]	; (80015b0 <UART_SetConfig+0x2fc>)
 8001336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800133a:	f003 0303 	and.w	r3, r3, #3
 800133e:	2b03      	cmp	r3, #3
 8001340:	d816      	bhi.n	8001370 <UART_SetConfig+0xbc>
 8001342:	a201      	add	r2, pc, #4	; (adr r2, 8001348 <UART_SetConfig+0x94>)
 8001344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001348:	08001359 	.word	0x08001359
 800134c:	08001365 	.word	0x08001365
 8001350:	0800135f 	.word	0x0800135f
 8001354:	0800136b 	.word	0x0800136b
 8001358:	2301      	movs	r3, #1
 800135a:	77fb      	strb	r3, [r7, #31]
 800135c:	e151      	b.n	8001602 <UART_SetConfig+0x34e>
 800135e:	2302      	movs	r3, #2
 8001360:	77fb      	strb	r3, [r7, #31]
 8001362:	e14e      	b.n	8001602 <UART_SetConfig+0x34e>
 8001364:	2304      	movs	r3, #4
 8001366:	77fb      	strb	r3, [r7, #31]
 8001368:	e14b      	b.n	8001602 <UART_SetConfig+0x34e>
 800136a:	2308      	movs	r3, #8
 800136c:	77fb      	strb	r3, [r7, #31]
 800136e:	e148      	b.n	8001602 <UART_SetConfig+0x34e>
 8001370:	2310      	movs	r3, #16
 8001372:	77fb      	strb	r3, [r7, #31]
 8001374:	bf00      	nop
 8001376:	e144      	b.n	8001602 <UART_SetConfig+0x34e>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a8d      	ldr	r2, [pc, #564]	; (80015b4 <UART_SetConfig+0x300>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d134      	bne.n	80013ec <UART_SetConfig+0x138>
 8001382:	4b8b      	ldr	r3, [pc, #556]	; (80015b0 <UART_SetConfig+0x2fc>)
 8001384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001388:	f003 030c 	and.w	r3, r3, #12
 800138c:	2b0c      	cmp	r3, #12
 800138e:	d829      	bhi.n	80013e4 <UART_SetConfig+0x130>
 8001390:	a201      	add	r2, pc, #4	; (adr r2, 8001398 <UART_SetConfig+0xe4>)
 8001392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001396:	bf00      	nop
 8001398:	080013cd 	.word	0x080013cd
 800139c:	080013e5 	.word	0x080013e5
 80013a0:	080013e5 	.word	0x080013e5
 80013a4:	080013e5 	.word	0x080013e5
 80013a8:	080013d9 	.word	0x080013d9
 80013ac:	080013e5 	.word	0x080013e5
 80013b0:	080013e5 	.word	0x080013e5
 80013b4:	080013e5 	.word	0x080013e5
 80013b8:	080013d3 	.word	0x080013d3
 80013bc:	080013e5 	.word	0x080013e5
 80013c0:	080013e5 	.word	0x080013e5
 80013c4:	080013e5 	.word	0x080013e5
 80013c8:	080013df 	.word	0x080013df
 80013cc:	2300      	movs	r3, #0
 80013ce:	77fb      	strb	r3, [r7, #31]
 80013d0:	e117      	b.n	8001602 <UART_SetConfig+0x34e>
 80013d2:	2302      	movs	r3, #2
 80013d4:	77fb      	strb	r3, [r7, #31]
 80013d6:	e114      	b.n	8001602 <UART_SetConfig+0x34e>
 80013d8:	2304      	movs	r3, #4
 80013da:	77fb      	strb	r3, [r7, #31]
 80013dc:	e111      	b.n	8001602 <UART_SetConfig+0x34e>
 80013de:	2308      	movs	r3, #8
 80013e0:	77fb      	strb	r3, [r7, #31]
 80013e2:	e10e      	b.n	8001602 <UART_SetConfig+0x34e>
 80013e4:	2310      	movs	r3, #16
 80013e6:	77fb      	strb	r3, [r7, #31]
 80013e8:	bf00      	nop
 80013ea:	e10a      	b.n	8001602 <UART_SetConfig+0x34e>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a71      	ldr	r2, [pc, #452]	; (80015b8 <UART_SetConfig+0x304>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d120      	bne.n	8001438 <UART_SetConfig+0x184>
 80013f6:	4b6e      	ldr	r3, [pc, #440]	; (80015b0 <UART_SetConfig+0x2fc>)
 80013f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001400:	2b10      	cmp	r3, #16
 8001402:	d00f      	beq.n	8001424 <UART_SetConfig+0x170>
 8001404:	2b10      	cmp	r3, #16
 8001406:	d802      	bhi.n	800140e <UART_SetConfig+0x15a>
 8001408:	2b00      	cmp	r3, #0
 800140a:	d005      	beq.n	8001418 <UART_SetConfig+0x164>
 800140c:	e010      	b.n	8001430 <UART_SetConfig+0x17c>
 800140e:	2b20      	cmp	r3, #32
 8001410:	d005      	beq.n	800141e <UART_SetConfig+0x16a>
 8001412:	2b30      	cmp	r3, #48	; 0x30
 8001414:	d009      	beq.n	800142a <UART_SetConfig+0x176>
 8001416:	e00b      	b.n	8001430 <UART_SetConfig+0x17c>
 8001418:	2300      	movs	r3, #0
 800141a:	77fb      	strb	r3, [r7, #31]
 800141c:	e0f1      	b.n	8001602 <UART_SetConfig+0x34e>
 800141e:	2302      	movs	r3, #2
 8001420:	77fb      	strb	r3, [r7, #31]
 8001422:	e0ee      	b.n	8001602 <UART_SetConfig+0x34e>
 8001424:	2304      	movs	r3, #4
 8001426:	77fb      	strb	r3, [r7, #31]
 8001428:	e0eb      	b.n	8001602 <UART_SetConfig+0x34e>
 800142a:	2308      	movs	r3, #8
 800142c:	77fb      	strb	r3, [r7, #31]
 800142e:	e0e8      	b.n	8001602 <UART_SetConfig+0x34e>
 8001430:	2310      	movs	r3, #16
 8001432:	77fb      	strb	r3, [r7, #31]
 8001434:	bf00      	nop
 8001436:	e0e4      	b.n	8001602 <UART_SetConfig+0x34e>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a5f      	ldr	r2, [pc, #380]	; (80015bc <UART_SetConfig+0x308>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d120      	bne.n	8001484 <UART_SetConfig+0x1d0>
 8001442:	4b5b      	ldr	r3, [pc, #364]	; (80015b0 <UART_SetConfig+0x2fc>)
 8001444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001448:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800144c:	2b40      	cmp	r3, #64	; 0x40
 800144e:	d00f      	beq.n	8001470 <UART_SetConfig+0x1bc>
 8001450:	2b40      	cmp	r3, #64	; 0x40
 8001452:	d802      	bhi.n	800145a <UART_SetConfig+0x1a6>
 8001454:	2b00      	cmp	r3, #0
 8001456:	d005      	beq.n	8001464 <UART_SetConfig+0x1b0>
 8001458:	e010      	b.n	800147c <UART_SetConfig+0x1c8>
 800145a:	2b80      	cmp	r3, #128	; 0x80
 800145c:	d005      	beq.n	800146a <UART_SetConfig+0x1b6>
 800145e:	2bc0      	cmp	r3, #192	; 0xc0
 8001460:	d009      	beq.n	8001476 <UART_SetConfig+0x1c2>
 8001462:	e00b      	b.n	800147c <UART_SetConfig+0x1c8>
 8001464:	2300      	movs	r3, #0
 8001466:	77fb      	strb	r3, [r7, #31]
 8001468:	e0cb      	b.n	8001602 <UART_SetConfig+0x34e>
 800146a:	2302      	movs	r3, #2
 800146c:	77fb      	strb	r3, [r7, #31]
 800146e:	e0c8      	b.n	8001602 <UART_SetConfig+0x34e>
 8001470:	2304      	movs	r3, #4
 8001472:	77fb      	strb	r3, [r7, #31]
 8001474:	e0c5      	b.n	8001602 <UART_SetConfig+0x34e>
 8001476:	2308      	movs	r3, #8
 8001478:	77fb      	strb	r3, [r7, #31]
 800147a:	e0c2      	b.n	8001602 <UART_SetConfig+0x34e>
 800147c:	2310      	movs	r3, #16
 800147e:	77fb      	strb	r3, [r7, #31]
 8001480:	bf00      	nop
 8001482:	e0be      	b.n	8001602 <UART_SetConfig+0x34e>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a4d      	ldr	r2, [pc, #308]	; (80015c0 <UART_SetConfig+0x30c>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d124      	bne.n	80014d8 <UART_SetConfig+0x224>
 800148e:	4b48      	ldr	r3, [pc, #288]	; (80015b0 <UART_SetConfig+0x2fc>)
 8001490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001494:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800149c:	d012      	beq.n	80014c4 <UART_SetConfig+0x210>
 800149e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014a2:	d802      	bhi.n	80014aa <UART_SetConfig+0x1f6>
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d007      	beq.n	80014b8 <UART_SetConfig+0x204>
 80014a8:	e012      	b.n	80014d0 <UART_SetConfig+0x21c>
 80014aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014ae:	d006      	beq.n	80014be <UART_SetConfig+0x20a>
 80014b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80014b4:	d009      	beq.n	80014ca <UART_SetConfig+0x216>
 80014b6:	e00b      	b.n	80014d0 <UART_SetConfig+0x21c>
 80014b8:	2300      	movs	r3, #0
 80014ba:	77fb      	strb	r3, [r7, #31]
 80014bc:	e0a1      	b.n	8001602 <UART_SetConfig+0x34e>
 80014be:	2302      	movs	r3, #2
 80014c0:	77fb      	strb	r3, [r7, #31]
 80014c2:	e09e      	b.n	8001602 <UART_SetConfig+0x34e>
 80014c4:	2304      	movs	r3, #4
 80014c6:	77fb      	strb	r3, [r7, #31]
 80014c8:	e09b      	b.n	8001602 <UART_SetConfig+0x34e>
 80014ca:	2308      	movs	r3, #8
 80014cc:	77fb      	strb	r3, [r7, #31]
 80014ce:	e098      	b.n	8001602 <UART_SetConfig+0x34e>
 80014d0:	2310      	movs	r3, #16
 80014d2:	77fb      	strb	r3, [r7, #31]
 80014d4:	bf00      	nop
 80014d6:	e094      	b.n	8001602 <UART_SetConfig+0x34e>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a39      	ldr	r2, [pc, #228]	; (80015c4 <UART_SetConfig+0x310>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d124      	bne.n	800152c <UART_SetConfig+0x278>
 80014e2:	4b33      	ldr	r3, [pc, #204]	; (80015b0 <UART_SetConfig+0x2fc>)
 80014e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80014ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014f0:	d012      	beq.n	8001518 <UART_SetConfig+0x264>
 80014f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014f6:	d802      	bhi.n	80014fe <UART_SetConfig+0x24a>
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d007      	beq.n	800150c <UART_SetConfig+0x258>
 80014fc:	e012      	b.n	8001524 <UART_SetConfig+0x270>
 80014fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001502:	d006      	beq.n	8001512 <UART_SetConfig+0x25e>
 8001504:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001508:	d009      	beq.n	800151e <UART_SetConfig+0x26a>
 800150a:	e00b      	b.n	8001524 <UART_SetConfig+0x270>
 800150c:	2301      	movs	r3, #1
 800150e:	77fb      	strb	r3, [r7, #31]
 8001510:	e077      	b.n	8001602 <UART_SetConfig+0x34e>
 8001512:	2302      	movs	r3, #2
 8001514:	77fb      	strb	r3, [r7, #31]
 8001516:	e074      	b.n	8001602 <UART_SetConfig+0x34e>
 8001518:	2304      	movs	r3, #4
 800151a:	77fb      	strb	r3, [r7, #31]
 800151c:	e071      	b.n	8001602 <UART_SetConfig+0x34e>
 800151e:	2308      	movs	r3, #8
 8001520:	77fb      	strb	r3, [r7, #31]
 8001522:	e06e      	b.n	8001602 <UART_SetConfig+0x34e>
 8001524:	2310      	movs	r3, #16
 8001526:	77fb      	strb	r3, [r7, #31]
 8001528:	bf00      	nop
 800152a:	e06a      	b.n	8001602 <UART_SetConfig+0x34e>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a25      	ldr	r2, [pc, #148]	; (80015c8 <UART_SetConfig+0x314>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d124      	bne.n	8001580 <UART_SetConfig+0x2cc>
 8001536:	4b1e      	ldr	r3, [pc, #120]	; (80015b0 <UART_SetConfig+0x2fc>)
 8001538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800153c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001544:	d012      	beq.n	800156c <UART_SetConfig+0x2b8>
 8001546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800154a:	d802      	bhi.n	8001552 <UART_SetConfig+0x29e>
 800154c:	2b00      	cmp	r3, #0
 800154e:	d007      	beq.n	8001560 <UART_SetConfig+0x2ac>
 8001550:	e012      	b.n	8001578 <UART_SetConfig+0x2c4>
 8001552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001556:	d006      	beq.n	8001566 <UART_SetConfig+0x2b2>
 8001558:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800155c:	d009      	beq.n	8001572 <UART_SetConfig+0x2be>
 800155e:	e00b      	b.n	8001578 <UART_SetConfig+0x2c4>
 8001560:	2300      	movs	r3, #0
 8001562:	77fb      	strb	r3, [r7, #31]
 8001564:	e04d      	b.n	8001602 <UART_SetConfig+0x34e>
 8001566:	2302      	movs	r3, #2
 8001568:	77fb      	strb	r3, [r7, #31]
 800156a:	e04a      	b.n	8001602 <UART_SetConfig+0x34e>
 800156c:	2304      	movs	r3, #4
 800156e:	77fb      	strb	r3, [r7, #31]
 8001570:	e047      	b.n	8001602 <UART_SetConfig+0x34e>
 8001572:	2308      	movs	r3, #8
 8001574:	77fb      	strb	r3, [r7, #31]
 8001576:	e044      	b.n	8001602 <UART_SetConfig+0x34e>
 8001578:	2310      	movs	r3, #16
 800157a:	77fb      	strb	r3, [r7, #31]
 800157c:	bf00      	nop
 800157e:	e040      	b.n	8001602 <UART_SetConfig+0x34e>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a11      	ldr	r2, [pc, #68]	; (80015cc <UART_SetConfig+0x318>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d139      	bne.n	80015fe <UART_SetConfig+0x34a>
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <UART_SetConfig+0x2fc>)
 800158c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001590:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001594:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001598:	d027      	beq.n	80015ea <UART_SetConfig+0x336>
 800159a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800159e:	d817      	bhi.n	80015d0 <UART_SetConfig+0x31c>
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d01c      	beq.n	80015de <UART_SetConfig+0x32a>
 80015a4:	e027      	b.n	80015f6 <UART_SetConfig+0x342>
 80015a6:	bf00      	nop
 80015a8:	efff69f3 	.word	0xefff69f3
 80015ac:	40011000 	.word	0x40011000
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40004400 	.word	0x40004400
 80015b8:	40004800 	.word	0x40004800
 80015bc:	40004c00 	.word	0x40004c00
 80015c0:	40005000 	.word	0x40005000
 80015c4:	40011400 	.word	0x40011400
 80015c8:	40007800 	.word	0x40007800
 80015cc:	40007c00 	.word	0x40007c00
 80015d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015d4:	d006      	beq.n	80015e4 <UART_SetConfig+0x330>
 80015d6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80015da:	d009      	beq.n	80015f0 <UART_SetConfig+0x33c>
 80015dc:	e00b      	b.n	80015f6 <UART_SetConfig+0x342>
 80015de:	2300      	movs	r3, #0
 80015e0:	77fb      	strb	r3, [r7, #31]
 80015e2:	e00e      	b.n	8001602 <UART_SetConfig+0x34e>
 80015e4:	2302      	movs	r3, #2
 80015e6:	77fb      	strb	r3, [r7, #31]
 80015e8:	e00b      	b.n	8001602 <UART_SetConfig+0x34e>
 80015ea:	2304      	movs	r3, #4
 80015ec:	77fb      	strb	r3, [r7, #31]
 80015ee:	e008      	b.n	8001602 <UART_SetConfig+0x34e>
 80015f0:	2308      	movs	r3, #8
 80015f2:	77fb      	strb	r3, [r7, #31]
 80015f4:	e005      	b.n	8001602 <UART_SetConfig+0x34e>
 80015f6:	2310      	movs	r3, #16
 80015f8:	77fb      	strb	r3, [r7, #31]
 80015fa:	bf00      	nop
 80015fc:	e001      	b.n	8001602 <UART_SetConfig+0x34e>
 80015fe:	2310      	movs	r3, #16
 8001600:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800160a:	d17f      	bne.n	800170c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800160c:	7ffb      	ldrb	r3, [r7, #31]
 800160e:	2b08      	cmp	r3, #8
 8001610:	d85c      	bhi.n	80016cc <UART_SetConfig+0x418>
 8001612:	a201      	add	r2, pc, #4	; (adr r2, 8001618 <UART_SetConfig+0x364>)
 8001614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001618:	0800163d 	.word	0x0800163d
 800161c:	0800165d 	.word	0x0800165d
 8001620:	0800167d 	.word	0x0800167d
 8001624:	080016cd 	.word	0x080016cd
 8001628:	08001695 	.word	0x08001695
 800162c:	080016cd 	.word	0x080016cd
 8001630:	080016cd 	.word	0x080016cd
 8001634:	080016cd 	.word	0x080016cd
 8001638:	080016b5 	.word	0x080016b5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800163c:	f7ff fd32 	bl	80010a4 <HAL_RCC_GetPCLK1Freq>
 8001640:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	005a      	lsls	r2, r3, #1
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	085b      	lsrs	r3, r3, #1
 800164c:	441a      	add	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	fbb2 f3f3 	udiv	r3, r2, r3
 8001656:	b29b      	uxth	r3, r3
 8001658:	61bb      	str	r3, [r7, #24]
        break;
 800165a:	e03a      	b.n	80016d2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800165c:	f7ff fd36 	bl	80010cc <HAL_RCC_GetPCLK2Freq>
 8001660:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	005a      	lsls	r2, r3, #1
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	085b      	lsrs	r3, r3, #1
 800166c:	441a      	add	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	fbb2 f3f3 	udiv	r3, r2, r3
 8001676:	b29b      	uxth	r3, r3
 8001678:	61bb      	str	r3, [r7, #24]
        break;
 800167a:	e02a      	b.n	80016d2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	085a      	lsrs	r2, r3, #1
 8001682:	4b5f      	ldr	r3, [pc, #380]	; (8001800 <UART_SetConfig+0x54c>)
 8001684:	4413      	add	r3, r2
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	6852      	ldr	r2, [r2, #4]
 800168a:	fbb3 f3f2 	udiv	r3, r3, r2
 800168e:	b29b      	uxth	r3, r3
 8001690:	61bb      	str	r3, [r7, #24]
        break;
 8001692:	e01e      	b.n	80016d2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001694:	f7ff fc22 	bl	8000edc <HAL_RCC_GetSysClockFreq>
 8001698:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	005a      	lsls	r2, r3, #1
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	085b      	lsrs	r3, r3, #1
 80016a4:	441a      	add	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	61bb      	str	r3, [r7, #24]
        break;
 80016b2:	e00e      	b.n	80016d2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	085b      	lsrs	r3, r3, #1
 80016ba:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	61bb      	str	r3, [r7, #24]
        break;
 80016ca:	e002      	b.n	80016d2 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	75fb      	strb	r3, [r7, #23]
        break;
 80016d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	2b0f      	cmp	r3, #15
 80016d6:	d916      	bls.n	8001706 <UART_SetConfig+0x452>
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016de:	d212      	bcs.n	8001706 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	f023 030f 	bic.w	r3, r3, #15
 80016e8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	085b      	lsrs	r3, r3, #1
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	897b      	ldrh	r3, [r7, #10]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	897a      	ldrh	r2, [r7, #10]
 8001702:	60da      	str	r2, [r3, #12]
 8001704:	e070      	b.n	80017e8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	75fb      	strb	r3, [r7, #23]
 800170a:	e06d      	b.n	80017e8 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800170c:	7ffb      	ldrb	r3, [r7, #31]
 800170e:	2b08      	cmp	r3, #8
 8001710:	d859      	bhi.n	80017c6 <UART_SetConfig+0x512>
 8001712:	a201      	add	r2, pc, #4	; (adr r2, 8001718 <UART_SetConfig+0x464>)
 8001714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001718:	0800173d 	.word	0x0800173d
 800171c:	0800175b 	.word	0x0800175b
 8001720:	08001779 	.word	0x08001779
 8001724:	080017c7 	.word	0x080017c7
 8001728:	08001791 	.word	0x08001791
 800172c:	080017c7 	.word	0x080017c7
 8001730:	080017c7 	.word	0x080017c7
 8001734:	080017c7 	.word	0x080017c7
 8001738:	080017af 	.word	0x080017af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800173c:	f7ff fcb2 	bl	80010a4 <HAL_RCC_GetPCLK1Freq>
 8001740:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	085a      	lsrs	r2, r3, #1
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	441a      	add	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	fbb2 f3f3 	udiv	r3, r2, r3
 8001754:	b29b      	uxth	r3, r3
 8001756:	61bb      	str	r3, [r7, #24]
        break;
 8001758:	e038      	b.n	80017cc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800175a:	f7ff fcb7 	bl	80010cc <HAL_RCC_GetPCLK2Freq>
 800175e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	085a      	lsrs	r2, r3, #1
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	441a      	add	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001772:	b29b      	uxth	r3, r3
 8001774:	61bb      	str	r3, [r7, #24]
        break;
 8001776:	e029      	b.n	80017cc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	085a      	lsrs	r2, r3, #1
 800177e:	4b21      	ldr	r3, [pc, #132]	; (8001804 <UART_SetConfig+0x550>)
 8001780:	4413      	add	r3, r2
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	6852      	ldr	r2, [r2, #4]
 8001786:	fbb3 f3f2 	udiv	r3, r3, r2
 800178a:	b29b      	uxth	r3, r3
 800178c:	61bb      	str	r3, [r7, #24]
        break;
 800178e:	e01d      	b.n	80017cc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001790:	f7ff fba4 	bl	8000edc <HAL_RCC_GetSysClockFreq>
 8001794:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	085a      	lsrs	r2, r3, #1
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	441a      	add	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	61bb      	str	r3, [r7, #24]
        break;
 80017ac:	e00e      	b.n	80017cc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	085b      	lsrs	r3, r3, #1
 80017b4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	61bb      	str	r3, [r7, #24]
        break;
 80017c4:	e002      	b.n	80017cc <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	75fb      	strb	r3, [r7, #23]
        break;
 80017ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	2b0f      	cmp	r3, #15
 80017d0:	d908      	bls.n	80017e4 <UART_SetConfig+0x530>
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017d8:	d204      	bcs.n	80017e4 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	e001      	b.n	80017e8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80017f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3720      	adds	r7, #32
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	01e84800 	.word	0x01e84800
 8001804:	00f42400 	.word	0x00f42400

08001808 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	2b00      	cmp	r3, #0
 800181a:	d00a      	beq.n	8001832 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	430a      	orrs	r2, r1
 8001830:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d00a      	beq.n	8001854 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	430a      	orrs	r2, r1
 8001852:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	2b00      	cmp	r3, #0
 800185e:	d00a      	beq.n	8001876 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	430a      	orrs	r2, r1
 8001874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187a:	f003 0308 	and.w	r3, r3, #8
 800187e:	2b00      	cmp	r3, #0
 8001880:	d00a      	beq.n	8001898 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189c:	f003 0310 	and.w	r3, r3, #16
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d00a      	beq.n	80018ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	f003 0320 	and.w	r3, r3, #32
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00a      	beq.n	80018dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	430a      	orrs	r2, r1
 80018da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d01a      	beq.n	800191e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	430a      	orrs	r2, r1
 80018fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001906:	d10a      	bne.n	800191e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	430a      	orrs	r2, r1
 800191c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001926:	2b00      	cmp	r3, #0
 8001928:	d00a      	beq.n	8001940 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	430a      	orrs	r2, r1
 800193e:	605a      	str	r2, [r3, #4]
  }
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af02      	add	r7, sp, #8
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800195a:	f7fe fff7 	bl	800094c <HAL_GetTick>
 800195e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0308 	and.w	r3, r3, #8
 800196a:	2b08      	cmp	r3, #8
 800196c:	d10e      	bne.n	800198c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800196e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2200      	movs	r2, #0
 8001978:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 f82a 	bl	80019d6 <UART_WaitOnFlagUntilTimeout>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e020      	b.n	80019ce <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0304 	and.w	r3, r3, #4
 8001996:	2b04      	cmp	r3, #4
 8001998:	d10e      	bne.n	80019b8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800199a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 f814 	bl	80019d6 <UART_WaitOnFlagUntilTimeout>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e00a      	b.n	80019ce <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2220      	movs	r2, #32
 80019bc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2220      	movs	r2, #32
 80019c2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b084      	sub	sp, #16
 80019da:	af00      	add	r7, sp, #0
 80019dc:	60f8      	str	r0, [r7, #12]
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	603b      	str	r3, [r7, #0]
 80019e2:	4613      	mov	r3, r2
 80019e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80019e6:	e05d      	b.n	8001aa4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ee:	d059      	beq.n	8001aa4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019f0:	f7fe ffac 	bl	800094c <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d302      	bcc.n	8001a06 <UART_WaitOnFlagUntilTimeout+0x30>
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d11b      	bne.n	8001a3e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001a14:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0201 	bic.w	r2, r2, #1
 8001a24:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2220      	movs	r2, #32
 8001a2a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2220      	movs	r2, #32
 8001a30:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e042      	b.n	8001ac4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d02b      	beq.n	8001aa4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a5a:	d123      	bne.n	8001aa4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a64:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001a74:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 0201 	bic.w	r2, r2, #1
 8001a84:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2220      	movs	r2, #32
 8001a8a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2220      	movs	r2, #32
 8001a90:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2220      	movs	r2, #32
 8001a96:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e00f      	b.n	8001ac4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	69da      	ldr	r2, [r3, #28]
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	4013      	ands	r3, r2
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	bf0c      	ite	eq
 8001ab4:	2301      	moveq	r3, #1
 8001ab6:	2300      	movne	r3, #0
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	461a      	mov	r2, r3
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d092      	beq.n	80019e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <__errno>:
 8001acc:	4b01      	ldr	r3, [pc, #4]	; (8001ad4 <__errno+0x8>)
 8001ace:	6818      	ldr	r0, [r3, #0]
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	20000024 	.word	0x20000024

08001ad8 <__libc_init_array>:
 8001ad8:	b570      	push	{r4, r5, r6, lr}
 8001ada:	4e0d      	ldr	r6, [pc, #52]	; (8001b10 <__libc_init_array+0x38>)
 8001adc:	4c0d      	ldr	r4, [pc, #52]	; (8001b14 <__libc_init_array+0x3c>)
 8001ade:	1ba4      	subs	r4, r4, r6
 8001ae0:	10a4      	asrs	r4, r4, #2
 8001ae2:	2500      	movs	r5, #0
 8001ae4:	42a5      	cmp	r5, r4
 8001ae6:	d109      	bne.n	8001afc <__libc_init_array+0x24>
 8001ae8:	4e0b      	ldr	r6, [pc, #44]	; (8001b18 <__libc_init_array+0x40>)
 8001aea:	4c0c      	ldr	r4, [pc, #48]	; (8001b1c <__libc_init_array+0x44>)
 8001aec:	f000 fc1e 	bl	800232c <_init>
 8001af0:	1ba4      	subs	r4, r4, r6
 8001af2:	10a4      	asrs	r4, r4, #2
 8001af4:	2500      	movs	r5, #0
 8001af6:	42a5      	cmp	r5, r4
 8001af8:	d105      	bne.n	8001b06 <__libc_init_array+0x2e>
 8001afa:	bd70      	pop	{r4, r5, r6, pc}
 8001afc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b00:	4798      	blx	r3
 8001b02:	3501      	adds	r5, #1
 8001b04:	e7ee      	b.n	8001ae4 <__libc_init_array+0xc>
 8001b06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b0a:	4798      	blx	r3
 8001b0c:	3501      	adds	r5, #1
 8001b0e:	e7f2      	b.n	8001af6 <__libc_init_array+0x1e>
 8001b10:	080023ac 	.word	0x080023ac
 8001b14:	080023ac 	.word	0x080023ac
 8001b18:	080023ac 	.word	0x080023ac
 8001b1c:	080023b0 	.word	0x080023b0

08001b20 <_vsiprintf_r>:
 8001b20:	b500      	push	{lr}
 8001b22:	b09b      	sub	sp, #108	; 0x6c
 8001b24:	9100      	str	r1, [sp, #0]
 8001b26:	9104      	str	r1, [sp, #16]
 8001b28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001b2c:	9105      	str	r1, [sp, #20]
 8001b2e:	9102      	str	r1, [sp, #8]
 8001b30:	4905      	ldr	r1, [pc, #20]	; (8001b48 <_vsiprintf_r+0x28>)
 8001b32:	9103      	str	r1, [sp, #12]
 8001b34:	4669      	mov	r1, sp
 8001b36:	f000 f86d 	bl	8001c14 <_svfiprintf_r>
 8001b3a:	9b00      	ldr	r3, [sp, #0]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	701a      	strb	r2, [r3, #0]
 8001b40:	b01b      	add	sp, #108	; 0x6c
 8001b42:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b46:	bf00      	nop
 8001b48:	ffff0208 	.word	0xffff0208

08001b4c <vsiprintf>:
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	460a      	mov	r2, r1
 8001b50:	4601      	mov	r1, r0
 8001b52:	4802      	ldr	r0, [pc, #8]	; (8001b5c <vsiprintf+0x10>)
 8001b54:	6800      	ldr	r0, [r0, #0]
 8001b56:	f7ff bfe3 	b.w	8001b20 <_vsiprintf_r>
 8001b5a:	bf00      	nop
 8001b5c:	20000024 	.word	0x20000024

08001b60 <__ssputs_r>:
 8001b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b64:	688e      	ldr	r6, [r1, #8]
 8001b66:	429e      	cmp	r6, r3
 8001b68:	4682      	mov	sl, r0
 8001b6a:	460c      	mov	r4, r1
 8001b6c:	4690      	mov	r8, r2
 8001b6e:	4699      	mov	r9, r3
 8001b70:	d837      	bhi.n	8001be2 <__ssputs_r+0x82>
 8001b72:	898a      	ldrh	r2, [r1, #12]
 8001b74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001b78:	d031      	beq.n	8001bde <__ssputs_r+0x7e>
 8001b7a:	6825      	ldr	r5, [r4, #0]
 8001b7c:	6909      	ldr	r1, [r1, #16]
 8001b7e:	1a6f      	subs	r7, r5, r1
 8001b80:	6965      	ldr	r5, [r4, #20]
 8001b82:	2302      	movs	r3, #2
 8001b84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001b88:	fb95 f5f3 	sdiv	r5, r5, r3
 8001b8c:	f109 0301 	add.w	r3, r9, #1
 8001b90:	443b      	add	r3, r7
 8001b92:	429d      	cmp	r5, r3
 8001b94:	bf38      	it	cc
 8001b96:	461d      	movcc	r5, r3
 8001b98:	0553      	lsls	r3, r2, #21
 8001b9a:	d530      	bpl.n	8001bfe <__ssputs_r+0x9e>
 8001b9c:	4629      	mov	r1, r5
 8001b9e:	f000 fb2b 	bl	80021f8 <_malloc_r>
 8001ba2:	4606      	mov	r6, r0
 8001ba4:	b950      	cbnz	r0, 8001bbc <__ssputs_r+0x5c>
 8001ba6:	230c      	movs	r3, #12
 8001ba8:	f8ca 3000 	str.w	r3, [sl]
 8001bac:	89a3      	ldrh	r3, [r4, #12]
 8001bae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bb2:	81a3      	strh	r3, [r4, #12]
 8001bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bbc:	463a      	mov	r2, r7
 8001bbe:	6921      	ldr	r1, [r4, #16]
 8001bc0:	f000 faa8 	bl	8002114 <memcpy>
 8001bc4:	89a3      	ldrh	r3, [r4, #12]
 8001bc6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001bca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bce:	81a3      	strh	r3, [r4, #12]
 8001bd0:	6126      	str	r6, [r4, #16]
 8001bd2:	6165      	str	r5, [r4, #20]
 8001bd4:	443e      	add	r6, r7
 8001bd6:	1bed      	subs	r5, r5, r7
 8001bd8:	6026      	str	r6, [r4, #0]
 8001bda:	60a5      	str	r5, [r4, #8]
 8001bdc:	464e      	mov	r6, r9
 8001bde:	454e      	cmp	r6, r9
 8001be0:	d900      	bls.n	8001be4 <__ssputs_r+0x84>
 8001be2:	464e      	mov	r6, r9
 8001be4:	4632      	mov	r2, r6
 8001be6:	4641      	mov	r1, r8
 8001be8:	6820      	ldr	r0, [r4, #0]
 8001bea:	f000 fa9e 	bl	800212a <memmove>
 8001bee:	68a3      	ldr	r3, [r4, #8]
 8001bf0:	1b9b      	subs	r3, r3, r6
 8001bf2:	60a3      	str	r3, [r4, #8]
 8001bf4:	6823      	ldr	r3, [r4, #0]
 8001bf6:	441e      	add	r6, r3
 8001bf8:	6026      	str	r6, [r4, #0]
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	e7dc      	b.n	8001bb8 <__ssputs_r+0x58>
 8001bfe:	462a      	mov	r2, r5
 8001c00:	f000 fb54 	bl	80022ac <_realloc_r>
 8001c04:	4606      	mov	r6, r0
 8001c06:	2800      	cmp	r0, #0
 8001c08:	d1e2      	bne.n	8001bd0 <__ssputs_r+0x70>
 8001c0a:	6921      	ldr	r1, [r4, #16]
 8001c0c:	4650      	mov	r0, sl
 8001c0e:	f000 faa5 	bl	800215c <_free_r>
 8001c12:	e7c8      	b.n	8001ba6 <__ssputs_r+0x46>

08001c14 <_svfiprintf_r>:
 8001c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c18:	461d      	mov	r5, r3
 8001c1a:	898b      	ldrh	r3, [r1, #12]
 8001c1c:	061f      	lsls	r7, r3, #24
 8001c1e:	b09d      	sub	sp, #116	; 0x74
 8001c20:	4680      	mov	r8, r0
 8001c22:	460c      	mov	r4, r1
 8001c24:	4616      	mov	r6, r2
 8001c26:	d50f      	bpl.n	8001c48 <_svfiprintf_r+0x34>
 8001c28:	690b      	ldr	r3, [r1, #16]
 8001c2a:	b96b      	cbnz	r3, 8001c48 <_svfiprintf_r+0x34>
 8001c2c:	2140      	movs	r1, #64	; 0x40
 8001c2e:	f000 fae3 	bl	80021f8 <_malloc_r>
 8001c32:	6020      	str	r0, [r4, #0]
 8001c34:	6120      	str	r0, [r4, #16]
 8001c36:	b928      	cbnz	r0, 8001c44 <_svfiprintf_r+0x30>
 8001c38:	230c      	movs	r3, #12
 8001c3a:	f8c8 3000 	str.w	r3, [r8]
 8001c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8001c42:	e0c8      	b.n	8001dd6 <_svfiprintf_r+0x1c2>
 8001c44:	2340      	movs	r3, #64	; 0x40
 8001c46:	6163      	str	r3, [r4, #20]
 8001c48:	2300      	movs	r3, #0
 8001c4a:	9309      	str	r3, [sp, #36]	; 0x24
 8001c4c:	2320      	movs	r3, #32
 8001c4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001c52:	2330      	movs	r3, #48	; 0x30
 8001c54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001c58:	9503      	str	r5, [sp, #12]
 8001c5a:	f04f 0b01 	mov.w	fp, #1
 8001c5e:	4637      	mov	r7, r6
 8001c60:	463d      	mov	r5, r7
 8001c62:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001c66:	b10b      	cbz	r3, 8001c6c <_svfiprintf_r+0x58>
 8001c68:	2b25      	cmp	r3, #37	; 0x25
 8001c6a:	d13e      	bne.n	8001cea <_svfiprintf_r+0xd6>
 8001c6c:	ebb7 0a06 	subs.w	sl, r7, r6
 8001c70:	d00b      	beq.n	8001c8a <_svfiprintf_r+0x76>
 8001c72:	4653      	mov	r3, sl
 8001c74:	4632      	mov	r2, r6
 8001c76:	4621      	mov	r1, r4
 8001c78:	4640      	mov	r0, r8
 8001c7a:	f7ff ff71 	bl	8001b60 <__ssputs_r>
 8001c7e:	3001      	adds	r0, #1
 8001c80:	f000 80a4 	beq.w	8001dcc <_svfiprintf_r+0x1b8>
 8001c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001c86:	4453      	add	r3, sl
 8001c88:	9309      	str	r3, [sp, #36]	; 0x24
 8001c8a:	783b      	ldrb	r3, [r7, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f000 809d 	beq.w	8001dcc <_svfiprintf_r+0x1b8>
 8001c92:	2300      	movs	r3, #0
 8001c94:	f04f 32ff 	mov.w	r2, #4294967295
 8001c98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001c9c:	9304      	str	r3, [sp, #16]
 8001c9e:	9307      	str	r3, [sp, #28]
 8001ca0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001ca4:	931a      	str	r3, [sp, #104]	; 0x68
 8001ca6:	462f      	mov	r7, r5
 8001ca8:	2205      	movs	r2, #5
 8001caa:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001cae:	4850      	ldr	r0, [pc, #320]	; (8001df0 <_svfiprintf_r+0x1dc>)
 8001cb0:	f7fe face 	bl	8000250 <memchr>
 8001cb4:	9b04      	ldr	r3, [sp, #16]
 8001cb6:	b9d0      	cbnz	r0, 8001cee <_svfiprintf_r+0xda>
 8001cb8:	06d9      	lsls	r1, r3, #27
 8001cba:	bf44      	itt	mi
 8001cbc:	2220      	movmi	r2, #32
 8001cbe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001cc2:	071a      	lsls	r2, r3, #28
 8001cc4:	bf44      	itt	mi
 8001cc6:	222b      	movmi	r2, #43	; 0x2b
 8001cc8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001ccc:	782a      	ldrb	r2, [r5, #0]
 8001cce:	2a2a      	cmp	r2, #42	; 0x2a
 8001cd0:	d015      	beq.n	8001cfe <_svfiprintf_r+0xea>
 8001cd2:	9a07      	ldr	r2, [sp, #28]
 8001cd4:	462f      	mov	r7, r5
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	250a      	movs	r5, #10
 8001cda:	4639      	mov	r1, r7
 8001cdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001ce0:	3b30      	subs	r3, #48	; 0x30
 8001ce2:	2b09      	cmp	r3, #9
 8001ce4:	d94d      	bls.n	8001d82 <_svfiprintf_r+0x16e>
 8001ce6:	b1b8      	cbz	r0, 8001d18 <_svfiprintf_r+0x104>
 8001ce8:	e00f      	b.n	8001d0a <_svfiprintf_r+0xf6>
 8001cea:	462f      	mov	r7, r5
 8001cec:	e7b8      	b.n	8001c60 <_svfiprintf_r+0x4c>
 8001cee:	4a40      	ldr	r2, [pc, #256]	; (8001df0 <_svfiprintf_r+0x1dc>)
 8001cf0:	1a80      	subs	r0, r0, r2
 8001cf2:	fa0b f000 	lsl.w	r0, fp, r0
 8001cf6:	4318      	orrs	r0, r3
 8001cf8:	9004      	str	r0, [sp, #16]
 8001cfa:	463d      	mov	r5, r7
 8001cfc:	e7d3      	b.n	8001ca6 <_svfiprintf_r+0x92>
 8001cfe:	9a03      	ldr	r2, [sp, #12]
 8001d00:	1d11      	adds	r1, r2, #4
 8001d02:	6812      	ldr	r2, [r2, #0]
 8001d04:	9103      	str	r1, [sp, #12]
 8001d06:	2a00      	cmp	r2, #0
 8001d08:	db01      	blt.n	8001d0e <_svfiprintf_r+0xfa>
 8001d0a:	9207      	str	r2, [sp, #28]
 8001d0c:	e004      	b.n	8001d18 <_svfiprintf_r+0x104>
 8001d0e:	4252      	negs	r2, r2
 8001d10:	f043 0302 	orr.w	r3, r3, #2
 8001d14:	9207      	str	r2, [sp, #28]
 8001d16:	9304      	str	r3, [sp, #16]
 8001d18:	783b      	ldrb	r3, [r7, #0]
 8001d1a:	2b2e      	cmp	r3, #46	; 0x2e
 8001d1c:	d10c      	bne.n	8001d38 <_svfiprintf_r+0x124>
 8001d1e:	787b      	ldrb	r3, [r7, #1]
 8001d20:	2b2a      	cmp	r3, #42	; 0x2a
 8001d22:	d133      	bne.n	8001d8c <_svfiprintf_r+0x178>
 8001d24:	9b03      	ldr	r3, [sp, #12]
 8001d26:	1d1a      	adds	r2, r3, #4
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	9203      	str	r2, [sp, #12]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	bfb8      	it	lt
 8001d30:	f04f 33ff 	movlt.w	r3, #4294967295
 8001d34:	3702      	adds	r7, #2
 8001d36:	9305      	str	r3, [sp, #20]
 8001d38:	4d2e      	ldr	r5, [pc, #184]	; (8001df4 <_svfiprintf_r+0x1e0>)
 8001d3a:	7839      	ldrb	r1, [r7, #0]
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	4628      	mov	r0, r5
 8001d40:	f7fe fa86 	bl	8000250 <memchr>
 8001d44:	b138      	cbz	r0, 8001d56 <_svfiprintf_r+0x142>
 8001d46:	2340      	movs	r3, #64	; 0x40
 8001d48:	1b40      	subs	r0, r0, r5
 8001d4a:	fa03 f000 	lsl.w	r0, r3, r0
 8001d4e:	9b04      	ldr	r3, [sp, #16]
 8001d50:	4303      	orrs	r3, r0
 8001d52:	3701      	adds	r7, #1
 8001d54:	9304      	str	r3, [sp, #16]
 8001d56:	7839      	ldrb	r1, [r7, #0]
 8001d58:	4827      	ldr	r0, [pc, #156]	; (8001df8 <_svfiprintf_r+0x1e4>)
 8001d5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001d5e:	2206      	movs	r2, #6
 8001d60:	1c7e      	adds	r6, r7, #1
 8001d62:	f7fe fa75 	bl	8000250 <memchr>
 8001d66:	2800      	cmp	r0, #0
 8001d68:	d038      	beq.n	8001ddc <_svfiprintf_r+0x1c8>
 8001d6a:	4b24      	ldr	r3, [pc, #144]	; (8001dfc <_svfiprintf_r+0x1e8>)
 8001d6c:	bb13      	cbnz	r3, 8001db4 <_svfiprintf_r+0x1a0>
 8001d6e:	9b03      	ldr	r3, [sp, #12]
 8001d70:	3307      	adds	r3, #7
 8001d72:	f023 0307 	bic.w	r3, r3, #7
 8001d76:	3308      	adds	r3, #8
 8001d78:	9303      	str	r3, [sp, #12]
 8001d7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d7c:	444b      	add	r3, r9
 8001d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8001d80:	e76d      	b.n	8001c5e <_svfiprintf_r+0x4a>
 8001d82:	fb05 3202 	mla	r2, r5, r2, r3
 8001d86:	2001      	movs	r0, #1
 8001d88:	460f      	mov	r7, r1
 8001d8a:	e7a6      	b.n	8001cda <_svfiprintf_r+0xc6>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	3701      	adds	r7, #1
 8001d90:	9305      	str	r3, [sp, #20]
 8001d92:	4619      	mov	r1, r3
 8001d94:	250a      	movs	r5, #10
 8001d96:	4638      	mov	r0, r7
 8001d98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001d9c:	3a30      	subs	r2, #48	; 0x30
 8001d9e:	2a09      	cmp	r2, #9
 8001da0:	d903      	bls.n	8001daa <_svfiprintf_r+0x196>
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0c8      	beq.n	8001d38 <_svfiprintf_r+0x124>
 8001da6:	9105      	str	r1, [sp, #20]
 8001da8:	e7c6      	b.n	8001d38 <_svfiprintf_r+0x124>
 8001daa:	fb05 2101 	mla	r1, r5, r1, r2
 8001dae:	2301      	movs	r3, #1
 8001db0:	4607      	mov	r7, r0
 8001db2:	e7f0      	b.n	8001d96 <_svfiprintf_r+0x182>
 8001db4:	ab03      	add	r3, sp, #12
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	4622      	mov	r2, r4
 8001dba:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <_svfiprintf_r+0x1ec>)
 8001dbc:	a904      	add	r1, sp, #16
 8001dbe:	4640      	mov	r0, r8
 8001dc0:	f3af 8000 	nop.w
 8001dc4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001dc8:	4681      	mov	r9, r0
 8001dca:	d1d6      	bne.n	8001d7a <_svfiprintf_r+0x166>
 8001dcc:	89a3      	ldrh	r3, [r4, #12]
 8001dce:	065b      	lsls	r3, r3, #25
 8001dd0:	f53f af35 	bmi.w	8001c3e <_svfiprintf_r+0x2a>
 8001dd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001dd6:	b01d      	add	sp, #116	; 0x74
 8001dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ddc:	ab03      	add	r3, sp, #12
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	4622      	mov	r2, r4
 8001de2:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <_svfiprintf_r+0x1ec>)
 8001de4:	a904      	add	r1, sp, #16
 8001de6:	4640      	mov	r0, r8
 8001de8:	f000 f882 	bl	8001ef0 <_printf_i>
 8001dec:	e7ea      	b.n	8001dc4 <_svfiprintf_r+0x1b0>
 8001dee:	bf00      	nop
 8001df0:	08002370 	.word	0x08002370
 8001df4:	08002376 	.word	0x08002376
 8001df8:	0800237a 	.word	0x0800237a
 8001dfc:	00000000 	.word	0x00000000
 8001e00:	08001b61 	.word	0x08001b61

08001e04 <_printf_common>:
 8001e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e08:	4691      	mov	r9, r2
 8001e0a:	461f      	mov	r7, r3
 8001e0c:	688a      	ldr	r2, [r1, #8]
 8001e0e:	690b      	ldr	r3, [r1, #16]
 8001e10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001e14:	4293      	cmp	r3, r2
 8001e16:	bfb8      	it	lt
 8001e18:	4613      	movlt	r3, r2
 8001e1a:	f8c9 3000 	str.w	r3, [r9]
 8001e1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001e22:	4606      	mov	r6, r0
 8001e24:	460c      	mov	r4, r1
 8001e26:	b112      	cbz	r2, 8001e2e <_printf_common+0x2a>
 8001e28:	3301      	adds	r3, #1
 8001e2a:	f8c9 3000 	str.w	r3, [r9]
 8001e2e:	6823      	ldr	r3, [r4, #0]
 8001e30:	0699      	lsls	r1, r3, #26
 8001e32:	bf42      	ittt	mi
 8001e34:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001e38:	3302      	addmi	r3, #2
 8001e3a:	f8c9 3000 	strmi.w	r3, [r9]
 8001e3e:	6825      	ldr	r5, [r4, #0]
 8001e40:	f015 0506 	ands.w	r5, r5, #6
 8001e44:	d107      	bne.n	8001e56 <_printf_common+0x52>
 8001e46:	f104 0a19 	add.w	sl, r4, #25
 8001e4a:	68e3      	ldr	r3, [r4, #12]
 8001e4c:	f8d9 2000 	ldr.w	r2, [r9]
 8001e50:	1a9b      	subs	r3, r3, r2
 8001e52:	42ab      	cmp	r3, r5
 8001e54:	dc28      	bgt.n	8001ea8 <_printf_common+0xa4>
 8001e56:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001e5a:	6822      	ldr	r2, [r4, #0]
 8001e5c:	3300      	adds	r3, #0
 8001e5e:	bf18      	it	ne
 8001e60:	2301      	movne	r3, #1
 8001e62:	0692      	lsls	r2, r2, #26
 8001e64:	d42d      	bmi.n	8001ec2 <_printf_common+0xbe>
 8001e66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001e6a:	4639      	mov	r1, r7
 8001e6c:	4630      	mov	r0, r6
 8001e6e:	47c0      	blx	r8
 8001e70:	3001      	adds	r0, #1
 8001e72:	d020      	beq.n	8001eb6 <_printf_common+0xb2>
 8001e74:	6823      	ldr	r3, [r4, #0]
 8001e76:	68e5      	ldr	r5, [r4, #12]
 8001e78:	f8d9 2000 	ldr.w	r2, [r9]
 8001e7c:	f003 0306 	and.w	r3, r3, #6
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	bf08      	it	eq
 8001e84:	1aad      	subeq	r5, r5, r2
 8001e86:	68a3      	ldr	r3, [r4, #8]
 8001e88:	6922      	ldr	r2, [r4, #16]
 8001e8a:	bf0c      	ite	eq
 8001e8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001e90:	2500      	movne	r5, #0
 8001e92:	4293      	cmp	r3, r2
 8001e94:	bfc4      	itt	gt
 8001e96:	1a9b      	subgt	r3, r3, r2
 8001e98:	18ed      	addgt	r5, r5, r3
 8001e9a:	f04f 0900 	mov.w	r9, #0
 8001e9e:	341a      	adds	r4, #26
 8001ea0:	454d      	cmp	r5, r9
 8001ea2:	d11a      	bne.n	8001eda <_printf_common+0xd6>
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	e008      	b.n	8001eba <_printf_common+0xb6>
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	4652      	mov	r2, sl
 8001eac:	4639      	mov	r1, r7
 8001eae:	4630      	mov	r0, r6
 8001eb0:	47c0      	blx	r8
 8001eb2:	3001      	adds	r0, #1
 8001eb4:	d103      	bne.n	8001ebe <_printf_common+0xba>
 8001eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8001eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ebe:	3501      	adds	r5, #1
 8001ec0:	e7c3      	b.n	8001e4a <_printf_common+0x46>
 8001ec2:	18e1      	adds	r1, r4, r3
 8001ec4:	1c5a      	adds	r2, r3, #1
 8001ec6:	2030      	movs	r0, #48	; 0x30
 8001ec8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001ecc:	4422      	add	r2, r4
 8001ece:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001ed2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001ed6:	3302      	adds	r3, #2
 8001ed8:	e7c5      	b.n	8001e66 <_printf_common+0x62>
 8001eda:	2301      	movs	r3, #1
 8001edc:	4622      	mov	r2, r4
 8001ede:	4639      	mov	r1, r7
 8001ee0:	4630      	mov	r0, r6
 8001ee2:	47c0      	blx	r8
 8001ee4:	3001      	adds	r0, #1
 8001ee6:	d0e6      	beq.n	8001eb6 <_printf_common+0xb2>
 8001ee8:	f109 0901 	add.w	r9, r9, #1
 8001eec:	e7d8      	b.n	8001ea0 <_printf_common+0x9c>
	...

08001ef0 <_printf_i>:
 8001ef0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ef4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001ef8:	460c      	mov	r4, r1
 8001efa:	7e09      	ldrb	r1, [r1, #24]
 8001efc:	b085      	sub	sp, #20
 8001efe:	296e      	cmp	r1, #110	; 0x6e
 8001f00:	4617      	mov	r7, r2
 8001f02:	4606      	mov	r6, r0
 8001f04:	4698      	mov	r8, r3
 8001f06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001f08:	f000 80b3 	beq.w	8002072 <_printf_i+0x182>
 8001f0c:	d822      	bhi.n	8001f54 <_printf_i+0x64>
 8001f0e:	2963      	cmp	r1, #99	; 0x63
 8001f10:	d036      	beq.n	8001f80 <_printf_i+0x90>
 8001f12:	d80a      	bhi.n	8001f2a <_printf_i+0x3a>
 8001f14:	2900      	cmp	r1, #0
 8001f16:	f000 80b9 	beq.w	800208c <_printf_i+0x19c>
 8001f1a:	2958      	cmp	r1, #88	; 0x58
 8001f1c:	f000 8083 	beq.w	8002026 <_printf_i+0x136>
 8001f20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001f24:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001f28:	e032      	b.n	8001f90 <_printf_i+0xa0>
 8001f2a:	2964      	cmp	r1, #100	; 0x64
 8001f2c:	d001      	beq.n	8001f32 <_printf_i+0x42>
 8001f2e:	2969      	cmp	r1, #105	; 0x69
 8001f30:	d1f6      	bne.n	8001f20 <_printf_i+0x30>
 8001f32:	6820      	ldr	r0, [r4, #0]
 8001f34:	6813      	ldr	r3, [r2, #0]
 8001f36:	0605      	lsls	r5, r0, #24
 8001f38:	f103 0104 	add.w	r1, r3, #4
 8001f3c:	d52a      	bpl.n	8001f94 <_printf_i+0xa4>
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6011      	str	r1, [r2, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	da03      	bge.n	8001f4e <_printf_i+0x5e>
 8001f46:	222d      	movs	r2, #45	; 0x2d
 8001f48:	425b      	negs	r3, r3
 8001f4a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001f4e:	486f      	ldr	r0, [pc, #444]	; (800210c <_printf_i+0x21c>)
 8001f50:	220a      	movs	r2, #10
 8001f52:	e039      	b.n	8001fc8 <_printf_i+0xd8>
 8001f54:	2973      	cmp	r1, #115	; 0x73
 8001f56:	f000 809d 	beq.w	8002094 <_printf_i+0x1a4>
 8001f5a:	d808      	bhi.n	8001f6e <_printf_i+0x7e>
 8001f5c:	296f      	cmp	r1, #111	; 0x6f
 8001f5e:	d020      	beq.n	8001fa2 <_printf_i+0xb2>
 8001f60:	2970      	cmp	r1, #112	; 0x70
 8001f62:	d1dd      	bne.n	8001f20 <_printf_i+0x30>
 8001f64:	6823      	ldr	r3, [r4, #0]
 8001f66:	f043 0320 	orr.w	r3, r3, #32
 8001f6a:	6023      	str	r3, [r4, #0]
 8001f6c:	e003      	b.n	8001f76 <_printf_i+0x86>
 8001f6e:	2975      	cmp	r1, #117	; 0x75
 8001f70:	d017      	beq.n	8001fa2 <_printf_i+0xb2>
 8001f72:	2978      	cmp	r1, #120	; 0x78
 8001f74:	d1d4      	bne.n	8001f20 <_printf_i+0x30>
 8001f76:	2378      	movs	r3, #120	; 0x78
 8001f78:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001f7c:	4864      	ldr	r0, [pc, #400]	; (8002110 <_printf_i+0x220>)
 8001f7e:	e055      	b.n	800202c <_printf_i+0x13c>
 8001f80:	6813      	ldr	r3, [r2, #0]
 8001f82:	1d19      	adds	r1, r3, #4
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6011      	str	r1, [r2, #0]
 8001f88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001f8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001f90:	2301      	movs	r3, #1
 8001f92:	e08c      	b.n	80020ae <_printf_i+0x1be>
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6011      	str	r1, [r2, #0]
 8001f98:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001f9c:	bf18      	it	ne
 8001f9e:	b21b      	sxthne	r3, r3
 8001fa0:	e7cf      	b.n	8001f42 <_printf_i+0x52>
 8001fa2:	6813      	ldr	r3, [r2, #0]
 8001fa4:	6825      	ldr	r5, [r4, #0]
 8001fa6:	1d18      	adds	r0, r3, #4
 8001fa8:	6010      	str	r0, [r2, #0]
 8001faa:	0628      	lsls	r0, r5, #24
 8001fac:	d501      	bpl.n	8001fb2 <_printf_i+0xc2>
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	e002      	b.n	8001fb8 <_printf_i+0xc8>
 8001fb2:	0668      	lsls	r0, r5, #25
 8001fb4:	d5fb      	bpl.n	8001fae <_printf_i+0xbe>
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	4854      	ldr	r0, [pc, #336]	; (800210c <_printf_i+0x21c>)
 8001fba:	296f      	cmp	r1, #111	; 0x6f
 8001fbc:	bf14      	ite	ne
 8001fbe:	220a      	movne	r2, #10
 8001fc0:	2208      	moveq	r2, #8
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001fc8:	6865      	ldr	r5, [r4, #4]
 8001fca:	60a5      	str	r5, [r4, #8]
 8001fcc:	2d00      	cmp	r5, #0
 8001fce:	f2c0 8095 	blt.w	80020fc <_printf_i+0x20c>
 8001fd2:	6821      	ldr	r1, [r4, #0]
 8001fd4:	f021 0104 	bic.w	r1, r1, #4
 8001fd8:	6021      	str	r1, [r4, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d13d      	bne.n	800205a <_printf_i+0x16a>
 8001fde:	2d00      	cmp	r5, #0
 8001fe0:	f040 808e 	bne.w	8002100 <_printf_i+0x210>
 8001fe4:	4665      	mov	r5, ip
 8001fe6:	2a08      	cmp	r2, #8
 8001fe8:	d10b      	bne.n	8002002 <_printf_i+0x112>
 8001fea:	6823      	ldr	r3, [r4, #0]
 8001fec:	07db      	lsls	r3, r3, #31
 8001fee:	d508      	bpl.n	8002002 <_printf_i+0x112>
 8001ff0:	6923      	ldr	r3, [r4, #16]
 8001ff2:	6862      	ldr	r2, [r4, #4]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	bfde      	ittt	le
 8001ff8:	2330      	movle	r3, #48	; 0x30
 8001ffa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001ffe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002002:	ebac 0305 	sub.w	r3, ip, r5
 8002006:	6123      	str	r3, [r4, #16]
 8002008:	f8cd 8000 	str.w	r8, [sp]
 800200c:	463b      	mov	r3, r7
 800200e:	aa03      	add	r2, sp, #12
 8002010:	4621      	mov	r1, r4
 8002012:	4630      	mov	r0, r6
 8002014:	f7ff fef6 	bl	8001e04 <_printf_common>
 8002018:	3001      	adds	r0, #1
 800201a:	d14d      	bne.n	80020b8 <_printf_i+0x1c8>
 800201c:	f04f 30ff 	mov.w	r0, #4294967295
 8002020:	b005      	add	sp, #20
 8002022:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002026:	4839      	ldr	r0, [pc, #228]	; (800210c <_printf_i+0x21c>)
 8002028:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800202c:	6813      	ldr	r3, [r2, #0]
 800202e:	6821      	ldr	r1, [r4, #0]
 8002030:	1d1d      	adds	r5, r3, #4
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6015      	str	r5, [r2, #0]
 8002036:	060a      	lsls	r2, r1, #24
 8002038:	d50b      	bpl.n	8002052 <_printf_i+0x162>
 800203a:	07ca      	lsls	r2, r1, #31
 800203c:	bf44      	itt	mi
 800203e:	f041 0120 	orrmi.w	r1, r1, #32
 8002042:	6021      	strmi	r1, [r4, #0]
 8002044:	b91b      	cbnz	r3, 800204e <_printf_i+0x15e>
 8002046:	6822      	ldr	r2, [r4, #0]
 8002048:	f022 0220 	bic.w	r2, r2, #32
 800204c:	6022      	str	r2, [r4, #0]
 800204e:	2210      	movs	r2, #16
 8002050:	e7b7      	b.n	8001fc2 <_printf_i+0xd2>
 8002052:	064d      	lsls	r5, r1, #25
 8002054:	bf48      	it	mi
 8002056:	b29b      	uxthmi	r3, r3
 8002058:	e7ef      	b.n	800203a <_printf_i+0x14a>
 800205a:	4665      	mov	r5, ip
 800205c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002060:	fb02 3311 	mls	r3, r2, r1, r3
 8002064:	5cc3      	ldrb	r3, [r0, r3]
 8002066:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800206a:	460b      	mov	r3, r1
 800206c:	2900      	cmp	r1, #0
 800206e:	d1f5      	bne.n	800205c <_printf_i+0x16c>
 8002070:	e7b9      	b.n	8001fe6 <_printf_i+0xf6>
 8002072:	6813      	ldr	r3, [r2, #0]
 8002074:	6825      	ldr	r5, [r4, #0]
 8002076:	6961      	ldr	r1, [r4, #20]
 8002078:	1d18      	adds	r0, r3, #4
 800207a:	6010      	str	r0, [r2, #0]
 800207c:	0628      	lsls	r0, r5, #24
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	d501      	bpl.n	8002086 <_printf_i+0x196>
 8002082:	6019      	str	r1, [r3, #0]
 8002084:	e002      	b.n	800208c <_printf_i+0x19c>
 8002086:	066a      	lsls	r2, r5, #25
 8002088:	d5fb      	bpl.n	8002082 <_printf_i+0x192>
 800208a:	8019      	strh	r1, [r3, #0]
 800208c:	2300      	movs	r3, #0
 800208e:	6123      	str	r3, [r4, #16]
 8002090:	4665      	mov	r5, ip
 8002092:	e7b9      	b.n	8002008 <_printf_i+0x118>
 8002094:	6813      	ldr	r3, [r2, #0]
 8002096:	1d19      	adds	r1, r3, #4
 8002098:	6011      	str	r1, [r2, #0]
 800209a:	681d      	ldr	r5, [r3, #0]
 800209c:	6862      	ldr	r2, [r4, #4]
 800209e:	2100      	movs	r1, #0
 80020a0:	4628      	mov	r0, r5
 80020a2:	f7fe f8d5 	bl	8000250 <memchr>
 80020a6:	b108      	cbz	r0, 80020ac <_printf_i+0x1bc>
 80020a8:	1b40      	subs	r0, r0, r5
 80020aa:	6060      	str	r0, [r4, #4]
 80020ac:	6863      	ldr	r3, [r4, #4]
 80020ae:	6123      	str	r3, [r4, #16]
 80020b0:	2300      	movs	r3, #0
 80020b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80020b6:	e7a7      	b.n	8002008 <_printf_i+0x118>
 80020b8:	6923      	ldr	r3, [r4, #16]
 80020ba:	462a      	mov	r2, r5
 80020bc:	4639      	mov	r1, r7
 80020be:	4630      	mov	r0, r6
 80020c0:	47c0      	blx	r8
 80020c2:	3001      	adds	r0, #1
 80020c4:	d0aa      	beq.n	800201c <_printf_i+0x12c>
 80020c6:	6823      	ldr	r3, [r4, #0]
 80020c8:	079b      	lsls	r3, r3, #30
 80020ca:	d413      	bmi.n	80020f4 <_printf_i+0x204>
 80020cc:	68e0      	ldr	r0, [r4, #12]
 80020ce:	9b03      	ldr	r3, [sp, #12]
 80020d0:	4298      	cmp	r0, r3
 80020d2:	bfb8      	it	lt
 80020d4:	4618      	movlt	r0, r3
 80020d6:	e7a3      	b.n	8002020 <_printf_i+0x130>
 80020d8:	2301      	movs	r3, #1
 80020da:	464a      	mov	r2, r9
 80020dc:	4639      	mov	r1, r7
 80020de:	4630      	mov	r0, r6
 80020e0:	47c0      	blx	r8
 80020e2:	3001      	adds	r0, #1
 80020e4:	d09a      	beq.n	800201c <_printf_i+0x12c>
 80020e6:	3501      	adds	r5, #1
 80020e8:	68e3      	ldr	r3, [r4, #12]
 80020ea:	9a03      	ldr	r2, [sp, #12]
 80020ec:	1a9b      	subs	r3, r3, r2
 80020ee:	42ab      	cmp	r3, r5
 80020f0:	dcf2      	bgt.n	80020d8 <_printf_i+0x1e8>
 80020f2:	e7eb      	b.n	80020cc <_printf_i+0x1dc>
 80020f4:	2500      	movs	r5, #0
 80020f6:	f104 0919 	add.w	r9, r4, #25
 80020fa:	e7f5      	b.n	80020e8 <_printf_i+0x1f8>
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1ac      	bne.n	800205a <_printf_i+0x16a>
 8002100:	7803      	ldrb	r3, [r0, #0]
 8002102:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002106:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800210a:	e76c      	b.n	8001fe6 <_printf_i+0xf6>
 800210c:	08002381 	.word	0x08002381
 8002110:	08002392 	.word	0x08002392

08002114 <memcpy>:
 8002114:	b510      	push	{r4, lr}
 8002116:	1e43      	subs	r3, r0, #1
 8002118:	440a      	add	r2, r1
 800211a:	4291      	cmp	r1, r2
 800211c:	d100      	bne.n	8002120 <memcpy+0xc>
 800211e:	bd10      	pop	{r4, pc}
 8002120:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002124:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002128:	e7f7      	b.n	800211a <memcpy+0x6>

0800212a <memmove>:
 800212a:	4288      	cmp	r0, r1
 800212c:	b510      	push	{r4, lr}
 800212e:	eb01 0302 	add.w	r3, r1, r2
 8002132:	d807      	bhi.n	8002144 <memmove+0x1a>
 8002134:	1e42      	subs	r2, r0, #1
 8002136:	4299      	cmp	r1, r3
 8002138:	d00a      	beq.n	8002150 <memmove+0x26>
 800213a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800213e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002142:	e7f8      	b.n	8002136 <memmove+0xc>
 8002144:	4283      	cmp	r3, r0
 8002146:	d9f5      	bls.n	8002134 <memmove+0xa>
 8002148:	1881      	adds	r1, r0, r2
 800214a:	1ad2      	subs	r2, r2, r3
 800214c:	42d3      	cmn	r3, r2
 800214e:	d100      	bne.n	8002152 <memmove+0x28>
 8002150:	bd10      	pop	{r4, pc}
 8002152:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002156:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800215a:	e7f7      	b.n	800214c <memmove+0x22>

0800215c <_free_r>:
 800215c:	b538      	push	{r3, r4, r5, lr}
 800215e:	4605      	mov	r5, r0
 8002160:	2900      	cmp	r1, #0
 8002162:	d045      	beq.n	80021f0 <_free_r+0x94>
 8002164:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002168:	1f0c      	subs	r4, r1, #4
 800216a:	2b00      	cmp	r3, #0
 800216c:	bfb8      	it	lt
 800216e:	18e4      	addlt	r4, r4, r3
 8002170:	f000 f8d2 	bl	8002318 <__malloc_lock>
 8002174:	4a1f      	ldr	r2, [pc, #124]	; (80021f4 <_free_r+0x98>)
 8002176:	6813      	ldr	r3, [r2, #0]
 8002178:	4610      	mov	r0, r2
 800217a:	b933      	cbnz	r3, 800218a <_free_r+0x2e>
 800217c:	6063      	str	r3, [r4, #4]
 800217e:	6014      	str	r4, [r2, #0]
 8002180:	4628      	mov	r0, r5
 8002182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002186:	f000 b8c8 	b.w	800231a <__malloc_unlock>
 800218a:	42a3      	cmp	r3, r4
 800218c:	d90c      	bls.n	80021a8 <_free_r+0x4c>
 800218e:	6821      	ldr	r1, [r4, #0]
 8002190:	1862      	adds	r2, r4, r1
 8002192:	4293      	cmp	r3, r2
 8002194:	bf04      	itt	eq
 8002196:	681a      	ldreq	r2, [r3, #0]
 8002198:	685b      	ldreq	r3, [r3, #4]
 800219a:	6063      	str	r3, [r4, #4]
 800219c:	bf04      	itt	eq
 800219e:	1852      	addeq	r2, r2, r1
 80021a0:	6022      	streq	r2, [r4, #0]
 80021a2:	6004      	str	r4, [r0, #0]
 80021a4:	e7ec      	b.n	8002180 <_free_r+0x24>
 80021a6:	4613      	mov	r3, r2
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	b10a      	cbz	r2, 80021b0 <_free_r+0x54>
 80021ac:	42a2      	cmp	r2, r4
 80021ae:	d9fa      	bls.n	80021a6 <_free_r+0x4a>
 80021b0:	6819      	ldr	r1, [r3, #0]
 80021b2:	1858      	adds	r0, r3, r1
 80021b4:	42a0      	cmp	r0, r4
 80021b6:	d10b      	bne.n	80021d0 <_free_r+0x74>
 80021b8:	6820      	ldr	r0, [r4, #0]
 80021ba:	4401      	add	r1, r0
 80021bc:	1858      	adds	r0, r3, r1
 80021be:	4282      	cmp	r2, r0
 80021c0:	6019      	str	r1, [r3, #0]
 80021c2:	d1dd      	bne.n	8002180 <_free_r+0x24>
 80021c4:	6810      	ldr	r0, [r2, #0]
 80021c6:	6852      	ldr	r2, [r2, #4]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	4401      	add	r1, r0
 80021cc:	6019      	str	r1, [r3, #0]
 80021ce:	e7d7      	b.n	8002180 <_free_r+0x24>
 80021d0:	d902      	bls.n	80021d8 <_free_r+0x7c>
 80021d2:	230c      	movs	r3, #12
 80021d4:	602b      	str	r3, [r5, #0]
 80021d6:	e7d3      	b.n	8002180 <_free_r+0x24>
 80021d8:	6820      	ldr	r0, [r4, #0]
 80021da:	1821      	adds	r1, r4, r0
 80021dc:	428a      	cmp	r2, r1
 80021de:	bf04      	itt	eq
 80021e0:	6811      	ldreq	r1, [r2, #0]
 80021e2:	6852      	ldreq	r2, [r2, #4]
 80021e4:	6062      	str	r2, [r4, #4]
 80021e6:	bf04      	itt	eq
 80021e8:	1809      	addeq	r1, r1, r0
 80021ea:	6021      	streq	r1, [r4, #0]
 80021ec:	605c      	str	r4, [r3, #4]
 80021ee:	e7c7      	b.n	8002180 <_free_r+0x24>
 80021f0:	bd38      	pop	{r3, r4, r5, pc}
 80021f2:	bf00      	nop
 80021f4:	200000a8 	.word	0x200000a8

080021f8 <_malloc_r>:
 80021f8:	b570      	push	{r4, r5, r6, lr}
 80021fa:	1ccd      	adds	r5, r1, #3
 80021fc:	f025 0503 	bic.w	r5, r5, #3
 8002200:	3508      	adds	r5, #8
 8002202:	2d0c      	cmp	r5, #12
 8002204:	bf38      	it	cc
 8002206:	250c      	movcc	r5, #12
 8002208:	2d00      	cmp	r5, #0
 800220a:	4606      	mov	r6, r0
 800220c:	db01      	blt.n	8002212 <_malloc_r+0x1a>
 800220e:	42a9      	cmp	r1, r5
 8002210:	d903      	bls.n	800221a <_malloc_r+0x22>
 8002212:	230c      	movs	r3, #12
 8002214:	6033      	str	r3, [r6, #0]
 8002216:	2000      	movs	r0, #0
 8002218:	bd70      	pop	{r4, r5, r6, pc}
 800221a:	f000 f87d 	bl	8002318 <__malloc_lock>
 800221e:	4a21      	ldr	r2, [pc, #132]	; (80022a4 <_malloc_r+0xac>)
 8002220:	6814      	ldr	r4, [r2, #0]
 8002222:	4621      	mov	r1, r4
 8002224:	b991      	cbnz	r1, 800224c <_malloc_r+0x54>
 8002226:	4c20      	ldr	r4, [pc, #128]	; (80022a8 <_malloc_r+0xb0>)
 8002228:	6823      	ldr	r3, [r4, #0]
 800222a:	b91b      	cbnz	r3, 8002234 <_malloc_r+0x3c>
 800222c:	4630      	mov	r0, r6
 800222e:	f000 f863 	bl	80022f8 <_sbrk_r>
 8002232:	6020      	str	r0, [r4, #0]
 8002234:	4629      	mov	r1, r5
 8002236:	4630      	mov	r0, r6
 8002238:	f000 f85e 	bl	80022f8 <_sbrk_r>
 800223c:	1c43      	adds	r3, r0, #1
 800223e:	d124      	bne.n	800228a <_malloc_r+0x92>
 8002240:	230c      	movs	r3, #12
 8002242:	6033      	str	r3, [r6, #0]
 8002244:	4630      	mov	r0, r6
 8002246:	f000 f868 	bl	800231a <__malloc_unlock>
 800224a:	e7e4      	b.n	8002216 <_malloc_r+0x1e>
 800224c:	680b      	ldr	r3, [r1, #0]
 800224e:	1b5b      	subs	r3, r3, r5
 8002250:	d418      	bmi.n	8002284 <_malloc_r+0x8c>
 8002252:	2b0b      	cmp	r3, #11
 8002254:	d90f      	bls.n	8002276 <_malloc_r+0x7e>
 8002256:	600b      	str	r3, [r1, #0]
 8002258:	50cd      	str	r5, [r1, r3]
 800225a:	18cc      	adds	r4, r1, r3
 800225c:	4630      	mov	r0, r6
 800225e:	f000 f85c 	bl	800231a <__malloc_unlock>
 8002262:	f104 000b 	add.w	r0, r4, #11
 8002266:	1d23      	adds	r3, r4, #4
 8002268:	f020 0007 	bic.w	r0, r0, #7
 800226c:	1ac3      	subs	r3, r0, r3
 800226e:	d0d3      	beq.n	8002218 <_malloc_r+0x20>
 8002270:	425a      	negs	r2, r3
 8002272:	50e2      	str	r2, [r4, r3]
 8002274:	e7d0      	b.n	8002218 <_malloc_r+0x20>
 8002276:	428c      	cmp	r4, r1
 8002278:	684b      	ldr	r3, [r1, #4]
 800227a:	bf16      	itet	ne
 800227c:	6063      	strne	r3, [r4, #4]
 800227e:	6013      	streq	r3, [r2, #0]
 8002280:	460c      	movne	r4, r1
 8002282:	e7eb      	b.n	800225c <_malloc_r+0x64>
 8002284:	460c      	mov	r4, r1
 8002286:	6849      	ldr	r1, [r1, #4]
 8002288:	e7cc      	b.n	8002224 <_malloc_r+0x2c>
 800228a:	1cc4      	adds	r4, r0, #3
 800228c:	f024 0403 	bic.w	r4, r4, #3
 8002290:	42a0      	cmp	r0, r4
 8002292:	d005      	beq.n	80022a0 <_malloc_r+0xa8>
 8002294:	1a21      	subs	r1, r4, r0
 8002296:	4630      	mov	r0, r6
 8002298:	f000 f82e 	bl	80022f8 <_sbrk_r>
 800229c:	3001      	adds	r0, #1
 800229e:	d0cf      	beq.n	8002240 <_malloc_r+0x48>
 80022a0:	6025      	str	r5, [r4, #0]
 80022a2:	e7db      	b.n	800225c <_malloc_r+0x64>
 80022a4:	200000a8 	.word	0x200000a8
 80022a8:	200000ac 	.word	0x200000ac

080022ac <_realloc_r>:
 80022ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ae:	4607      	mov	r7, r0
 80022b0:	4614      	mov	r4, r2
 80022b2:	460e      	mov	r6, r1
 80022b4:	b921      	cbnz	r1, 80022c0 <_realloc_r+0x14>
 80022b6:	4611      	mov	r1, r2
 80022b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80022bc:	f7ff bf9c 	b.w	80021f8 <_malloc_r>
 80022c0:	b922      	cbnz	r2, 80022cc <_realloc_r+0x20>
 80022c2:	f7ff ff4b 	bl	800215c <_free_r>
 80022c6:	4625      	mov	r5, r4
 80022c8:	4628      	mov	r0, r5
 80022ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022cc:	f000 f826 	bl	800231c <_malloc_usable_size_r>
 80022d0:	42a0      	cmp	r0, r4
 80022d2:	d20f      	bcs.n	80022f4 <_realloc_r+0x48>
 80022d4:	4621      	mov	r1, r4
 80022d6:	4638      	mov	r0, r7
 80022d8:	f7ff ff8e 	bl	80021f8 <_malloc_r>
 80022dc:	4605      	mov	r5, r0
 80022de:	2800      	cmp	r0, #0
 80022e0:	d0f2      	beq.n	80022c8 <_realloc_r+0x1c>
 80022e2:	4631      	mov	r1, r6
 80022e4:	4622      	mov	r2, r4
 80022e6:	f7ff ff15 	bl	8002114 <memcpy>
 80022ea:	4631      	mov	r1, r6
 80022ec:	4638      	mov	r0, r7
 80022ee:	f7ff ff35 	bl	800215c <_free_r>
 80022f2:	e7e9      	b.n	80022c8 <_realloc_r+0x1c>
 80022f4:	4635      	mov	r5, r6
 80022f6:	e7e7      	b.n	80022c8 <_realloc_r+0x1c>

080022f8 <_sbrk_r>:
 80022f8:	b538      	push	{r3, r4, r5, lr}
 80022fa:	4c06      	ldr	r4, [pc, #24]	; (8002314 <_sbrk_r+0x1c>)
 80022fc:	2300      	movs	r3, #0
 80022fe:	4605      	mov	r5, r0
 8002300:	4608      	mov	r0, r1
 8002302:	6023      	str	r3, [r4, #0]
 8002304:	f7fe fa5c 	bl	80007c0 <_sbrk>
 8002308:	1c43      	adds	r3, r0, #1
 800230a:	d102      	bne.n	8002312 <_sbrk_r+0x1a>
 800230c:	6823      	ldr	r3, [r4, #0]
 800230e:	b103      	cbz	r3, 8002312 <_sbrk_r+0x1a>
 8002310:	602b      	str	r3, [r5, #0]
 8002312:	bd38      	pop	{r3, r4, r5, pc}
 8002314:	20000134 	.word	0x20000134

08002318 <__malloc_lock>:
 8002318:	4770      	bx	lr

0800231a <__malloc_unlock>:
 800231a:	4770      	bx	lr

0800231c <_malloc_usable_size_r>:
 800231c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002320:	1f18      	subs	r0, r3, #4
 8002322:	2b00      	cmp	r3, #0
 8002324:	bfbc      	itt	lt
 8002326:	580b      	ldrlt	r3, [r1, r0]
 8002328:	18c0      	addlt	r0, r0, r3
 800232a:	4770      	bx	lr

0800232c <_init>:
 800232c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800232e:	bf00      	nop
 8002330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002332:	bc08      	pop	{r3}
 8002334:	469e      	mov	lr, r3
 8002336:	4770      	bx	lr

08002338 <_fini>:
 8002338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800233a:	bf00      	nop
 800233c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800233e:	bc08      	pop	{r3}
 8002340:	469e      	mov	lr, r3
 8002342:	4770      	bx	lr
