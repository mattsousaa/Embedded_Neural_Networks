
4_multiple_in_multiple_out_nn.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039a0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  08003ba0  08003ba0  00013ba0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e50  08003e50  0002023c  2**0
                  CONTENTS
  4 .ARM          00000008  08003e50  08003e50  00013e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e58  08003e58  0002023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e58  08003e58  00013e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e5c  08003e5c  00013e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000023c  20000000  08003e60  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000240  0800409c  00020240  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  0800409c  00020308  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007919  00000000  00000000  0002026a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000013a0  00000000  00000000  00027b83  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000668  00000000  00000000  00028f28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005b0  00000000  00000000  00029590  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027f0f  00000000  00000000  00029b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006257  00000000  00000000  00051a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000faa06  00000000  00000000  00057ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001526ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020d8  00000000  00000000  00152728  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000240 	.word	0x20000240
 800021c:	00000000 	.word	0x00000000
 8000220:	08003b88 	.word	0x08003b88

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000244 	.word	0x20000244
 800023c:	08003b88 	.word	0x08003b88

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <printmsg>:
UART_HandleTypeDef huart3;

void SystemClock_Config(void);
void UART3_Init(void);

void printmsg(char *format, ...){
 80005f0:	b40f      	push	{r0, r1, r2, r3}
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b096      	sub	sp, #88	; 0x58
 80005f6:	af00      	add	r7, sp, #0

	char str[80];

	/*Extract the argument list using VA apis */
	va_list args;
	va_start(args, format);
 80005f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80005fc:	607b      	str	r3, [r7, #4]
	vsprintf(str, format, args);
 80005fe:	f107 0308 	add.w	r3, r7, #8
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000606:	4618      	mov	r0, r3
 8000608:	f001 ff60 	bl	80024cc <vsiprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 800060c:	f107 0308 	add.w	r3, r7, #8
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff fe15 	bl	8000240 <strlen>
 8000616:	4603      	mov	r3, r0
 8000618:	b29a      	uxth	r2, r3
 800061a:	f107 0108 	add.w	r1, r7, #8
 800061e:	f04f 33ff 	mov.w	r3, #4294967295
 8000622:	4805      	ldr	r0, [pc, #20]	; (8000638 <printmsg+0x48>)
 8000624:	f000 fe32 	bl	800128c <HAL_UART_Transmit>
	va_end(args);

}
 8000628:	bf00      	nop
 800062a:	3758      	adds	r7, #88	; 0x58
 800062c:	46bd      	mov	sp, r7
 800062e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000632:	b004      	add	sp, #16
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	20000268 	.word	0x20000268

0800063c <main>:

int main(void){
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b083      	sub	sp, #12
 8000640:	af02      	add	r7, sp, #8

	HAL_Init();
 8000642:	f000 f9b0 	bl	80009a6 <HAL_Init>
	SystemClock_Config();
 8000646:	f000 f82f 	bl	80006a8 <SystemClock_Config>
	UART3_Init();
 800064a:	f000 f835 	bl	80006b8 <UART3_Init>

	multiple_in_multiple_out_nn(input_vector, IN_LEN, predicted_output, OUT_LEN, weights);
 800064e:	4b10      	ldr	r3, [pc, #64]	; (8000690 <main+0x54>)
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	2303      	movs	r3, #3
 8000654:	4a0f      	ldr	r2, [pc, #60]	; (8000694 <main+0x58>)
 8000656:	2103      	movs	r1, #3
 8000658:	480f      	ldr	r0, [pc, #60]	; (8000698 <main+0x5c>)
 800065a:	f000 f8a6 	bl	80007aa <multiple_in_multiple_out_nn>

	printmsg("Sad prediction: %f\r\n", predicted_output[SAD_PREDICTION_IDX]);
 800065e:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <main+0x58>)
 8000660:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000664:	461a      	mov	r2, r3
 8000666:	4623      	mov	r3, r4
 8000668:	480c      	ldr	r0, [pc, #48]	; (800069c <main+0x60>)
 800066a:	f7ff ffc1 	bl	80005f0 <printmsg>
	printmsg("Sick prediction: %f\r\n", predicted_output[SICK_PREDCITION_IDX]);
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <main+0x58>)
 8000670:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8000674:	461a      	mov	r2, r3
 8000676:	4623      	mov	r3, r4
 8000678:	4809      	ldr	r0, [pc, #36]	; (80006a0 <main+0x64>)
 800067a:	f7ff ffb9 	bl	80005f0 <printmsg>
	printmsg("Active prediction: %f\r\n", predicted_output[ACTIVE_PREDICTION_IDX]);
 800067e:	4b05      	ldr	r3, [pc, #20]	; (8000694 <main+0x58>)
 8000680:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8000684:	461a      	mov	r2, r3
 8000686:	4623      	mov	r3, r4
 8000688:	4806      	ldr	r0, [pc, #24]	; (80006a4 <main+0x68>)
 800068a:	f7ff ffb1 	bl	80005f0 <printmsg>

	while(1);
 800068e:	e7fe      	b.n	800068e <main+0x52>
 8000690:	20000000 	.word	0x20000000
 8000694:	200002e8 	.word	0x200002e8
 8000698:	20000048 	.word	0x20000048
 800069c:	08003ba0 	.word	0x08003ba0
 80006a0:	08003bb8 	.word	0x08003bb8
 80006a4:	08003bd0 	.word	0x08003bd0

080006a8 <SystemClock_Config>:

}

void SystemClock_Config(void){
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0

}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
	...

080006b8 <UART3_Init>:

void UART3_Init(void){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0

	huart3.Instance = USART3;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <UART3_Init+0x44>)
 80006be:	4a10      	ldr	r2, [pc, #64]	; (8000700 <UART3_Init+0x48>)
 80006c0:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <UART3_Init+0x44>)
 80006c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c8:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <UART3_Init+0x44>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <UART3_Init+0x44>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <UART3_Init+0x44>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <UART3_Init+0x44>)
 80006de:	2200      	movs	r2, #0
 80006e0:	619a      	str	r2, [r3, #24]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <UART3_Init+0x44>)
 80006e4:	220c      	movs	r2, #12
 80006e6:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart3) != HAL_OK){
 80006e8:	4804      	ldr	r0, [pc, #16]	; (80006fc <UART3_Init+0x44>)
 80006ea:	f000 fd81 	bl	80011f0 <HAL_UART_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <UART3_Init+0x40>
		Error_Handler();
 80006f4:	f000 f806 	bl	8000704 <Error_Handler>
	}

}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000268 	.word	0x20000268
 8000700:	40004800 	.word	0x40004800

08000704 <Error_Handler>:

void Error_Handler(void){
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  while(1);
 8000708:	e7fe      	b.n	8000708 <Error_Handler+0x4>

0800070a <matrix_vector_multiplication>:

void single_in_multiple_out_nn(double input_scalar, double *weight_vector, double *out_vector, double vector_len){
	elementwise_multiply(input_scalar, weight_vector, out_vector, vector_len);
}

void matrix_vector_multiplication(double *input_vector, uint32_t input_len, double *output_vector, uint32_t output_len, double weights_matrix[output_len][input_len]){
 800070a:	b490      	push	{r4, r7}
 800070c:	b088      	sub	sp, #32
 800070e:	af00      	add	r7, sp, #0
 8000710:	60f8      	str	r0, [r7, #12]
 8000712:	60b9      	str	r1, [r7, #8]
 8000714:	607a      	str	r2, [r7, #4]
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	68b8      	ldr	r0, [r7, #8]
 800071a:	4603      	mov	r3, r0
 800071c:	3b01      	subs	r3, #1
 800071e:	617b      	str	r3, [r7, #20]
 8000720:	4601      	mov	r1, r0
 8000722:	f04f 0200 	mov.w	r2, #0
 8000726:	f04f 0300 	mov.w	r3, #0
 800072a:	f04f 0400 	mov.w	r4, #0
 800072e:	0194      	lsls	r4, r2, #6
 8000730:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000734:	018b      	lsls	r3, r1, #6
	for(int k = 0; k < output_len; k++){
 8000736:	2300      	movs	r3, #0
 8000738:	61bb      	str	r3, [r7, #24]
 800073a:	e02d      	b.n	8000798 <matrix_vector_multiplication+0x8e>
		for(int i = 0; i < input_len; i++){
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]
 8000740:	e023      	b.n	800078a <matrix_vector_multiplication+0x80>
			output_vector[k] += input_vector[i] * weights_matrix[k][i];
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	00db      	lsls	r3, r3, #3
 8000746:	68fa      	ldr	r2, [r7, #12]
 8000748:	4413      	add	r3, r2
 800074a:	ed93 6b00 	vldr	d6, [r3]
 800074e:	69bb      	ldr	r3, [r7, #24]
 8000750:	fb03 f300 	mul.w	r3, r3, r0
 8000754:	00db      	lsls	r3, r3, #3
 8000756:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000758:	441a      	add	r2, r3
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	00db      	lsls	r3, r3, #3
 800075e:	4413      	add	r3, r2
 8000760:	ed93 7b00 	vldr	d7, [r3]
 8000764:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000768:	69bb      	ldr	r3, [r7, #24]
 800076a:	00db      	lsls	r3, r3, #3
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	4413      	add	r3, r2
 8000770:	ed93 7b00 	vldr	d7, [r3]
 8000774:	69bb      	ldr	r3, [r7, #24]
 8000776:	00db      	lsls	r3, r3, #3
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	4413      	add	r3, r2
 800077c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000780:	ed83 7b00 	vstr	d7, [r3]
		for(int i = 0; i < input_len; i++){
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	3301      	adds	r3, #1
 8000788:	61fb      	str	r3, [r7, #28]
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	68ba      	ldr	r2, [r7, #8]
 800078e:	429a      	cmp	r2, r3
 8000790:	d8d7      	bhi.n	8000742 <matrix_vector_multiplication+0x38>
	for(int k = 0; k < output_len; k++){
 8000792:	69bb      	ldr	r3, [r7, #24]
 8000794:	3301      	adds	r3, #1
 8000796:	61bb      	str	r3, [r7, #24]
 8000798:	69bb      	ldr	r3, [r7, #24]
 800079a:	683a      	ldr	r2, [r7, #0]
 800079c:	429a      	cmp	r2, r3
 800079e:	d8cd      	bhi.n	800073c <matrix_vector_multiplication+0x32>
		}
	}
}
 80007a0:	bf00      	nop
 80007a2:	3720      	adds	r7, #32
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc90      	pop	{r4, r7}
 80007a8:	4770      	bx	lr

080007aa <multiple_in_multiple_out_nn>:

void multiple_in_multiple_out_nn(double *input_vector, uint32_t input_len, double *output_vector, uint32_t output_len, double weights_matrix[output_len][input_len]){
 80007aa:	b590      	push	{r4, r7, lr}
 80007ac:	b089      	sub	sp, #36	; 0x24
 80007ae:	af02      	add	r7, sp, #8
 80007b0:	60f8      	str	r0, [r7, #12]
 80007b2:	60b9      	str	r1, [r7, #8]
 80007b4:	607a      	str	r2, [r7, #4]
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	461a      	mov	r2, r3
 80007bc:	3a01      	subs	r2, #1
 80007be:	617a      	str	r2, [r7, #20]
 80007c0:	4619      	mov	r1, r3
 80007c2:	f04f 0200 	mov.w	r2, #0
 80007c6:	f04f 0300 	mov.w	r3, #0
 80007ca:	f04f 0400 	mov.w	r4, #0
 80007ce:	0194      	lsls	r4, r2, #6
 80007d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80007d4:	018b      	lsls	r3, r1, #6
	matrix_vector_multiplication(input_vector, input_len, output_vector, output_len, weights_matrix);
 80007d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007d8:	9300      	str	r3, [sp, #0]
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	68b9      	ldr	r1, [r7, #8]
 80007e0:	68f8      	ldr	r0, [r7, #12]
 80007e2:	f7ff ff92 	bl	800070a <matrix_vector_multiplication>
}
 80007e6:	bf00      	nop
 80007e8:	371c      	adds	r7, #28
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd90      	pop	{r4, r7, pc}
	...

080007f0 <HAL_MspInit>:
 *      Author: Mateus Sousa
 */

#include "main.h"

void HAL_MspInit(void){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	//__HAL_RCC_PWR_CLK_ENABLE();
	//__HAL_RCC_SYSCFG_CLK_ENABLE();

	//1. Set up the priority grouping of the arm cortex mx processor
	// This line is not required because priority grouping will be 4 by default
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007f4:	2003      	movs	r0, #3
 80007f6:	f000 fa03 	bl	8000c00 <HAL_NVIC_SetPriorityGrouping>
	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 80007fa:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <HAL_MspInit+0x40>)
 80007fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007fe:	4a0c      	ldr	r2, [pc, #48]	; (8000830 <HAL_MspInit+0x40>)
 8000800:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000804:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2100      	movs	r1, #0
 800080a:	f06f 000b 	mvn.w	r0, #11
 800080e:	f000 fa02 	bl	8000c16 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	2100      	movs	r1, #0
 8000816:	f06f 000a 	mvn.w	r0, #10
 800081a:	f000 f9fc 	bl	8000c16 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2100      	movs	r1, #0
 8000822:	f06f 0009 	mvn.w	r0, #9
 8000826:	f000 f9f6 	bl	8000c16 <HAL_NVIC_SetPriority>

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart){
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	; 0x28
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef gpio_uart;
	//here we are going to do the low level inits. of the USART2 peripheral

	//1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	__HAL_RCC_USART3_CLK_ENABLE();
 800083c:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <HAL_UART_MspInit+0x74>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000840:	4a19      	ldr	r2, [pc, #100]	; (80008a8 <HAL_UART_MspInit+0x74>)
 8000842:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000846:	6413      	str	r3, [r2, #64]	; 0x40
 8000848:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <HAL_UART_MspInit+0x74>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000854:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <HAL_UART_MspInit+0x74>)
 8000856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000858:	4a13      	ldr	r2, [pc, #76]	; (80008a8 <HAL_UART_MspInit+0x74>)
 800085a:	f043 0308 	orr.w	r3, r3, #8
 800085e:	6313      	str	r3, [r2, #48]	; 0x30
 8000860:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <HAL_UART_MspInit+0x74>)
 8000862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000864:	f003 0308 	and.w	r3, r3, #8
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	68fb      	ldr	r3, [r7, #12]

	//2. Do the pin muxing configurations
	gpio_uart.Pin = GPIO_PIN_8|GPIO_PIN_9; //UART2_TX
 800086c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000870:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 8000872:	2302      	movs	r3, #2
 8000874:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 8000876:	2301      	movs	r3, #1
 8000878:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART3;
 800087e:	2307      	movs	r3, #7
 8000880:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(GPIOD, &gpio_uart);
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4619      	mov	r1, r3
 8000888:	4808      	ldr	r0, [pc, #32]	; (80008ac <HAL_UART_MspInit+0x78>)
 800088a:	f000 f9fb 	bl	8000c84 <HAL_GPIO_Init>

	//3. Enable the IRQ and set up the priority (NVIC settings)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 800088e:	2026      	movs	r0, #38	; 0x26
 8000890:	f000 f9dd 	bl	8000c4e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8000894:	2200      	movs	r2, #0
 8000896:	210f      	movs	r1, #15
 8000898:	2026      	movs	r0, #38	; 0x26
 800089a:	f000 f9bc 	bl	8000c16 <HAL_NVIC_SetPriority>

}
 800089e:	bf00      	nop
 80008a0:	3728      	adds	r7, #40	; 0x28
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40020c00 	.word	0x40020c00

080008b0 <SysTick_Handler>:
 */

#include "main.h"
#include "stm32f7xx_it.h"

void SysTick_Handler(void){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80008b4:	f000 f8b4 	bl	8000a20 <HAL_IncTick>
}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}

080008bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008c4:	4a14      	ldr	r2, [pc, #80]	; (8000918 <_sbrk+0x5c>)
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <_sbrk+0x60>)
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008d0:	4b13      	ldr	r3, [pc, #76]	; (8000920 <_sbrk+0x64>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d102      	bne.n	80008de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <_sbrk+0x64>)
 80008da:	4a12      	ldr	r2, [pc, #72]	; (8000924 <_sbrk+0x68>)
 80008dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <_sbrk+0x64>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4413      	add	r3, r2
 80008e6:	693a      	ldr	r2, [r7, #16]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d207      	bcs.n	80008fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008ec:	f001 f96c 	bl	8001bc8 <__errno>
 80008f0:	4602      	mov	r2, r0
 80008f2:	230c      	movs	r3, #12
 80008f4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80008f6:	f04f 33ff 	mov.w	r3, #4294967295
 80008fa:	e009      	b.n	8000910 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008fc:	4b08      	ldr	r3, [pc, #32]	; (8000920 <_sbrk+0x64>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000902:	4b07      	ldr	r3, [pc, #28]	; (8000920 <_sbrk+0x64>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4413      	add	r3, r2
 800090a:	4a05      	ldr	r2, [pc, #20]	; (8000920 <_sbrk+0x64>)
 800090c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800090e:	68fb      	ldr	r3, [r7, #12]
}
 8000910:	4618      	mov	r0, r3
 8000912:	3718      	adds	r7, #24
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20080000 	.word	0x20080000
 800091c:	00000400 	.word	0x00000400
 8000920:	2000025c 	.word	0x2000025c
 8000924:	20000308 	.word	0x20000308

08000928 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <SystemInit+0x28>)
 800092e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000932:	4a07      	ldr	r2, [pc, #28]	; (8000950 <SystemInit+0x28>)
 8000934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800093c:	4b04      	ldr	r3, [pc, #16]	; (8000950 <SystemInit+0x28>)
 800093e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000942:	609a      	str	r2, [r3, #8]
#endif
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000954:	f8df d034 	ldr.w	sp, [pc, #52]	; 800098c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000958:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800095a:	e003      	b.n	8000964 <LoopCopyDataInit>

0800095c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800095e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000960:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000962:	3104      	adds	r1, #4

08000964 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000964:	480b      	ldr	r0, [pc, #44]	; (8000994 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000966:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000968:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800096a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800096c:	d3f6      	bcc.n	800095c <CopyDataInit>
  ldr  r2, =_sbss
 800096e:	4a0b      	ldr	r2, [pc, #44]	; (800099c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000970:	e002      	b.n	8000978 <LoopFillZerobss>

08000972 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000972:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000974:	f842 3b04 	str.w	r3, [r2], #4

08000978 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800097a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800097c:	d3f9      	bcc.n	8000972 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800097e:	f7ff ffd3 	bl	8000928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000982:	f001 f927 	bl	8001bd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000986:	f7ff fe59 	bl	800063c <main>
  bx  lr    
 800098a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800098c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000990:	08003e60 	.word	0x08003e60
  ldr  r0, =_sdata
 8000994:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000998:	2000023c 	.word	0x2000023c
  ldr  r2, =_sbss
 800099c:	20000240 	.word	0x20000240
  ldr  r3, = _ebss
 80009a0:	20000308 	.word	0x20000308

080009a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009a4:	e7fe      	b.n	80009a4 <ADC_IRQHandler>

080009a6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009aa:	2003      	movs	r0, #3
 80009ac:	f000 f928 	bl	8000c00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009b0:	2000      	movs	r0, #0
 80009b2:	f000 f805 	bl	80009c0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80009b6:	f7ff ff1b 	bl	80007f0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80009ba:	2300      	movs	r3, #0
}
 80009bc:	4618      	mov	r0, r3
 80009be:	bd80      	pop	{r7, pc}

080009c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009c8:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <HAL_InitTick+0x54>)
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <HAL_InitTick+0x58>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	4619      	mov	r1, r3
 80009d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009da:	fbb2 f3f3 	udiv	r3, r2, r3
 80009de:	4618      	mov	r0, r3
 80009e0:	f000 f943 	bl	8000c6a <HAL_SYSTICK_Config>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	e00e      	b.n	8000a0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2b0f      	cmp	r3, #15
 80009f2:	d80a      	bhi.n	8000a0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f4:	2200      	movs	r2, #0
 80009f6:	6879      	ldr	r1, [r7, #4]
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295
 80009fc:	f000 f90b 	bl	8000c16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a00:	4a06      	ldr	r2, [pc, #24]	; (8000a1c <HAL_InitTick+0x5c>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a06:	2300      	movs	r3, #0
 8000a08:	e000      	b.n	8000a0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000060 	.word	0x20000060
 8000a18:	20000068 	.word	0x20000068
 8000a1c:	20000064 	.word	0x20000064

08000a20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_IncTick+0x20>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_IncTick+0x24>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4413      	add	r3, r2
 8000a30:	4a04      	ldr	r2, [pc, #16]	; (8000a44 <HAL_IncTick+0x24>)
 8000a32:	6013      	str	r3, [r2, #0]
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	20000068 	.word	0x20000068
 8000a44:	20000300 	.word	0x20000300

08000a48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a4c:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <HAL_GetTick+0x14>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	20000300 	.word	0x20000300

08000a60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	f003 0307 	and.w	r3, r3, #7
 8000a6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a70:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <__NVIC_SetPriorityGrouping+0x40>)
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a8e:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <__NVIC_SetPriorityGrouping+0x40>)
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	60d3      	str	r3, [r2, #12]
}
 8000a94:	bf00      	nop
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000ed00 	.word	0xe000ed00
 8000aa4:	05fa0000 	.word	0x05fa0000

08000aa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aac:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	0a1b      	lsrs	r3, r3, #8
 8000ab2:	f003 0307 	and.w	r3, r3, #7
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	db0b      	blt.n	8000aee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	f003 021f 	and.w	r2, r3, #31
 8000adc:	4907      	ldr	r1, [pc, #28]	; (8000afc <__NVIC_EnableIRQ+0x38>)
 8000ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae2:	095b      	lsrs	r3, r3, #5
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000e100 	.word	0xe000e100

08000b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	6039      	str	r1, [r7, #0]
 8000b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	db0a      	blt.n	8000b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	490c      	ldr	r1, [pc, #48]	; (8000b4c <__NVIC_SetPriority+0x4c>)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	0112      	lsls	r2, r2, #4
 8000b20:	b2d2      	uxtb	r2, r2
 8000b22:	440b      	add	r3, r1
 8000b24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b28:	e00a      	b.n	8000b40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	4908      	ldr	r1, [pc, #32]	; (8000b50 <__NVIC_SetPriority+0x50>)
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	f003 030f 	and.w	r3, r3, #15
 8000b36:	3b04      	subs	r3, #4
 8000b38:	0112      	lsls	r2, r2, #4
 8000b3a:	b2d2      	uxtb	r2, r2
 8000b3c:	440b      	add	r3, r1
 8000b3e:	761a      	strb	r2, [r3, #24]
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	e000e100 	.word	0xe000e100
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b089      	sub	sp, #36	; 0x24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	f1c3 0307 	rsb	r3, r3, #7
 8000b6e:	2b04      	cmp	r3, #4
 8000b70:	bf28      	it	cs
 8000b72:	2304      	movcs	r3, #4
 8000b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	3304      	adds	r3, #4
 8000b7a:	2b06      	cmp	r3, #6
 8000b7c:	d902      	bls.n	8000b84 <NVIC_EncodePriority+0x30>
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	3b03      	subs	r3, #3
 8000b82:	e000      	b.n	8000b86 <NVIC_EncodePriority+0x32>
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b88:	f04f 32ff 	mov.w	r2, #4294967295
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	43da      	mvns	r2, r3
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	401a      	ands	r2, r3
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba6:	43d9      	mvns	r1, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	4313      	orrs	r3, r2
         );
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3724      	adds	r7, #36	; 0x24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
	...

08000bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bcc:	d301      	bcc.n	8000bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e00f      	b.n	8000bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <SysTick_Config+0x40>)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bda:	210f      	movs	r1, #15
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	f7ff ff8e 	bl	8000b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <SysTick_Config+0x40>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bea:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <SysTick_Config+0x40>)
 8000bec:	2207      	movs	r2, #7
 8000bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	e000e010 	.word	0xe000e010

08000c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff ff29 	bl	8000a60 <__NVIC_SetPriorityGrouping>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b086      	sub	sp, #24
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	60b9      	str	r1, [r7, #8]
 8000c20:	607a      	str	r2, [r7, #4]
 8000c22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c28:	f7ff ff3e 	bl	8000aa8 <__NVIC_GetPriorityGrouping>
 8000c2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	68b9      	ldr	r1, [r7, #8]
 8000c32:	6978      	ldr	r0, [r7, #20]
 8000c34:	f7ff ff8e 	bl	8000b54 <NVIC_EncodePriority>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c3e:	4611      	mov	r1, r2
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff ff5d 	bl	8000b00 <__NVIC_SetPriority>
}
 8000c46:	bf00      	nop
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	4603      	mov	r3, r0
 8000c56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff ff31 	bl	8000ac4 <__NVIC_EnableIRQ>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f7ff ffa2 	bl	8000bbc <SysTick_Config>
 8000c78:	4603      	mov	r3, r0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b089      	sub	sp, #36	; 0x24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
 8000ca2:	e175      	b.n	8000f90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	697a      	ldr	r2, [r7, #20]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	f040 8164 	bne.w	8000f8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d00b      	beq.n	8000ce2 <HAL_GPIO_Init+0x5e>
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d007      	beq.n	8000ce2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cd6:	2b11      	cmp	r3, #17
 8000cd8:	d003      	beq.n	8000ce2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	2b12      	cmp	r3, #18
 8000ce0:	d130      	bne.n	8000d44 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	2203      	movs	r2, #3
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	68da      	ldr	r2, [r3, #12]
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d18:	2201      	movs	r2, #1
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	43db      	mvns	r3, r3
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	4013      	ands	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	091b      	lsrs	r3, r3, #4
 8000d2e:	f003 0201 	and.w	r2, r3, #1
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	2203      	movs	r2, #3
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	689a      	ldr	r2, [r3, #8]
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d003      	beq.n	8000d84 <HAL_GPIO_Init+0x100>
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	2b12      	cmp	r3, #18
 8000d82:	d123      	bne.n	8000dcc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	08da      	lsrs	r2, r3, #3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3208      	adds	r2, #8
 8000d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	f003 0307 	and.w	r3, r3, #7
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	220f      	movs	r2, #15
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	4013      	ands	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	691a      	ldr	r2, [r3, #16]
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	08da      	lsrs	r2, r3, #3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	3208      	adds	r2, #8
 8000dc6:	69b9      	ldr	r1, [r7, #24]
 8000dc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	4013      	ands	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f003 0203 	and.w	r2, r3, #3
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f000 80be 	beq.w	8000f8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0e:	4b65      	ldr	r3, [pc, #404]	; (8000fa4 <HAL_GPIO_Init+0x320>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	4a64      	ldr	r2, [pc, #400]	; (8000fa4 <HAL_GPIO_Init+0x320>)
 8000e14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e18:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1a:	4b62      	ldr	r3, [pc, #392]	; (8000fa4 <HAL_GPIO_Init+0x320>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000e26:	4a60      	ldr	r2, [pc, #384]	; (8000fa8 <HAL_GPIO_Init+0x324>)
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	089b      	lsrs	r3, r3, #2
 8000e2c:	3302      	adds	r3, #2
 8000e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	f003 0303 	and.w	r3, r3, #3
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	220f      	movs	r2, #15
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43db      	mvns	r3, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4013      	ands	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a57      	ldr	r2, [pc, #348]	; (8000fac <HAL_GPIO_Init+0x328>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d037      	beq.n	8000ec2 <HAL_GPIO_Init+0x23e>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a56      	ldr	r2, [pc, #344]	; (8000fb0 <HAL_GPIO_Init+0x32c>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d031      	beq.n	8000ebe <HAL_GPIO_Init+0x23a>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a55      	ldr	r2, [pc, #340]	; (8000fb4 <HAL_GPIO_Init+0x330>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d02b      	beq.n	8000eba <HAL_GPIO_Init+0x236>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a54      	ldr	r2, [pc, #336]	; (8000fb8 <HAL_GPIO_Init+0x334>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d025      	beq.n	8000eb6 <HAL_GPIO_Init+0x232>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a53      	ldr	r2, [pc, #332]	; (8000fbc <HAL_GPIO_Init+0x338>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d01f      	beq.n	8000eb2 <HAL_GPIO_Init+0x22e>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a52      	ldr	r2, [pc, #328]	; (8000fc0 <HAL_GPIO_Init+0x33c>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d019      	beq.n	8000eae <HAL_GPIO_Init+0x22a>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a51      	ldr	r2, [pc, #324]	; (8000fc4 <HAL_GPIO_Init+0x340>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d013      	beq.n	8000eaa <HAL_GPIO_Init+0x226>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a50      	ldr	r2, [pc, #320]	; (8000fc8 <HAL_GPIO_Init+0x344>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d00d      	beq.n	8000ea6 <HAL_GPIO_Init+0x222>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a4f      	ldr	r2, [pc, #316]	; (8000fcc <HAL_GPIO_Init+0x348>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d007      	beq.n	8000ea2 <HAL_GPIO_Init+0x21e>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a4e      	ldr	r2, [pc, #312]	; (8000fd0 <HAL_GPIO_Init+0x34c>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d101      	bne.n	8000e9e <HAL_GPIO_Init+0x21a>
 8000e9a:	2309      	movs	r3, #9
 8000e9c:	e012      	b.n	8000ec4 <HAL_GPIO_Init+0x240>
 8000e9e:	230a      	movs	r3, #10
 8000ea0:	e010      	b.n	8000ec4 <HAL_GPIO_Init+0x240>
 8000ea2:	2308      	movs	r3, #8
 8000ea4:	e00e      	b.n	8000ec4 <HAL_GPIO_Init+0x240>
 8000ea6:	2307      	movs	r3, #7
 8000ea8:	e00c      	b.n	8000ec4 <HAL_GPIO_Init+0x240>
 8000eaa:	2306      	movs	r3, #6
 8000eac:	e00a      	b.n	8000ec4 <HAL_GPIO_Init+0x240>
 8000eae:	2305      	movs	r3, #5
 8000eb0:	e008      	b.n	8000ec4 <HAL_GPIO_Init+0x240>
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	e006      	b.n	8000ec4 <HAL_GPIO_Init+0x240>
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e004      	b.n	8000ec4 <HAL_GPIO_Init+0x240>
 8000eba:	2302      	movs	r3, #2
 8000ebc:	e002      	b.n	8000ec4 <HAL_GPIO_Init+0x240>
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e000      	b.n	8000ec4 <HAL_GPIO_Init+0x240>
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	69fa      	ldr	r2, [r7, #28]
 8000ec6:	f002 0203 	and.w	r2, r2, #3
 8000eca:	0092      	lsls	r2, r2, #2
 8000ecc:	4093      	lsls	r3, r2
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ed4:	4934      	ldr	r1, [pc, #208]	; (8000fa8 <HAL_GPIO_Init+0x324>)
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	089b      	lsrs	r3, r3, #2
 8000eda:	3302      	adds	r3, #2
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ee2:	4b3c      	ldr	r3, [pc, #240]	; (8000fd4 <HAL_GPIO_Init+0x350>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	43db      	mvns	r3, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f06:	4a33      	ldr	r2, [pc, #204]	; (8000fd4 <HAL_GPIO_Init+0x350>)
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f0c:	4b31      	ldr	r3, [pc, #196]	; (8000fd4 <HAL_GPIO_Init+0x350>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d003      	beq.n	8000f30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f30:	4a28      	ldr	r2, [pc, #160]	; (8000fd4 <HAL_GPIO_Init+0x350>)
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f36:	4b27      	ldr	r3, [pc, #156]	; (8000fd4 <HAL_GPIO_Init+0x350>)
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4013      	ands	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d003      	beq.n	8000f5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f5a:	4a1e      	ldr	r2, [pc, #120]	; (8000fd4 <HAL_GPIO_Init+0x350>)
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f60:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <HAL_GPIO_Init+0x350>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d003      	beq.n	8000f84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f84:	4a13      	ldr	r2, [pc, #76]	; (8000fd4 <HAL_GPIO_Init+0x350>)
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	61fb      	str	r3, [r7, #28]
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	2b0f      	cmp	r3, #15
 8000f94:	f67f ae86 	bls.w	8000ca4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000f98:	bf00      	nop
 8000f9a:	3724      	adds	r7, #36	; 0x24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40013800 	.word	0x40013800
 8000fac:	40020000 	.word	0x40020000
 8000fb0:	40020400 	.word	0x40020400
 8000fb4:	40020800 	.word	0x40020800
 8000fb8:	40020c00 	.word	0x40020c00
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40021400 	.word	0x40021400
 8000fc4:	40021800 	.word	0x40021800
 8000fc8:	40021c00 	.word	0x40021c00
 8000fcc:	40022000 	.word	0x40022000
 8000fd0:	40022400 	.word	0x40022400
 8000fd4:	40013c00 	.word	0x40013c00

08000fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	607b      	str	r3, [r7, #4]
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000fee:	4b63      	ldr	r3, [pc, #396]	; (800117c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	f003 030c 	and.w	r3, r3, #12
 8000ff6:	2b04      	cmp	r3, #4
 8000ff8:	d007      	beq.n	800100a <HAL_RCC_GetSysClockFreq+0x32>
 8000ffa:	2b08      	cmp	r3, #8
 8000ffc:	d008      	beq.n	8001010 <HAL_RCC_GetSysClockFreq+0x38>
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f040 80b4 	bne.w	800116c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001004:	4b5e      	ldr	r3, [pc, #376]	; (8001180 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001006:	60bb      	str	r3, [r7, #8]
      break;
 8001008:	e0b3      	b.n	8001172 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800100a:	4b5e      	ldr	r3, [pc, #376]	; (8001184 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800100c:	60bb      	str	r3, [r7, #8]
      break;
 800100e:	e0b0      	b.n	8001172 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001010:	4b5a      	ldr	r3, [pc, #360]	; (800117c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001018:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800101a:	4b58      	ldr	r3, [pc, #352]	; (800117c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d04a      	beq.n	80010bc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001026:	4b55      	ldr	r3, [pc, #340]	; (800117c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	099b      	lsrs	r3, r3, #6
 800102c:	f04f 0400 	mov.w	r4, #0
 8001030:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001034:	f04f 0200 	mov.w	r2, #0
 8001038:	ea03 0501 	and.w	r5, r3, r1
 800103c:	ea04 0602 	and.w	r6, r4, r2
 8001040:	4629      	mov	r1, r5
 8001042:	4632      	mov	r2, r6
 8001044:	f04f 0300 	mov.w	r3, #0
 8001048:	f04f 0400 	mov.w	r4, #0
 800104c:	0154      	lsls	r4, r2, #5
 800104e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001052:	014b      	lsls	r3, r1, #5
 8001054:	4619      	mov	r1, r3
 8001056:	4622      	mov	r2, r4
 8001058:	1b49      	subs	r1, r1, r5
 800105a:	eb62 0206 	sbc.w	r2, r2, r6
 800105e:	f04f 0300 	mov.w	r3, #0
 8001062:	f04f 0400 	mov.w	r4, #0
 8001066:	0194      	lsls	r4, r2, #6
 8001068:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800106c:	018b      	lsls	r3, r1, #6
 800106e:	1a5b      	subs	r3, r3, r1
 8001070:	eb64 0402 	sbc.w	r4, r4, r2
 8001074:	f04f 0100 	mov.w	r1, #0
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	00e2      	lsls	r2, r4, #3
 800107e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001082:	00d9      	lsls	r1, r3, #3
 8001084:	460b      	mov	r3, r1
 8001086:	4614      	mov	r4, r2
 8001088:	195b      	adds	r3, r3, r5
 800108a:	eb44 0406 	adc.w	r4, r4, r6
 800108e:	f04f 0100 	mov.w	r1, #0
 8001092:	f04f 0200 	mov.w	r2, #0
 8001096:	0262      	lsls	r2, r4, #9
 8001098:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800109c:	0259      	lsls	r1, r3, #9
 800109e:	460b      	mov	r3, r1
 80010a0:	4614      	mov	r4, r2
 80010a2:	4618      	mov	r0, r3
 80010a4:	4621      	mov	r1, r4
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f04f 0400 	mov.w	r4, #0
 80010ac:	461a      	mov	r2, r3
 80010ae:	4623      	mov	r3, r4
 80010b0:	f7ff f91e 	bl	80002f0 <__aeabi_uldivmod>
 80010b4:	4603      	mov	r3, r0
 80010b6:	460c      	mov	r4, r1
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	e049      	b.n	8001150 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010bc:	4b2f      	ldr	r3, [pc, #188]	; (800117c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	099b      	lsrs	r3, r3, #6
 80010c2:	f04f 0400 	mov.w	r4, #0
 80010c6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	ea03 0501 	and.w	r5, r3, r1
 80010d2:	ea04 0602 	and.w	r6, r4, r2
 80010d6:	4629      	mov	r1, r5
 80010d8:	4632      	mov	r2, r6
 80010da:	f04f 0300 	mov.w	r3, #0
 80010de:	f04f 0400 	mov.w	r4, #0
 80010e2:	0154      	lsls	r4, r2, #5
 80010e4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80010e8:	014b      	lsls	r3, r1, #5
 80010ea:	4619      	mov	r1, r3
 80010ec:	4622      	mov	r2, r4
 80010ee:	1b49      	subs	r1, r1, r5
 80010f0:	eb62 0206 	sbc.w	r2, r2, r6
 80010f4:	f04f 0300 	mov.w	r3, #0
 80010f8:	f04f 0400 	mov.w	r4, #0
 80010fc:	0194      	lsls	r4, r2, #6
 80010fe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001102:	018b      	lsls	r3, r1, #6
 8001104:	1a5b      	subs	r3, r3, r1
 8001106:	eb64 0402 	sbc.w	r4, r4, r2
 800110a:	f04f 0100 	mov.w	r1, #0
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	00e2      	lsls	r2, r4, #3
 8001114:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001118:	00d9      	lsls	r1, r3, #3
 800111a:	460b      	mov	r3, r1
 800111c:	4614      	mov	r4, r2
 800111e:	195b      	adds	r3, r3, r5
 8001120:	eb44 0406 	adc.w	r4, r4, r6
 8001124:	f04f 0100 	mov.w	r1, #0
 8001128:	f04f 0200 	mov.w	r2, #0
 800112c:	02a2      	lsls	r2, r4, #10
 800112e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001132:	0299      	lsls	r1, r3, #10
 8001134:	460b      	mov	r3, r1
 8001136:	4614      	mov	r4, r2
 8001138:	4618      	mov	r0, r3
 800113a:	4621      	mov	r1, r4
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f04f 0400 	mov.w	r4, #0
 8001142:	461a      	mov	r2, r3
 8001144:	4623      	mov	r3, r4
 8001146:	f7ff f8d3 	bl	80002f0 <__aeabi_uldivmod>
 800114a:	4603      	mov	r3, r0
 800114c:	460c      	mov	r4, r1
 800114e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	0c1b      	lsrs	r3, r3, #16
 8001156:	f003 0303 	and.w	r3, r3, #3
 800115a:	3301      	adds	r3, #1
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001160:	68fa      	ldr	r2, [r7, #12]
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	fbb2 f3f3 	udiv	r3, r2, r3
 8001168:	60bb      	str	r3, [r7, #8]
      break;
 800116a:	e002      	b.n	8001172 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800116e:	60bb      	str	r3, [r7, #8]
      break;
 8001170:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001172:	68bb      	ldr	r3, [r7, #8]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800117c:	40023800 	.word	0x40023800
 8001180:	00f42400 	.word	0x00f42400
 8001184:	007a1200 	.word	0x007a1200

08001188 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800118c:	4b03      	ldr	r3, [pc, #12]	; (800119c <HAL_RCC_GetHCLKFreq+0x14>)
 800118e:	681b      	ldr	r3, [r3, #0]
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20000060 	.word	0x20000060

080011a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80011a4:	f7ff fff0 	bl	8001188 <HAL_RCC_GetHCLKFreq>
 80011a8:	4601      	mov	r1, r0
 80011aa:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	0a9b      	lsrs	r3, r3, #10
 80011b0:	f003 0307 	and.w	r3, r3, #7
 80011b4:	4a03      	ldr	r2, [pc, #12]	; (80011c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80011b6:	5cd3      	ldrb	r3, [r2, r3]
 80011b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80011bc:	4618      	mov	r0, r3
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40023800 	.word	0x40023800
 80011c4:	08003be8 	.word	0x08003be8

080011c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80011cc:	f7ff ffdc 	bl	8001188 <HAL_RCC_GetHCLKFreq>
 80011d0:	4601      	mov	r1, r0
 80011d2:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	0b5b      	lsrs	r3, r3, #13
 80011d8:	f003 0307 	and.w	r3, r3, #7
 80011dc:	4a03      	ldr	r2, [pc, #12]	; (80011ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80011de:	5cd3      	ldrb	r3, [r2, r3]
 80011e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40023800 	.word	0x40023800
 80011ec:	08003be8 	.word	0x08003be8

080011f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e040      	b.n	8001284 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001206:	2b00      	cmp	r3, #0
 8001208:	d106      	bne.n	8001218 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff fb0e 	bl	8000834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2224      	movs	r2, #36	; 0x24
 800121c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f022 0201 	bic.w	r2, r2, #1
 800122c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f000 f8be 	bl	80013b0 <UART_SetConfig>
 8001234:	4603      	mov	r3, r0
 8001236:	2b01      	cmp	r3, #1
 8001238:	d101      	bne.n	800123e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e022      	b.n	8001284 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001242:	2b00      	cmp	r3, #0
 8001244:	d002      	beq.n	800124c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f000 fb5c 	bl	8001904 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800125a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	689a      	ldr	r2, [r3, #8]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800126a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f042 0201 	orr.w	r2, r2, #1
 800127a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f000 fbe3 	bl	8001a48 <UART_CheckIdleState>
 8001282:	4603      	mov	r3, r0
}
 8001284:	4618      	mov	r0, r3
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	; 0x28
 8001290:	af02      	add	r7, sp, #8
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	603b      	str	r3, [r7, #0]
 8001298:	4613      	mov	r3, r2
 800129a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012a0:	2b20      	cmp	r3, #32
 80012a2:	d17f      	bne.n	80013a4 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d002      	beq.n	80012b0 <HAL_UART_Transmit+0x24>
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d101      	bne.n	80012b4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e078      	b.n	80013a6 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d101      	bne.n	80012c2 <HAL_UART_Transmit+0x36>
 80012be:	2302      	movs	r3, #2
 80012c0:	e071      	b.n	80013a6 <HAL_UART_Transmit+0x11a>
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2201      	movs	r2, #1
 80012c6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2200      	movs	r2, #0
 80012ce:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2221      	movs	r2, #33	; 0x21
 80012d4:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80012d6:	f7ff fbb7 	bl	8000a48 <HAL_GetTick>
 80012da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	88fa      	ldrh	r2, [r7, #6]
 80012e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	88fa      	ldrh	r2, [r7, #6]
 80012e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012f4:	d108      	bne.n	8001308 <HAL_UART_Transmit+0x7c>
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d104      	bne.n	8001308 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	61bb      	str	r3, [r7, #24]
 8001306:	e003      	b.n	8001310 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800130c:	2300      	movs	r3, #0
 800130e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8001318:	e02c      	b.n	8001374 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	2200      	movs	r2, #0
 8001322:	2180      	movs	r1, #128	; 0x80
 8001324:	68f8      	ldr	r0, [r7, #12]
 8001326:	f000 fbd4 	bl	8001ad2 <UART_WaitOnFlagUntilTimeout>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e038      	b.n	80013a6 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d10b      	bne.n	8001352 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	881b      	ldrh	r3, [r3, #0]
 800133e:	461a      	mov	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001348:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	3302      	adds	r3, #2
 800134e:	61bb      	str	r3, [r7, #24]
 8001350:	e007      	b.n	8001362 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	781a      	ldrb	r2, [r3, #0]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	3301      	adds	r3, #1
 8001360:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8001368:	b29b      	uxth	r3, r3
 800136a:	3b01      	subs	r3, #1
 800136c:	b29a      	uxth	r2, r3
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800137a:	b29b      	uxth	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1cc      	bne.n	800131a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	2200      	movs	r2, #0
 8001388:	2140      	movs	r1, #64	; 0x40
 800138a:	68f8      	ldr	r0, [r7, #12]
 800138c:	f000 fba1 	bl	8001ad2 <UART_WaitOnFlagUntilTimeout>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e005      	b.n	80013a6 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2220      	movs	r2, #32
 800139e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80013a0:	2300      	movs	r3, #0
 80013a2:	e000      	b.n	80013a6 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80013a4:	2302      	movs	r3, #2
  }
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3720      	adds	r7, #32
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80013bc:	2300      	movs	r3, #0
 80013be:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	431a      	orrs	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	431a      	orrs	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	69db      	ldr	r3, [r3, #28]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	4bb1      	ldr	r3, [pc, #708]	; (80016a4 <UART_SetConfig+0x2f4>)
 80013e0:	4013      	ands	r3, r2
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	6812      	ldr	r2, [r2, #0]
 80013e6:	6939      	ldr	r1, [r7, #16]
 80013e8:	430b      	orrs	r3, r1
 80013ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68da      	ldr	r2, [r3, #12]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	430a      	orrs	r2, r1
 8001400:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a1b      	ldr	r3, [r3, #32]
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	430a      	orrs	r2, r1
 8001424:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a9f      	ldr	r2, [pc, #636]	; (80016a8 <UART_SetConfig+0x2f8>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d121      	bne.n	8001474 <UART_SetConfig+0xc4>
 8001430:	4b9e      	ldr	r3, [pc, #632]	; (80016ac <UART_SetConfig+0x2fc>)
 8001432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001436:	f003 0303 	and.w	r3, r3, #3
 800143a:	2b03      	cmp	r3, #3
 800143c:	d816      	bhi.n	800146c <UART_SetConfig+0xbc>
 800143e:	a201      	add	r2, pc, #4	; (adr r2, 8001444 <UART_SetConfig+0x94>)
 8001440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001444:	08001455 	.word	0x08001455
 8001448:	08001461 	.word	0x08001461
 800144c:	0800145b 	.word	0x0800145b
 8001450:	08001467 	.word	0x08001467
 8001454:	2301      	movs	r3, #1
 8001456:	77fb      	strb	r3, [r7, #31]
 8001458:	e151      	b.n	80016fe <UART_SetConfig+0x34e>
 800145a:	2302      	movs	r3, #2
 800145c:	77fb      	strb	r3, [r7, #31]
 800145e:	e14e      	b.n	80016fe <UART_SetConfig+0x34e>
 8001460:	2304      	movs	r3, #4
 8001462:	77fb      	strb	r3, [r7, #31]
 8001464:	e14b      	b.n	80016fe <UART_SetConfig+0x34e>
 8001466:	2308      	movs	r3, #8
 8001468:	77fb      	strb	r3, [r7, #31]
 800146a:	e148      	b.n	80016fe <UART_SetConfig+0x34e>
 800146c:	2310      	movs	r3, #16
 800146e:	77fb      	strb	r3, [r7, #31]
 8001470:	bf00      	nop
 8001472:	e144      	b.n	80016fe <UART_SetConfig+0x34e>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a8d      	ldr	r2, [pc, #564]	; (80016b0 <UART_SetConfig+0x300>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d134      	bne.n	80014e8 <UART_SetConfig+0x138>
 800147e:	4b8b      	ldr	r3, [pc, #556]	; (80016ac <UART_SetConfig+0x2fc>)
 8001480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001484:	f003 030c 	and.w	r3, r3, #12
 8001488:	2b0c      	cmp	r3, #12
 800148a:	d829      	bhi.n	80014e0 <UART_SetConfig+0x130>
 800148c:	a201      	add	r2, pc, #4	; (adr r2, 8001494 <UART_SetConfig+0xe4>)
 800148e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001492:	bf00      	nop
 8001494:	080014c9 	.word	0x080014c9
 8001498:	080014e1 	.word	0x080014e1
 800149c:	080014e1 	.word	0x080014e1
 80014a0:	080014e1 	.word	0x080014e1
 80014a4:	080014d5 	.word	0x080014d5
 80014a8:	080014e1 	.word	0x080014e1
 80014ac:	080014e1 	.word	0x080014e1
 80014b0:	080014e1 	.word	0x080014e1
 80014b4:	080014cf 	.word	0x080014cf
 80014b8:	080014e1 	.word	0x080014e1
 80014bc:	080014e1 	.word	0x080014e1
 80014c0:	080014e1 	.word	0x080014e1
 80014c4:	080014db 	.word	0x080014db
 80014c8:	2300      	movs	r3, #0
 80014ca:	77fb      	strb	r3, [r7, #31]
 80014cc:	e117      	b.n	80016fe <UART_SetConfig+0x34e>
 80014ce:	2302      	movs	r3, #2
 80014d0:	77fb      	strb	r3, [r7, #31]
 80014d2:	e114      	b.n	80016fe <UART_SetConfig+0x34e>
 80014d4:	2304      	movs	r3, #4
 80014d6:	77fb      	strb	r3, [r7, #31]
 80014d8:	e111      	b.n	80016fe <UART_SetConfig+0x34e>
 80014da:	2308      	movs	r3, #8
 80014dc:	77fb      	strb	r3, [r7, #31]
 80014de:	e10e      	b.n	80016fe <UART_SetConfig+0x34e>
 80014e0:	2310      	movs	r3, #16
 80014e2:	77fb      	strb	r3, [r7, #31]
 80014e4:	bf00      	nop
 80014e6:	e10a      	b.n	80016fe <UART_SetConfig+0x34e>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a71      	ldr	r2, [pc, #452]	; (80016b4 <UART_SetConfig+0x304>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d120      	bne.n	8001534 <UART_SetConfig+0x184>
 80014f2:	4b6e      	ldr	r3, [pc, #440]	; (80016ac <UART_SetConfig+0x2fc>)
 80014f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80014fc:	2b10      	cmp	r3, #16
 80014fe:	d00f      	beq.n	8001520 <UART_SetConfig+0x170>
 8001500:	2b10      	cmp	r3, #16
 8001502:	d802      	bhi.n	800150a <UART_SetConfig+0x15a>
 8001504:	2b00      	cmp	r3, #0
 8001506:	d005      	beq.n	8001514 <UART_SetConfig+0x164>
 8001508:	e010      	b.n	800152c <UART_SetConfig+0x17c>
 800150a:	2b20      	cmp	r3, #32
 800150c:	d005      	beq.n	800151a <UART_SetConfig+0x16a>
 800150e:	2b30      	cmp	r3, #48	; 0x30
 8001510:	d009      	beq.n	8001526 <UART_SetConfig+0x176>
 8001512:	e00b      	b.n	800152c <UART_SetConfig+0x17c>
 8001514:	2300      	movs	r3, #0
 8001516:	77fb      	strb	r3, [r7, #31]
 8001518:	e0f1      	b.n	80016fe <UART_SetConfig+0x34e>
 800151a:	2302      	movs	r3, #2
 800151c:	77fb      	strb	r3, [r7, #31]
 800151e:	e0ee      	b.n	80016fe <UART_SetConfig+0x34e>
 8001520:	2304      	movs	r3, #4
 8001522:	77fb      	strb	r3, [r7, #31]
 8001524:	e0eb      	b.n	80016fe <UART_SetConfig+0x34e>
 8001526:	2308      	movs	r3, #8
 8001528:	77fb      	strb	r3, [r7, #31]
 800152a:	e0e8      	b.n	80016fe <UART_SetConfig+0x34e>
 800152c:	2310      	movs	r3, #16
 800152e:	77fb      	strb	r3, [r7, #31]
 8001530:	bf00      	nop
 8001532:	e0e4      	b.n	80016fe <UART_SetConfig+0x34e>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a5f      	ldr	r2, [pc, #380]	; (80016b8 <UART_SetConfig+0x308>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d120      	bne.n	8001580 <UART_SetConfig+0x1d0>
 800153e:	4b5b      	ldr	r3, [pc, #364]	; (80016ac <UART_SetConfig+0x2fc>)
 8001540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001544:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001548:	2b40      	cmp	r3, #64	; 0x40
 800154a:	d00f      	beq.n	800156c <UART_SetConfig+0x1bc>
 800154c:	2b40      	cmp	r3, #64	; 0x40
 800154e:	d802      	bhi.n	8001556 <UART_SetConfig+0x1a6>
 8001550:	2b00      	cmp	r3, #0
 8001552:	d005      	beq.n	8001560 <UART_SetConfig+0x1b0>
 8001554:	e010      	b.n	8001578 <UART_SetConfig+0x1c8>
 8001556:	2b80      	cmp	r3, #128	; 0x80
 8001558:	d005      	beq.n	8001566 <UART_SetConfig+0x1b6>
 800155a:	2bc0      	cmp	r3, #192	; 0xc0
 800155c:	d009      	beq.n	8001572 <UART_SetConfig+0x1c2>
 800155e:	e00b      	b.n	8001578 <UART_SetConfig+0x1c8>
 8001560:	2300      	movs	r3, #0
 8001562:	77fb      	strb	r3, [r7, #31]
 8001564:	e0cb      	b.n	80016fe <UART_SetConfig+0x34e>
 8001566:	2302      	movs	r3, #2
 8001568:	77fb      	strb	r3, [r7, #31]
 800156a:	e0c8      	b.n	80016fe <UART_SetConfig+0x34e>
 800156c:	2304      	movs	r3, #4
 800156e:	77fb      	strb	r3, [r7, #31]
 8001570:	e0c5      	b.n	80016fe <UART_SetConfig+0x34e>
 8001572:	2308      	movs	r3, #8
 8001574:	77fb      	strb	r3, [r7, #31]
 8001576:	e0c2      	b.n	80016fe <UART_SetConfig+0x34e>
 8001578:	2310      	movs	r3, #16
 800157a:	77fb      	strb	r3, [r7, #31]
 800157c:	bf00      	nop
 800157e:	e0be      	b.n	80016fe <UART_SetConfig+0x34e>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a4d      	ldr	r2, [pc, #308]	; (80016bc <UART_SetConfig+0x30c>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d124      	bne.n	80015d4 <UART_SetConfig+0x224>
 800158a:	4b48      	ldr	r3, [pc, #288]	; (80016ac <UART_SetConfig+0x2fc>)
 800158c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001590:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001594:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001598:	d012      	beq.n	80015c0 <UART_SetConfig+0x210>
 800159a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800159e:	d802      	bhi.n	80015a6 <UART_SetConfig+0x1f6>
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d007      	beq.n	80015b4 <UART_SetConfig+0x204>
 80015a4:	e012      	b.n	80015cc <UART_SetConfig+0x21c>
 80015a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015aa:	d006      	beq.n	80015ba <UART_SetConfig+0x20a>
 80015ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80015b0:	d009      	beq.n	80015c6 <UART_SetConfig+0x216>
 80015b2:	e00b      	b.n	80015cc <UART_SetConfig+0x21c>
 80015b4:	2300      	movs	r3, #0
 80015b6:	77fb      	strb	r3, [r7, #31]
 80015b8:	e0a1      	b.n	80016fe <UART_SetConfig+0x34e>
 80015ba:	2302      	movs	r3, #2
 80015bc:	77fb      	strb	r3, [r7, #31]
 80015be:	e09e      	b.n	80016fe <UART_SetConfig+0x34e>
 80015c0:	2304      	movs	r3, #4
 80015c2:	77fb      	strb	r3, [r7, #31]
 80015c4:	e09b      	b.n	80016fe <UART_SetConfig+0x34e>
 80015c6:	2308      	movs	r3, #8
 80015c8:	77fb      	strb	r3, [r7, #31]
 80015ca:	e098      	b.n	80016fe <UART_SetConfig+0x34e>
 80015cc:	2310      	movs	r3, #16
 80015ce:	77fb      	strb	r3, [r7, #31]
 80015d0:	bf00      	nop
 80015d2:	e094      	b.n	80016fe <UART_SetConfig+0x34e>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a39      	ldr	r2, [pc, #228]	; (80016c0 <UART_SetConfig+0x310>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d124      	bne.n	8001628 <UART_SetConfig+0x278>
 80015de:	4b33      	ldr	r3, [pc, #204]	; (80016ac <UART_SetConfig+0x2fc>)
 80015e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ec:	d012      	beq.n	8001614 <UART_SetConfig+0x264>
 80015ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015f2:	d802      	bhi.n	80015fa <UART_SetConfig+0x24a>
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d007      	beq.n	8001608 <UART_SetConfig+0x258>
 80015f8:	e012      	b.n	8001620 <UART_SetConfig+0x270>
 80015fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015fe:	d006      	beq.n	800160e <UART_SetConfig+0x25e>
 8001600:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001604:	d009      	beq.n	800161a <UART_SetConfig+0x26a>
 8001606:	e00b      	b.n	8001620 <UART_SetConfig+0x270>
 8001608:	2301      	movs	r3, #1
 800160a:	77fb      	strb	r3, [r7, #31]
 800160c:	e077      	b.n	80016fe <UART_SetConfig+0x34e>
 800160e:	2302      	movs	r3, #2
 8001610:	77fb      	strb	r3, [r7, #31]
 8001612:	e074      	b.n	80016fe <UART_SetConfig+0x34e>
 8001614:	2304      	movs	r3, #4
 8001616:	77fb      	strb	r3, [r7, #31]
 8001618:	e071      	b.n	80016fe <UART_SetConfig+0x34e>
 800161a:	2308      	movs	r3, #8
 800161c:	77fb      	strb	r3, [r7, #31]
 800161e:	e06e      	b.n	80016fe <UART_SetConfig+0x34e>
 8001620:	2310      	movs	r3, #16
 8001622:	77fb      	strb	r3, [r7, #31]
 8001624:	bf00      	nop
 8001626:	e06a      	b.n	80016fe <UART_SetConfig+0x34e>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a25      	ldr	r2, [pc, #148]	; (80016c4 <UART_SetConfig+0x314>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d124      	bne.n	800167c <UART_SetConfig+0x2cc>
 8001632:	4b1e      	ldr	r3, [pc, #120]	; (80016ac <UART_SetConfig+0x2fc>)
 8001634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001638:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800163c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001640:	d012      	beq.n	8001668 <UART_SetConfig+0x2b8>
 8001642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001646:	d802      	bhi.n	800164e <UART_SetConfig+0x29e>
 8001648:	2b00      	cmp	r3, #0
 800164a:	d007      	beq.n	800165c <UART_SetConfig+0x2ac>
 800164c:	e012      	b.n	8001674 <UART_SetConfig+0x2c4>
 800164e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001652:	d006      	beq.n	8001662 <UART_SetConfig+0x2b2>
 8001654:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001658:	d009      	beq.n	800166e <UART_SetConfig+0x2be>
 800165a:	e00b      	b.n	8001674 <UART_SetConfig+0x2c4>
 800165c:	2300      	movs	r3, #0
 800165e:	77fb      	strb	r3, [r7, #31]
 8001660:	e04d      	b.n	80016fe <UART_SetConfig+0x34e>
 8001662:	2302      	movs	r3, #2
 8001664:	77fb      	strb	r3, [r7, #31]
 8001666:	e04a      	b.n	80016fe <UART_SetConfig+0x34e>
 8001668:	2304      	movs	r3, #4
 800166a:	77fb      	strb	r3, [r7, #31]
 800166c:	e047      	b.n	80016fe <UART_SetConfig+0x34e>
 800166e:	2308      	movs	r3, #8
 8001670:	77fb      	strb	r3, [r7, #31]
 8001672:	e044      	b.n	80016fe <UART_SetConfig+0x34e>
 8001674:	2310      	movs	r3, #16
 8001676:	77fb      	strb	r3, [r7, #31]
 8001678:	bf00      	nop
 800167a:	e040      	b.n	80016fe <UART_SetConfig+0x34e>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a11      	ldr	r2, [pc, #68]	; (80016c8 <UART_SetConfig+0x318>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d139      	bne.n	80016fa <UART_SetConfig+0x34a>
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <UART_SetConfig+0x2fc>)
 8001688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800168c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001690:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001694:	d027      	beq.n	80016e6 <UART_SetConfig+0x336>
 8001696:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800169a:	d817      	bhi.n	80016cc <UART_SetConfig+0x31c>
 800169c:	2b00      	cmp	r3, #0
 800169e:	d01c      	beq.n	80016da <UART_SetConfig+0x32a>
 80016a0:	e027      	b.n	80016f2 <UART_SetConfig+0x342>
 80016a2:	bf00      	nop
 80016a4:	efff69f3 	.word	0xefff69f3
 80016a8:	40011000 	.word	0x40011000
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40004400 	.word	0x40004400
 80016b4:	40004800 	.word	0x40004800
 80016b8:	40004c00 	.word	0x40004c00
 80016bc:	40005000 	.word	0x40005000
 80016c0:	40011400 	.word	0x40011400
 80016c4:	40007800 	.word	0x40007800
 80016c8:	40007c00 	.word	0x40007c00
 80016cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016d0:	d006      	beq.n	80016e0 <UART_SetConfig+0x330>
 80016d2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80016d6:	d009      	beq.n	80016ec <UART_SetConfig+0x33c>
 80016d8:	e00b      	b.n	80016f2 <UART_SetConfig+0x342>
 80016da:	2300      	movs	r3, #0
 80016dc:	77fb      	strb	r3, [r7, #31]
 80016de:	e00e      	b.n	80016fe <UART_SetConfig+0x34e>
 80016e0:	2302      	movs	r3, #2
 80016e2:	77fb      	strb	r3, [r7, #31]
 80016e4:	e00b      	b.n	80016fe <UART_SetConfig+0x34e>
 80016e6:	2304      	movs	r3, #4
 80016e8:	77fb      	strb	r3, [r7, #31]
 80016ea:	e008      	b.n	80016fe <UART_SetConfig+0x34e>
 80016ec:	2308      	movs	r3, #8
 80016ee:	77fb      	strb	r3, [r7, #31]
 80016f0:	e005      	b.n	80016fe <UART_SetConfig+0x34e>
 80016f2:	2310      	movs	r3, #16
 80016f4:	77fb      	strb	r3, [r7, #31]
 80016f6:	bf00      	nop
 80016f8:	e001      	b.n	80016fe <UART_SetConfig+0x34e>
 80016fa:	2310      	movs	r3, #16
 80016fc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001706:	d17f      	bne.n	8001808 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8001708:	7ffb      	ldrb	r3, [r7, #31]
 800170a:	2b08      	cmp	r3, #8
 800170c:	d85c      	bhi.n	80017c8 <UART_SetConfig+0x418>
 800170e:	a201      	add	r2, pc, #4	; (adr r2, 8001714 <UART_SetConfig+0x364>)
 8001710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001714:	08001739 	.word	0x08001739
 8001718:	08001759 	.word	0x08001759
 800171c:	08001779 	.word	0x08001779
 8001720:	080017c9 	.word	0x080017c9
 8001724:	08001791 	.word	0x08001791
 8001728:	080017c9 	.word	0x080017c9
 800172c:	080017c9 	.word	0x080017c9
 8001730:	080017c9 	.word	0x080017c9
 8001734:	080017b1 	.word	0x080017b1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001738:	f7ff fd32 	bl	80011a0 <HAL_RCC_GetPCLK1Freq>
 800173c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	005a      	lsls	r2, r3, #1
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	085b      	lsrs	r3, r3, #1
 8001748:	441a      	add	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001752:	b29b      	uxth	r3, r3
 8001754:	61bb      	str	r3, [r7, #24]
        break;
 8001756:	e03a      	b.n	80017ce <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001758:	f7ff fd36 	bl	80011c8 <HAL_RCC_GetPCLK2Freq>
 800175c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	005a      	lsls	r2, r3, #1
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	085b      	lsrs	r3, r3, #1
 8001768:	441a      	add	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001772:	b29b      	uxth	r3, r3
 8001774:	61bb      	str	r3, [r7, #24]
        break;
 8001776:	e02a      	b.n	80017ce <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	085a      	lsrs	r2, r3, #1
 800177e:	4b5f      	ldr	r3, [pc, #380]	; (80018fc <UART_SetConfig+0x54c>)
 8001780:	4413      	add	r3, r2
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	6852      	ldr	r2, [r2, #4]
 8001786:	fbb3 f3f2 	udiv	r3, r3, r2
 800178a:	b29b      	uxth	r3, r3
 800178c:	61bb      	str	r3, [r7, #24]
        break;
 800178e:	e01e      	b.n	80017ce <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001790:	f7ff fc22 	bl	8000fd8 <HAL_RCC_GetSysClockFreq>
 8001794:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	005a      	lsls	r2, r3, #1
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	085b      	lsrs	r3, r3, #1
 80017a0:	441a      	add	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	61bb      	str	r3, [r7, #24]
        break;
 80017ae:	e00e      	b.n	80017ce <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	085b      	lsrs	r3, r3, #1
 80017b6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	61bb      	str	r3, [r7, #24]
        break;
 80017c6:	e002      	b.n	80017ce <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	75fb      	strb	r3, [r7, #23]
        break;
 80017cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	2b0f      	cmp	r3, #15
 80017d2:	d916      	bls.n	8001802 <UART_SetConfig+0x452>
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017da:	d212      	bcs.n	8001802 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	b29b      	uxth	r3, r3
 80017e0:	f023 030f 	bic.w	r3, r3, #15
 80017e4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	085b      	lsrs	r3, r3, #1
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	897b      	ldrh	r3, [r7, #10]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	897a      	ldrh	r2, [r7, #10]
 80017fe:	60da      	str	r2, [r3, #12]
 8001800:	e070      	b.n	80018e4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	75fb      	strb	r3, [r7, #23]
 8001806:	e06d      	b.n	80018e4 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8001808:	7ffb      	ldrb	r3, [r7, #31]
 800180a:	2b08      	cmp	r3, #8
 800180c:	d859      	bhi.n	80018c2 <UART_SetConfig+0x512>
 800180e:	a201      	add	r2, pc, #4	; (adr r2, 8001814 <UART_SetConfig+0x464>)
 8001810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001814:	08001839 	.word	0x08001839
 8001818:	08001857 	.word	0x08001857
 800181c:	08001875 	.word	0x08001875
 8001820:	080018c3 	.word	0x080018c3
 8001824:	0800188d 	.word	0x0800188d
 8001828:	080018c3 	.word	0x080018c3
 800182c:	080018c3 	.word	0x080018c3
 8001830:	080018c3 	.word	0x080018c3
 8001834:	080018ab 	.word	0x080018ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001838:	f7ff fcb2 	bl	80011a0 <HAL_RCC_GetPCLK1Freq>
 800183c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	085a      	lsrs	r2, r3, #1
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	441a      	add	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001850:	b29b      	uxth	r3, r3
 8001852:	61bb      	str	r3, [r7, #24]
        break;
 8001854:	e038      	b.n	80018c8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001856:	f7ff fcb7 	bl	80011c8 <HAL_RCC_GetPCLK2Freq>
 800185a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	085a      	lsrs	r2, r3, #1
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	441a      	add	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	fbb2 f3f3 	udiv	r3, r2, r3
 800186e:	b29b      	uxth	r3, r3
 8001870:	61bb      	str	r3, [r7, #24]
        break;
 8001872:	e029      	b.n	80018c8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	085a      	lsrs	r2, r3, #1
 800187a:	4b21      	ldr	r3, [pc, #132]	; (8001900 <UART_SetConfig+0x550>)
 800187c:	4413      	add	r3, r2
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	6852      	ldr	r2, [r2, #4]
 8001882:	fbb3 f3f2 	udiv	r3, r3, r2
 8001886:	b29b      	uxth	r3, r3
 8001888:	61bb      	str	r3, [r7, #24]
        break;
 800188a:	e01d      	b.n	80018c8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800188c:	f7ff fba4 	bl	8000fd8 <HAL_RCC_GetSysClockFreq>
 8001890:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	085a      	lsrs	r2, r3, #1
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	441a      	add	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	61bb      	str	r3, [r7, #24]
        break;
 80018a8:	e00e      	b.n	80018c8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	085b      	lsrs	r3, r3, #1
 80018b0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018bc:	b29b      	uxth	r3, r3
 80018be:	61bb      	str	r3, [r7, #24]
        break;
 80018c0:	e002      	b.n	80018c8 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	75fb      	strb	r3, [r7, #23]
        break;
 80018c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	2b0f      	cmp	r3, #15
 80018cc:	d908      	bls.n	80018e0 <UART_SetConfig+0x530>
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d4:	d204      	bcs.n	80018e0 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	e001      	b.n	80018e4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80018f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3720      	adds	r7, #32
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	01e84800 	.word	0x01e84800
 8001900:	00f42400 	.word	0x00f42400

08001904 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b00      	cmp	r3, #0
 8001916:	d00a      	beq.n	800192e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	430a      	orrs	r2, r1
 800192c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00a      	beq.n	8001950 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	430a      	orrs	r2, r1
 800194e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	2b00      	cmp	r3, #0
 800195a:	d00a      	beq.n	8001972 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	430a      	orrs	r2, r1
 8001970:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	2b00      	cmp	r3, #0
 800197c:	d00a      	beq.n	8001994 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	430a      	orrs	r2, r1
 8001992:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001998:	f003 0310 	and.w	r3, r3, #16
 800199c:	2b00      	cmp	r3, #0
 800199e:	d00a      	beq.n	80019b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	430a      	orrs	r2, r1
 80019b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ba:	f003 0320 	and.w	r3, r3, #32
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d00a      	beq.n	80019d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d01a      	beq.n	8001a1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	430a      	orrs	r2, r1
 80019f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a02:	d10a      	bne.n	8001a1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	430a      	orrs	r2, r1
 8001a18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00a      	beq.n	8001a3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	605a      	str	r2, [r3, #4]
  }
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af02      	add	r7, sp, #8
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8001a56:	f7fe fff7 	bl	8000a48 <HAL_GetTick>
 8001a5a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0308 	and.w	r3, r3, #8
 8001a66:	2b08      	cmp	r3, #8
 8001a68:	d10e      	bne.n	8001a88 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a6a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 f82a 	bl	8001ad2 <UART_WaitOnFlagUntilTimeout>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e020      	b.n	8001aca <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	d10e      	bne.n	8001ab4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a96:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f814 	bl	8001ad2 <UART_WaitOnFlagUntilTimeout>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e00a      	b.n	8001aca <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2220      	movs	r2, #32
 8001ab8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2220      	movs	r2, #32
 8001abe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b084      	sub	sp, #16
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	60f8      	str	r0, [r7, #12]
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	603b      	str	r3, [r7, #0]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ae2:	e05d      	b.n	8001ba0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aea:	d059      	beq.n	8001ba0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aec:	f7fe ffac 	bl	8000a48 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d302      	bcc.n	8001b02 <UART_WaitOnFlagUntilTimeout+0x30>
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d11b      	bne.n	8001b3a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001b10:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 0201 	bic.w	r2, r2, #1
 8001b20:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2220      	movs	r2, #32
 8001b26:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e042      	b.n	8001bc0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d02b      	beq.n	8001ba0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b56:	d123      	bne.n	8001ba0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b60:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001b70:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 0201 	bic.w	r2, r2, #1
 8001b80:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2220      	movs	r2, #32
 8001b86:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2220      	movs	r2, #32
 8001b92:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e00f      	b.n	8001bc0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	69da      	ldr	r2, [r3, #28]
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	bf0c      	ite	eq
 8001bb0:	2301      	moveq	r3, #1
 8001bb2:	2300      	movne	r3, #0
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d092      	beq.n	8001ae4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3710      	adds	r7, #16
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <__errno>:
 8001bc8:	4b01      	ldr	r3, [pc, #4]	; (8001bd0 <__errno+0x8>)
 8001bca:	6818      	ldr	r0, [r3, #0]
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	2000006c 	.word	0x2000006c

08001bd4 <__libc_init_array>:
 8001bd4:	b570      	push	{r4, r5, r6, lr}
 8001bd6:	4e0d      	ldr	r6, [pc, #52]	; (8001c0c <__libc_init_array+0x38>)
 8001bd8:	4c0d      	ldr	r4, [pc, #52]	; (8001c10 <__libc_init_array+0x3c>)
 8001bda:	1ba4      	subs	r4, r4, r6
 8001bdc:	10a4      	asrs	r4, r4, #2
 8001bde:	2500      	movs	r5, #0
 8001be0:	42a5      	cmp	r5, r4
 8001be2:	d109      	bne.n	8001bf8 <__libc_init_array+0x24>
 8001be4:	4e0b      	ldr	r6, [pc, #44]	; (8001c14 <__libc_init_array+0x40>)
 8001be6:	4c0c      	ldr	r4, [pc, #48]	; (8001c18 <__libc_init_array+0x44>)
 8001be8:	f001 ffce 	bl	8003b88 <_init>
 8001bec:	1ba4      	subs	r4, r4, r6
 8001bee:	10a4      	asrs	r4, r4, #2
 8001bf0:	2500      	movs	r5, #0
 8001bf2:	42a5      	cmp	r5, r4
 8001bf4:	d105      	bne.n	8001c02 <__libc_init_array+0x2e>
 8001bf6:	bd70      	pop	{r4, r5, r6, pc}
 8001bf8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001bfc:	4798      	blx	r3
 8001bfe:	3501      	adds	r5, #1
 8001c00:	e7ee      	b.n	8001be0 <__libc_init_array+0xc>
 8001c02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c06:	4798      	blx	r3
 8001c08:	3501      	adds	r5, #1
 8001c0a:	e7f2      	b.n	8001bf2 <__libc_init_array+0x1e>
 8001c0c:	08003e58 	.word	0x08003e58
 8001c10:	08003e58 	.word	0x08003e58
 8001c14:	08003e58 	.word	0x08003e58
 8001c18:	08003e5c 	.word	0x08003e5c

08001c1c <memset>:
 8001c1c:	4402      	add	r2, r0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d100      	bne.n	8001c26 <memset+0xa>
 8001c24:	4770      	bx	lr
 8001c26:	f803 1b01 	strb.w	r1, [r3], #1
 8001c2a:	e7f9      	b.n	8001c20 <memset+0x4>

08001c2c <__cvt>:
 8001c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c2e:	ed2d 8b02 	vpush	{d8}
 8001c32:	eeb0 8b40 	vmov.f64	d8, d0
 8001c36:	b085      	sub	sp, #20
 8001c38:	4617      	mov	r7, r2
 8001c3a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8001c3c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8001c3e:	ee18 2a90 	vmov	r2, s17
 8001c42:	f025 0520 	bic.w	r5, r5, #32
 8001c46:	2a00      	cmp	r2, #0
 8001c48:	bfb6      	itet	lt
 8001c4a:	222d      	movlt	r2, #45	; 0x2d
 8001c4c:	2200      	movge	r2, #0
 8001c4e:	eeb1 8b40 	vneglt.f64	d8, d0
 8001c52:	2d46      	cmp	r5, #70	; 0x46
 8001c54:	460c      	mov	r4, r1
 8001c56:	701a      	strb	r2, [r3, #0]
 8001c58:	d004      	beq.n	8001c64 <__cvt+0x38>
 8001c5a:	2d45      	cmp	r5, #69	; 0x45
 8001c5c:	d100      	bne.n	8001c60 <__cvt+0x34>
 8001c5e:	3401      	adds	r4, #1
 8001c60:	2102      	movs	r1, #2
 8001c62:	e000      	b.n	8001c66 <__cvt+0x3a>
 8001c64:	2103      	movs	r1, #3
 8001c66:	ab03      	add	r3, sp, #12
 8001c68:	9301      	str	r3, [sp, #4]
 8001c6a:	ab02      	add	r3, sp, #8
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	4622      	mov	r2, r4
 8001c70:	4633      	mov	r3, r6
 8001c72:	eeb0 0b48 	vmov.f64	d0, d8
 8001c76:	f000 fcbf 	bl	80025f8 <_dtoa_r>
 8001c7a:	2d47      	cmp	r5, #71	; 0x47
 8001c7c:	d101      	bne.n	8001c82 <__cvt+0x56>
 8001c7e:	07fb      	lsls	r3, r7, #31
 8001c80:	d51e      	bpl.n	8001cc0 <__cvt+0x94>
 8001c82:	2d46      	cmp	r5, #70	; 0x46
 8001c84:	eb00 0304 	add.w	r3, r0, r4
 8001c88:	d10c      	bne.n	8001ca4 <__cvt+0x78>
 8001c8a:	7802      	ldrb	r2, [r0, #0]
 8001c8c:	2a30      	cmp	r2, #48	; 0x30
 8001c8e:	d107      	bne.n	8001ca0 <__cvt+0x74>
 8001c90:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8001c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c98:	bf1c      	itt	ne
 8001c9a:	f1c4 0401 	rsbne	r4, r4, #1
 8001c9e:	6034      	strne	r4, [r6, #0]
 8001ca0:	6832      	ldr	r2, [r6, #0]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8001ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cac:	d007      	beq.n	8001cbe <__cvt+0x92>
 8001cae:	2130      	movs	r1, #48	; 0x30
 8001cb0:	9a03      	ldr	r2, [sp, #12]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d204      	bcs.n	8001cc0 <__cvt+0x94>
 8001cb6:	1c54      	adds	r4, r2, #1
 8001cb8:	9403      	str	r4, [sp, #12]
 8001cba:	7011      	strb	r1, [r2, #0]
 8001cbc:	e7f8      	b.n	8001cb0 <__cvt+0x84>
 8001cbe:	9303      	str	r3, [sp, #12]
 8001cc0:	9b03      	ldr	r3, [sp, #12]
 8001cc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001cc4:	1a1b      	subs	r3, r3, r0
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	b005      	add	sp, #20
 8001cca:	ecbd 8b02 	vpop	{d8}
 8001cce:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cd0 <__exponent>:
 8001cd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001cd2:	2900      	cmp	r1, #0
 8001cd4:	4604      	mov	r4, r0
 8001cd6:	bfba      	itte	lt
 8001cd8:	4249      	neglt	r1, r1
 8001cda:	232d      	movlt	r3, #45	; 0x2d
 8001cdc:	232b      	movge	r3, #43	; 0x2b
 8001cde:	2909      	cmp	r1, #9
 8001ce0:	f804 2b02 	strb.w	r2, [r4], #2
 8001ce4:	7043      	strb	r3, [r0, #1]
 8001ce6:	dd20      	ble.n	8001d2a <__exponent+0x5a>
 8001ce8:	f10d 0307 	add.w	r3, sp, #7
 8001cec:	461f      	mov	r7, r3
 8001cee:	260a      	movs	r6, #10
 8001cf0:	fb91 f5f6 	sdiv	r5, r1, r6
 8001cf4:	fb06 1115 	mls	r1, r6, r5, r1
 8001cf8:	3130      	adds	r1, #48	; 0x30
 8001cfa:	2d09      	cmp	r5, #9
 8001cfc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8001d00:	f103 32ff 	add.w	r2, r3, #4294967295
 8001d04:	4629      	mov	r1, r5
 8001d06:	dc09      	bgt.n	8001d1c <__exponent+0x4c>
 8001d08:	3130      	adds	r1, #48	; 0x30
 8001d0a:	3b02      	subs	r3, #2
 8001d0c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8001d10:	42bb      	cmp	r3, r7
 8001d12:	4622      	mov	r2, r4
 8001d14:	d304      	bcc.n	8001d20 <__exponent+0x50>
 8001d16:	1a10      	subs	r0, r2, r0
 8001d18:	b003      	add	sp, #12
 8001d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	e7e7      	b.n	8001cf0 <__exponent+0x20>
 8001d20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001d24:	f804 2b01 	strb.w	r2, [r4], #1
 8001d28:	e7f2      	b.n	8001d10 <__exponent+0x40>
 8001d2a:	2330      	movs	r3, #48	; 0x30
 8001d2c:	4419      	add	r1, r3
 8001d2e:	7083      	strb	r3, [r0, #2]
 8001d30:	1d02      	adds	r2, r0, #4
 8001d32:	70c1      	strb	r1, [r0, #3]
 8001d34:	e7ef      	b.n	8001d16 <__exponent+0x46>
	...

08001d38 <_printf_float>:
 8001d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d3c:	b08d      	sub	sp, #52	; 0x34
 8001d3e:	460c      	mov	r4, r1
 8001d40:	4616      	mov	r6, r2
 8001d42:	461f      	mov	r7, r3
 8001d44:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8001d48:	4605      	mov	r5, r0
 8001d4a:	f001 f9a1 	bl	8003090 <_localeconv_r>
 8001d4e:	f8d0 b000 	ldr.w	fp, [r0]
 8001d52:	4658      	mov	r0, fp
 8001d54:	f7fe fa74 	bl	8000240 <strlen>
 8001d58:	2300      	movs	r3, #0
 8001d5a:	930a      	str	r3, [sp, #40]	; 0x28
 8001d5c:	f8d8 3000 	ldr.w	r3, [r8]
 8001d60:	9005      	str	r0, [sp, #20]
 8001d62:	3307      	adds	r3, #7
 8001d64:	f023 0307 	bic.w	r3, r3, #7
 8001d68:	f103 0108 	add.w	r1, r3, #8
 8001d6c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8001d70:	6822      	ldr	r2, [r4, #0]
 8001d72:	f8c8 1000 	str.w	r1, [r8]
 8001d76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d7a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8001d7e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8002008 <_printf_float+0x2d0>
 8001d82:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8001d86:	eeb0 6bc0 	vabs.f64	d6, d0
 8001d8a:	eeb4 6b47 	vcmp.f64	d6, d7
 8001d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d92:	dd24      	ble.n	8001dde <_printf_float+0xa6>
 8001d94:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8001d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9c:	d502      	bpl.n	8001da4 <_printf_float+0x6c>
 8001d9e:	232d      	movs	r3, #45	; 0x2d
 8001da0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001da4:	499a      	ldr	r1, [pc, #616]	; (8002010 <_printf_float+0x2d8>)
 8001da6:	4b9b      	ldr	r3, [pc, #620]	; (8002014 <_printf_float+0x2dc>)
 8001da8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8001dac:	bf8c      	ite	hi
 8001dae:	4688      	movhi	r8, r1
 8001db0:	4698      	movls	r8, r3
 8001db2:	f022 0204 	bic.w	r2, r2, #4
 8001db6:	2303      	movs	r3, #3
 8001db8:	6123      	str	r3, [r4, #16]
 8001dba:	6022      	str	r2, [r4, #0]
 8001dbc:	f04f 0a00 	mov.w	sl, #0
 8001dc0:	9700      	str	r7, [sp, #0]
 8001dc2:	4633      	mov	r3, r6
 8001dc4:	aa0b      	add	r2, sp, #44	; 0x2c
 8001dc6:	4621      	mov	r1, r4
 8001dc8:	4628      	mov	r0, r5
 8001dca:	f000 f9e1 	bl	8002190 <_printf_common>
 8001dce:	3001      	adds	r0, #1
 8001dd0:	f040 8089 	bne.w	8001ee6 <_printf_float+0x1ae>
 8001dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd8:	b00d      	add	sp, #52	; 0x34
 8001dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001dde:	eeb4 0b40 	vcmp.f64	d0, d0
 8001de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de6:	d702      	bvc.n	8001dee <_printf_float+0xb6>
 8001de8:	498b      	ldr	r1, [pc, #556]	; (8002018 <_printf_float+0x2e0>)
 8001dea:	4b8c      	ldr	r3, [pc, #560]	; (800201c <_printf_float+0x2e4>)
 8001dec:	e7dc      	b.n	8001da8 <_printf_float+0x70>
 8001dee:	6861      	ldr	r1, [r4, #4]
 8001df0:	1c4b      	adds	r3, r1, #1
 8001df2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001df6:	ab0a      	add	r3, sp, #40	; 0x28
 8001df8:	a809      	add	r0, sp, #36	; 0x24
 8001dfa:	d13b      	bne.n	8001e74 <_printf_float+0x13c>
 8001dfc:	2106      	movs	r1, #6
 8001dfe:	6061      	str	r1, [r4, #4]
 8001e00:	f04f 0c00 	mov.w	ip, #0
 8001e04:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8001e08:	e9cd 0900 	strd	r0, r9, [sp]
 8001e0c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8001e10:	6022      	str	r2, [r4, #0]
 8001e12:	6861      	ldr	r1, [r4, #4]
 8001e14:	4628      	mov	r0, r5
 8001e16:	f7ff ff09 	bl	8001c2c <__cvt>
 8001e1a:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8001e1e:	2b47      	cmp	r3, #71	; 0x47
 8001e20:	4680      	mov	r8, r0
 8001e22:	d109      	bne.n	8001e38 <_printf_float+0x100>
 8001e24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e26:	1cd8      	adds	r0, r3, #3
 8001e28:	db02      	blt.n	8001e30 <_printf_float+0xf8>
 8001e2a:	6862      	ldr	r2, [r4, #4]
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	dd47      	ble.n	8001ec0 <_printf_float+0x188>
 8001e30:	f1a9 0902 	sub.w	r9, r9, #2
 8001e34:	fa5f f989 	uxtb.w	r9, r9
 8001e38:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8001e3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001e3e:	d824      	bhi.n	8001e8a <_printf_float+0x152>
 8001e40:	3901      	subs	r1, #1
 8001e42:	464a      	mov	r2, r9
 8001e44:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8001e48:	9109      	str	r1, [sp, #36]	; 0x24
 8001e4a:	f7ff ff41 	bl	8001cd0 <__exponent>
 8001e4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001e50:	1813      	adds	r3, r2, r0
 8001e52:	2a01      	cmp	r2, #1
 8001e54:	4682      	mov	sl, r0
 8001e56:	6123      	str	r3, [r4, #16]
 8001e58:	dc02      	bgt.n	8001e60 <_printf_float+0x128>
 8001e5a:	6822      	ldr	r2, [r4, #0]
 8001e5c:	07d1      	lsls	r1, r2, #31
 8001e5e:	d501      	bpl.n	8001e64 <_printf_float+0x12c>
 8001e60:	3301      	adds	r3, #1
 8001e62:	6123      	str	r3, [r4, #16]
 8001e64:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0a9      	beq.n	8001dc0 <_printf_float+0x88>
 8001e6c:	232d      	movs	r3, #45	; 0x2d
 8001e6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e72:	e7a5      	b.n	8001dc0 <_printf_float+0x88>
 8001e74:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8001e78:	f000 8178 	beq.w	800216c <_printf_float+0x434>
 8001e7c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8001e80:	d1be      	bne.n	8001e00 <_printf_float+0xc8>
 8001e82:	2900      	cmp	r1, #0
 8001e84:	d1bc      	bne.n	8001e00 <_printf_float+0xc8>
 8001e86:	2101      	movs	r1, #1
 8001e88:	e7b9      	b.n	8001dfe <_printf_float+0xc6>
 8001e8a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8001e8e:	d119      	bne.n	8001ec4 <_printf_float+0x18c>
 8001e90:	2900      	cmp	r1, #0
 8001e92:	6863      	ldr	r3, [r4, #4]
 8001e94:	dd0c      	ble.n	8001eb0 <_printf_float+0x178>
 8001e96:	6121      	str	r1, [r4, #16]
 8001e98:	b913      	cbnz	r3, 8001ea0 <_printf_float+0x168>
 8001e9a:	6822      	ldr	r2, [r4, #0]
 8001e9c:	07d2      	lsls	r2, r2, #31
 8001e9e:	d502      	bpl.n	8001ea6 <_printf_float+0x16e>
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	440b      	add	r3, r1
 8001ea4:	6123      	str	r3, [r4, #16]
 8001ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ea8:	65a3      	str	r3, [r4, #88]	; 0x58
 8001eaa:	f04f 0a00 	mov.w	sl, #0
 8001eae:	e7d9      	b.n	8001e64 <_printf_float+0x12c>
 8001eb0:	b913      	cbnz	r3, 8001eb8 <_printf_float+0x180>
 8001eb2:	6822      	ldr	r2, [r4, #0]
 8001eb4:	07d0      	lsls	r0, r2, #31
 8001eb6:	d501      	bpl.n	8001ebc <_printf_float+0x184>
 8001eb8:	3302      	adds	r3, #2
 8001eba:	e7f3      	b.n	8001ea4 <_printf_float+0x16c>
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e7f1      	b.n	8001ea4 <_printf_float+0x16c>
 8001ec0:	f04f 0967 	mov.w	r9, #103	; 0x67
 8001ec4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	db05      	blt.n	8001ed8 <_printf_float+0x1a0>
 8001ecc:	6822      	ldr	r2, [r4, #0]
 8001ece:	6123      	str	r3, [r4, #16]
 8001ed0:	07d1      	lsls	r1, r2, #31
 8001ed2:	d5e8      	bpl.n	8001ea6 <_printf_float+0x16e>
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	e7e5      	b.n	8001ea4 <_printf_float+0x16c>
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	bfd4      	ite	le
 8001edc:	f1c3 0302 	rsble	r3, r3, #2
 8001ee0:	2301      	movgt	r3, #1
 8001ee2:	4413      	add	r3, r2
 8001ee4:	e7de      	b.n	8001ea4 <_printf_float+0x16c>
 8001ee6:	6823      	ldr	r3, [r4, #0]
 8001ee8:	055a      	lsls	r2, r3, #21
 8001eea:	d407      	bmi.n	8001efc <_printf_float+0x1c4>
 8001eec:	6923      	ldr	r3, [r4, #16]
 8001eee:	4642      	mov	r2, r8
 8001ef0:	4631      	mov	r1, r6
 8001ef2:	4628      	mov	r0, r5
 8001ef4:	47b8      	blx	r7
 8001ef6:	3001      	adds	r0, #1
 8001ef8:	d12a      	bne.n	8001f50 <_printf_float+0x218>
 8001efa:	e76b      	b.n	8001dd4 <_printf_float+0x9c>
 8001efc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8001f00:	f240 80de 	bls.w	80020c0 <_printf_float+0x388>
 8001f04:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8001f08:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f10:	d133      	bne.n	8001f7a <_printf_float+0x242>
 8001f12:	2301      	movs	r3, #1
 8001f14:	4a42      	ldr	r2, [pc, #264]	; (8002020 <_printf_float+0x2e8>)
 8001f16:	4631      	mov	r1, r6
 8001f18:	4628      	mov	r0, r5
 8001f1a:	47b8      	blx	r7
 8001f1c:	3001      	adds	r0, #1
 8001f1e:	f43f af59 	beq.w	8001dd4 <_printf_float+0x9c>
 8001f22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8001f26:	429a      	cmp	r2, r3
 8001f28:	db02      	blt.n	8001f30 <_printf_float+0x1f8>
 8001f2a:	6823      	ldr	r3, [r4, #0]
 8001f2c:	07d8      	lsls	r0, r3, #31
 8001f2e:	d50f      	bpl.n	8001f50 <_printf_float+0x218>
 8001f30:	9b05      	ldr	r3, [sp, #20]
 8001f32:	465a      	mov	r2, fp
 8001f34:	4631      	mov	r1, r6
 8001f36:	4628      	mov	r0, r5
 8001f38:	47b8      	blx	r7
 8001f3a:	3001      	adds	r0, #1
 8001f3c:	f43f af4a 	beq.w	8001dd4 <_printf_float+0x9c>
 8001f40:	f04f 0800 	mov.w	r8, #0
 8001f44:	f104 091a 	add.w	r9, r4, #26
 8001f48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	4543      	cmp	r3, r8
 8001f4e:	dc09      	bgt.n	8001f64 <_printf_float+0x22c>
 8001f50:	6823      	ldr	r3, [r4, #0]
 8001f52:	079b      	lsls	r3, r3, #30
 8001f54:	f100 8105 	bmi.w	8002162 <_printf_float+0x42a>
 8001f58:	68e0      	ldr	r0, [r4, #12]
 8001f5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001f5c:	4298      	cmp	r0, r3
 8001f5e:	bfb8      	it	lt
 8001f60:	4618      	movlt	r0, r3
 8001f62:	e739      	b.n	8001dd8 <_printf_float+0xa0>
 8001f64:	2301      	movs	r3, #1
 8001f66:	464a      	mov	r2, r9
 8001f68:	4631      	mov	r1, r6
 8001f6a:	4628      	mov	r0, r5
 8001f6c:	47b8      	blx	r7
 8001f6e:	3001      	adds	r0, #1
 8001f70:	f43f af30 	beq.w	8001dd4 <_printf_float+0x9c>
 8001f74:	f108 0801 	add.w	r8, r8, #1
 8001f78:	e7e6      	b.n	8001f48 <_printf_float+0x210>
 8001f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	dc2b      	bgt.n	8001fd8 <_printf_float+0x2a0>
 8001f80:	2301      	movs	r3, #1
 8001f82:	4a27      	ldr	r2, [pc, #156]	; (8002020 <_printf_float+0x2e8>)
 8001f84:	4631      	mov	r1, r6
 8001f86:	4628      	mov	r0, r5
 8001f88:	47b8      	blx	r7
 8001f8a:	3001      	adds	r0, #1
 8001f8c:	f43f af22 	beq.w	8001dd4 <_printf_float+0x9c>
 8001f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f92:	b923      	cbnz	r3, 8001f9e <_printf_float+0x266>
 8001f94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001f96:	b913      	cbnz	r3, 8001f9e <_printf_float+0x266>
 8001f98:	6823      	ldr	r3, [r4, #0]
 8001f9a:	07d9      	lsls	r1, r3, #31
 8001f9c:	d5d8      	bpl.n	8001f50 <_printf_float+0x218>
 8001f9e:	9b05      	ldr	r3, [sp, #20]
 8001fa0:	465a      	mov	r2, fp
 8001fa2:	4631      	mov	r1, r6
 8001fa4:	4628      	mov	r0, r5
 8001fa6:	47b8      	blx	r7
 8001fa8:	3001      	adds	r0, #1
 8001faa:	f43f af13 	beq.w	8001dd4 <_printf_float+0x9c>
 8001fae:	f04f 0900 	mov.w	r9, #0
 8001fb2:	f104 0a1a 	add.w	sl, r4, #26
 8001fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001fb8:	425b      	negs	r3, r3
 8001fba:	454b      	cmp	r3, r9
 8001fbc:	dc01      	bgt.n	8001fc2 <_printf_float+0x28a>
 8001fbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001fc0:	e795      	b.n	8001eee <_printf_float+0x1b6>
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	4652      	mov	r2, sl
 8001fc6:	4631      	mov	r1, r6
 8001fc8:	4628      	mov	r0, r5
 8001fca:	47b8      	blx	r7
 8001fcc:	3001      	adds	r0, #1
 8001fce:	f43f af01 	beq.w	8001dd4 <_printf_float+0x9c>
 8001fd2:	f109 0901 	add.w	r9, r9, #1
 8001fd6:	e7ee      	b.n	8001fb6 <_printf_float+0x27e>
 8001fd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001fda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	bfa8      	it	ge
 8001fe0:	461a      	movge	r2, r3
 8001fe2:	2a00      	cmp	r2, #0
 8001fe4:	4691      	mov	r9, r2
 8001fe6:	dd07      	ble.n	8001ff8 <_printf_float+0x2c0>
 8001fe8:	4613      	mov	r3, r2
 8001fea:	4631      	mov	r1, r6
 8001fec:	4642      	mov	r2, r8
 8001fee:	4628      	mov	r0, r5
 8001ff0:	47b8      	blx	r7
 8001ff2:	3001      	adds	r0, #1
 8001ff4:	f43f aeee 	beq.w	8001dd4 <_printf_float+0x9c>
 8001ff8:	f104 031a 	add.w	r3, r4, #26
 8001ffc:	f04f 0a00 	mov.w	sl, #0
 8002000:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002004:	9307      	str	r3, [sp, #28]
 8002006:	e017      	b.n	8002038 <_printf_float+0x300>
 8002008:	ffffffff 	.word	0xffffffff
 800200c:	7fefffff 	.word	0x7fefffff
 8002010:	08003bf4 	.word	0x08003bf4
 8002014:	08003bf0 	.word	0x08003bf0
 8002018:	08003bfc 	.word	0x08003bfc
 800201c:	08003bf8 	.word	0x08003bf8
 8002020:	08003c00 	.word	0x08003c00
 8002024:	2301      	movs	r3, #1
 8002026:	9a07      	ldr	r2, [sp, #28]
 8002028:	4631      	mov	r1, r6
 800202a:	4628      	mov	r0, r5
 800202c:	47b8      	blx	r7
 800202e:	3001      	adds	r0, #1
 8002030:	f43f aed0 	beq.w	8001dd4 <_printf_float+0x9c>
 8002034:	f10a 0a01 	add.w	sl, sl, #1
 8002038:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800203a:	9306      	str	r3, [sp, #24]
 800203c:	eba3 0309 	sub.w	r3, r3, r9
 8002040:	4553      	cmp	r3, sl
 8002042:	dcef      	bgt.n	8002024 <_printf_float+0x2ec>
 8002044:	9b06      	ldr	r3, [sp, #24]
 8002046:	4498      	add	r8, r3
 8002048:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800204c:	429a      	cmp	r2, r3
 800204e:	db15      	blt.n	800207c <_printf_float+0x344>
 8002050:	6823      	ldr	r3, [r4, #0]
 8002052:	07da      	lsls	r2, r3, #31
 8002054:	d412      	bmi.n	800207c <_printf_float+0x344>
 8002056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002058:	9a06      	ldr	r2, [sp, #24]
 800205a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800205c:	1a9a      	subs	r2, r3, r2
 800205e:	eba3 0a01 	sub.w	sl, r3, r1
 8002062:	4592      	cmp	sl, r2
 8002064:	bfa8      	it	ge
 8002066:	4692      	movge	sl, r2
 8002068:	f1ba 0f00 	cmp.w	sl, #0
 800206c:	dc0e      	bgt.n	800208c <_printf_float+0x354>
 800206e:	f04f 0800 	mov.w	r8, #0
 8002072:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8002076:	f104 091a 	add.w	r9, r4, #26
 800207a:	e019      	b.n	80020b0 <_printf_float+0x378>
 800207c:	9b05      	ldr	r3, [sp, #20]
 800207e:	465a      	mov	r2, fp
 8002080:	4631      	mov	r1, r6
 8002082:	4628      	mov	r0, r5
 8002084:	47b8      	blx	r7
 8002086:	3001      	adds	r0, #1
 8002088:	d1e5      	bne.n	8002056 <_printf_float+0x31e>
 800208a:	e6a3      	b.n	8001dd4 <_printf_float+0x9c>
 800208c:	4653      	mov	r3, sl
 800208e:	4642      	mov	r2, r8
 8002090:	4631      	mov	r1, r6
 8002092:	4628      	mov	r0, r5
 8002094:	47b8      	blx	r7
 8002096:	3001      	adds	r0, #1
 8002098:	d1e9      	bne.n	800206e <_printf_float+0x336>
 800209a:	e69b      	b.n	8001dd4 <_printf_float+0x9c>
 800209c:	2301      	movs	r3, #1
 800209e:	464a      	mov	r2, r9
 80020a0:	4631      	mov	r1, r6
 80020a2:	4628      	mov	r0, r5
 80020a4:	47b8      	blx	r7
 80020a6:	3001      	adds	r0, #1
 80020a8:	f43f ae94 	beq.w	8001dd4 <_printf_float+0x9c>
 80020ac:	f108 0801 	add.w	r8, r8, #1
 80020b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80020b4:	1a9b      	subs	r3, r3, r2
 80020b6:	eba3 030a 	sub.w	r3, r3, sl
 80020ba:	4543      	cmp	r3, r8
 80020bc:	dcee      	bgt.n	800209c <_printf_float+0x364>
 80020be:	e747      	b.n	8001f50 <_printf_float+0x218>
 80020c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80020c2:	2a01      	cmp	r2, #1
 80020c4:	dc01      	bgt.n	80020ca <_printf_float+0x392>
 80020c6:	07db      	lsls	r3, r3, #31
 80020c8:	d539      	bpl.n	800213e <_printf_float+0x406>
 80020ca:	2301      	movs	r3, #1
 80020cc:	4642      	mov	r2, r8
 80020ce:	4631      	mov	r1, r6
 80020d0:	4628      	mov	r0, r5
 80020d2:	47b8      	blx	r7
 80020d4:	3001      	adds	r0, #1
 80020d6:	f43f ae7d 	beq.w	8001dd4 <_printf_float+0x9c>
 80020da:	9b05      	ldr	r3, [sp, #20]
 80020dc:	465a      	mov	r2, fp
 80020de:	4631      	mov	r1, r6
 80020e0:	4628      	mov	r0, r5
 80020e2:	47b8      	blx	r7
 80020e4:	3001      	adds	r0, #1
 80020e6:	f108 0801 	add.w	r8, r8, #1
 80020ea:	f43f ae73 	beq.w	8001dd4 <_printf_float+0x9c>
 80020ee:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80020f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80020f4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80020f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020fc:	f103 33ff 	add.w	r3, r3, #4294967295
 8002100:	d018      	beq.n	8002134 <_printf_float+0x3fc>
 8002102:	4642      	mov	r2, r8
 8002104:	4631      	mov	r1, r6
 8002106:	4628      	mov	r0, r5
 8002108:	47b8      	blx	r7
 800210a:	3001      	adds	r0, #1
 800210c:	d10e      	bne.n	800212c <_printf_float+0x3f4>
 800210e:	e661      	b.n	8001dd4 <_printf_float+0x9c>
 8002110:	2301      	movs	r3, #1
 8002112:	464a      	mov	r2, r9
 8002114:	4631      	mov	r1, r6
 8002116:	4628      	mov	r0, r5
 8002118:	47b8      	blx	r7
 800211a:	3001      	adds	r0, #1
 800211c:	f43f ae5a 	beq.w	8001dd4 <_printf_float+0x9c>
 8002120:	f108 0801 	add.w	r8, r8, #1
 8002124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002126:	3b01      	subs	r3, #1
 8002128:	4543      	cmp	r3, r8
 800212a:	dcf1      	bgt.n	8002110 <_printf_float+0x3d8>
 800212c:	4653      	mov	r3, sl
 800212e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002132:	e6dd      	b.n	8001ef0 <_printf_float+0x1b8>
 8002134:	f04f 0800 	mov.w	r8, #0
 8002138:	f104 091a 	add.w	r9, r4, #26
 800213c:	e7f2      	b.n	8002124 <_printf_float+0x3ec>
 800213e:	2301      	movs	r3, #1
 8002140:	e7df      	b.n	8002102 <_printf_float+0x3ca>
 8002142:	2301      	movs	r3, #1
 8002144:	464a      	mov	r2, r9
 8002146:	4631      	mov	r1, r6
 8002148:	4628      	mov	r0, r5
 800214a:	47b8      	blx	r7
 800214c:	3001      	adds	r0, #1
 800214e:	f43f ae41 	beq.w	8001dd4 <_printf_float+0x9c>
 8002152:	f108 0801 	add.w	r8, r8, #1
 8002156:	68e3      	ldr	r3, [r4, #12]
 8002158:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800215a:	1a9b      	subs	r3, r3, r2
 800215c:	4543      	cmp	r3, r8
 800215e:	dcf0      	bgt.n	8002142 <_printf_float+0x40a>
 8002160:	e6fa      	b.n	8001f58 <_printf_float+0x220>
 8002162:	f04f 0800 	mov.w	r8, #0
 8002166:	f104 0919 	add.w	r9, r4, #25
 800216a:	e7f4      	b.n	8002156 <_printf_float+0x41e>
 800216c:	2900      	cmp	r1, #0
 800216e:	f43f ae8a 	beq.w	8001e86 <_printf_float+0x14e>
 8002172:	f04f 0c00 	mov.w	ip, #0
 8002176:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800217a:	e9cd 0900 	strd	r0, r9, [sp]
 800217e:	6022      	str	r2, [r4, #0]
 8002180:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002184:	4628      	mov	r0, r5
 8002186:	f7ff fd51 	bl	8001c2c <__cvt>
 800218a:	4680      	mov	r8, r0
 800218c:	e64a      	b.n	8001e24 <_printf_float+0xec>
 800218e:	bf00      	nop

08002190 <_printf_common>:
 8002190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002194:	4691      	mov	r9, r2
 8002196:	461f      	mov	r7, r3
 8002198:	688a      	ldr	r2, [r1, #8]
 800219a:	690b      	ldr	r3, [r1, #16]
 800219c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80021a0:	4293      	cmp	r3, r2
 80021a2:	bfb8      	it	lt
 80021a4:	4613      	movlt	r3, r2
 80021a6:	f8c9 3000 	str.w	r3, [r9]
 80021aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80021ae:	4606      	mov	r6, r0
 80021b0:	460c      	mov	r4, r1
 80021b2:	b112      	cbz	r2, 80021ba <_printf_common+0x2a>
 80021b4:	3301      	adds	r3, #1
 80021b6:	f8c9 3000 	str.w	r3, [r9]
 80021ba:	6823      	ldr	r3, [r4, #0]
 80021bc:	0699      	lsls	r1, r3, #26
 80021be:	bf42      	ittt	mi
 80021c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80021c4:	3302      	addmi	r3, #2
 80021c6:	f8c9 3000 	strmi.w	r3, [r9]
 80021ca:	6825      	ldr	r5, [r4, #0]
 80021cc:	f015 0506 	ands.w	r5, r5, #6
 80021d0:	d107      	bne.n	80021e2 <_printf_common+0x52>
 80021d2:	f104 0a19 	add.w	sl, r4, #25
 80021d6:	68e3      	ldr	r3, [r4, #12]
 80021d8:	f8d9 2000 	ldr.w	r2, [r9]
 80021dc:	1a9b      	subs	r3, r3, r2
 80021de:	42ab      	cmp	r3, r5
 80021e0:	dc28      	bgt.n	8002234 <_printf_common+0xa4>
 80021e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80021e6:	6822      	ldr	r2, [r4, #0]
 80021e8:	3300      	adds	r3, #0
 80021ea:	bf18      	it	ne
 80021ec:	2301      	movne	r3, #1
 80021ee:	0692      	lsls	r2, r2, #26
 80021f0:	d42d      	bmi.n	800224e <_printf_common+0xbe>
 80021f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80021f6:	4639      	mov	r1, r7
 80021f8:	4630      	mov	r0, r6
 80021fa:	47c0      	blx	r8
 80021fc:	3001      	adds	r0, #1
 80021fe:	d020      	beq.n	8002242 <_printf_common+0xb2>
 8002200:	6823      	ldr	r3, [r4, #0]
 8002202:	68e5      	ldr	r5, [r4, #12]
 8002204:	f8d9 2000 	ldr.w	r2, [r9]
 8002208:	f003 0306 	and.w	r3, r3, #6
 800220c:	2b04      	cmp	r3, #4
 800220e:	bf08      	it	eq
 8002210:	1aad      	subeq	r5, r5, r2
 8002212:	68a3      	ldr	r3, [r4, #8]
 8002214:	6922      	ldr	r2, [r4, #16]
 8002216:	bf0c      	ite	eq
 8002218:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800221c:	2500      	movne	r5, #0
 800221e:	4293      	cmp	r3, r2
 8002220:	bfc4      	itt	gt
 8002222:	1a9b      	subgt	r3, r3, r2
 8002224:	18ed      	addgt	r5, r5, r3
 8002226:	f04f 0900 	mov.w	r9, #0
 800222a:	341a      	adds	r4, #26
 800222c:	454d      	cmp	r5, r9
 800222e:	d11a      	bne.n	8002266 <_printf_common+0xd6>
 8002230:	2000      	movs	r0, #0
 8002232:	e008      	b.n	8002246 <_printf_common+0xb6>
 8002234:	2301      	movs	r3, #1
 8002236:	4652      	mov	r2, sl
 8002238:	4639      	mov	r1, r7
 800223a:	4630      	mov	r0, r6
 800223c:	47c0      	blx	r8
 800223e:	3001      	adds	r0, #1
 8002240:	d103      	bne.n	800224a <_printf_common+0xba>
 8002242:	f04f 30ff 	mov.w	r0, #4294967295
 8002246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800224a:	3501      	adds	r5, #1
 800224c:	e7c3      	b.n	80021d6 <_printf_common+0x46>
 800224e:	18e1      	adds	r1, r4, r3
 8002250:	1c5a      	adds	r2, r3, #1
 8002252:	2030      	movs	r0, #48	; 0x30
 8002254:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002258:	4422      	add	r2, r4
 800225a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800225e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002262:	3302      	adds	r3, #2
 8002264:	e7c5      	b.n	80021f2 <_printf_common+0x62>
 8002266:	2301      	movs	r3, #1
 8002268:	4622      	mov	r2, r4
 800226a:	4639      	mov	r1, r7
 800226c:	4630      	mov	r0, r6
 800226e:	47c0      	blx	r8
 8002270:	3001      	adds	r0, #1
 8002272:	d0e6      	beq.n	8002242 <_printf_common+0xb2>
 8002274:	f109 0901 	add.w	r9, r9, #1
 8002278:	e7d8      	b.n	800222c <_printf_common+0x9c>
	...

0800227c <_printf_i>:
 800227c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002280:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002284:	460c      	mov	r4, r1
 8002286:	7e09      	ldrb	r1, [r1, #24]
 8002288:	b085      	sub	sp, #20
 800228a:	296e      	cmp	r1, #110	; 0x6e
 800228c:	4617      	mov	r7, r2
 800228e:	4606      	mov	r6, r0
 8002290:	4698      	mov	r8, r3
 8002292:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002294:	f000 80b3 	beq.w	80023fe <_printf_i+0x182>
 8002298:	d822      	bhi.n	80022e0 <_printf_i+0x64>
 800229a:	2963      	cmp	r1, #99	; 0x63
 800229c:	d036      	beq.n	800230c <_printf_i+0x90>
 800229e:	d80a      	bhi.n	80022b6 <_printf_i+0x3a>
 80022a0:	2900      	cmp	r1, #0
 80022a2:	f000 80b9 	beq.w	8002418 <_printf_i+0x19c>
 80022a6:	2958      	cmp	r1, #88	; 0x58
 80022a8:	f000 8083 	beq.w	80023b2 <_printf_i+0x136>
 80022ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80022b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80022b4:	e032      	b.n	800231c <_printf_i+0xa0>
 80022b6:	2964      	cmp	r1, #100	; 0x64
 80022b8:	d001      	beq.n	80022be <_printf_i+0x42>
 80022ba:	2969      	cmp	r1, #105	; 0x69
 80022bc:	d1f6      	bne.n	80022ac <_printf_i+0x30>
 80022be:	6820      	ldr	r0, [r4, #0]
 80022c0:	6813      	ldr	r3, [r2, #0]
 80022c2:	0605      	lsls	r5, r0, #24
 80022c4:	f103 0104 	add.w	r1, r3, #4
 80022c8:	d52a      	bpl.n	8002320 <_printf_i+0xa4>
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6011      	str	r1, [r2, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	da03      	bge.n	80022da <_printf_i+0x5e>
 80022d2:	222d      	movs	r2, #45	; 0x2d
 80022d4:	425b      	negs	r3, r3
 80022d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80022da:	486f      	ldr	r0, [pc, #444]	; (8002498 <_printf_i+0x21c>)
 80022dc:	220a      	movs	r2, #10
 80022de:	e039      	b.n	8002354 <_printf_i+0xd8>
 80022e0:	2973      	cmp	r1, #115	; 0x73
 80022e2:	f000 809d 	beq.w	8002420 <_printf_i+0x1a4>
 80022e6:	d808      	bhi.n	80022fa <_printf_i+0x7e>
 80022e8:	296f      	cmp	r1, #111	; 0x6f
 80022ea:	d020      	beq.n	800232e <_printf_i+0xb2>
 80022ec:	2970      	cmp	r1, #112	; 0x70
 80022ee:	d1dd      	bne.n	80022ac <_printf_i+0x30>
 80022f0:	6823      	ldr	r3, [r4, #0]
 80022f2:	f043 0320 	orr.w	r3, r3, #32
 80022f6:	6023      	str	r3, [r4, #0]
 80022f8:	e003      	b.n	8002302 <_printf_i+0x86>
 80022fa:	2975      	cmp	r1, #117	; 0x75
 80022fc:	d017      	beq.n	800232e <_printf_i+0xb2>
 80022fe:	2978      	cmp	r1, #120	; 0x78
 8002300:	d1d4      	bne.n	80022ac <_printf_i+0x30>
 8002302:	2378      	movs	r3, #120	; 0x78
 8002304:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002308:	4864      	ldr	r0, [pc, #400]	; (800249c <_printf_i+0x220>)
 800230a:	e055      	b.n	80023b8 <_printf_i+0x13c>
 800230c:	6813      	ldr	r3, [r2, #0]
 800230e:	1d19      	adds	r1, r3, #4
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6011      	str	r1, [r2, #0]
 8002314:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002318:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800231c:	2301      	movs	r3, #1
 800231e:	e08c      	b.n	800243a <_printf_i+0x1be>
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6011      	str	r1, [r2, #0]
 8002324:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002328:	bf18      	it	ne
 800232a:	b21b      	sxthne	r3, r3
 800232c:	e7cf      	b.n	80022ce <_printf_i+0x52>
 800232e:	6813      	ldr	r3, [r2, #0]
 8002330:	6825      	ldr	r5, [r4, #0]
 8002332:	1d18      	adds	r0, r3, #4
 8002334:	6010      	str	r0, [r2, #0]
 8002336:	0628      	lsls	r0, r5, #24
 8002338:	d501      	bpl.n	800233e <_printf_i+0xc2>
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	e002      	b.n	8002344 <_printf_i+0xc8>
 800233e:	0668      	lsls	r0, r5, #25
 8002340:	d5fb      	bpl.n	800233a <_printf_i+0xbe>
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	4854      	ldr	r0, [pc, #336]	; (8002498 <_printf_i+0x21c>)
 8002346:	296f      	cmp	r1, #111	; 0x6f
 8002348:	bf14      	ite	ne
 800234a:	220a      	movne	r2, #10
 800234c:	2208      	moveq	r2, #8
 800234e:	2100      	movs	r1, #0
 8002350:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002354:	6865      	ldr	r5, [r4, #4]
 8002356:	60a5      	str	r5, [r4, #8]
 8002358:	2d00      	cmp	r5, #0
 800235a:	f2c0 8095 	blt.w	8002488 <_printf_i+0x20c>
 800235e:	6821      	ldr	r1, [r4, #0]
 8002360:	f021 0104 	bic.w	r1, r1, #4
 8002364:	6021      	str	r1, [r4, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d13d      	bne.n	80023e6 <_printf_i+0x16a>
 800236a:	2d00      	cmp	r5, #0
 800236c:	f040 808e 	bne.w	800248c <_printf_i+0x210>
 8002370:	4665      	mov	r5, ip
 8002372:	2a08      	cmp	r2, #8
 8002374:	d10b      	bne.n	800238e <_printf_i+0x112>
 8002376:	6823      	ldr	r3, [r4, #0]
 8002378:	07db      	lsls	r3, r3, #31
 800237a:	d508      	bpl.n	800238e <_printf_i+0x112>
 800237c:	6923      	ldr	r3, [r4, #16]
 800237e:	6862      	ldr	r2, [r4, #4]
 8002380:	429a      	cmp	r2, r3
 8002382:	bfde      	ittt	le
 8002384:	2330      	movle	r3, #48	; 0x30
 8002386:	f805 3c01 	strble.w	r3, [r5, #-1]
 800238a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800238e:	ebac 0305 	sub.w	r3, ip, r5
 8002392:	6123      	str	r3, [r4, #16]
 8002394:	f8cd 8000 	str.w	r8, [sp]
 8002398:	463b      	mov	r3, r7
 800239a:	aa03      	add	r2, sp, #12
 800239c:	4621      	mov	r1, r4
 800239e:	4630      	mov	r0, r6
 80023a0:	f7ff fef6 	bl	8002190 <_printf_common>
 80023a4:	3001      	adds	r0, #1
 80023a6:	d14d      	bne.n	8002444 <_printf_i+0x1c8>
 80023a8:	f04f 30ff 	mov.w	r0, #4294967295
 80023ac:	b005      	add	sp, #20
 80023ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80023b2:	4839      	ldr	r0, [pc, #228]	; (8002498 <_printf_i+0x21c>)
 80023b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80023b8:	6813      	ldr	r3, [r2, #0]
 80023ba:	6821      	ldr	r1, [r4, #0]
 80023bc:	1d1d      	adds	r5, r3, #4
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6015      	str	r5, [r2, #0]
 80023c2:	060a      	lsls	r2, r1, #24
 80023c4:	d50b      	bpl.n	80023de <_printf_i+0x162>
 80023c6:	07ca      	lsls	r2, r1, #31
 80023c8:	bf44      	itt	mi
 80023ca:	f041 0120 	orrmi.w	r1, r1, #32
 80023ce:	6021      	strmi	r1, [r4, #0]
 80023d0:	b91b      	cbnz	r3, 80023da <_printf_i+0x15e>
 80023d2:	6822      	ldr	r2, [r4, #0]
 80023d4:	f022 0220 	bic.w	r2, r2, #32
 80023d8:	6022      	str	r2, [r4, #0]
 80023da:	2210      	movs	r2, #16
 80023dc:	e7b7      	b.n	800234e <_printf_i+0xd2>
 80023de:	064d      	lsls	r5, r1, #25
 80023e0:	bf48      	it	mi
 80023e2:	b29b      	uxthmi	r3, r3
 80023e4:	e7ef      	b.n	80023c6 <_printf_i+0x14a>
 80023e6:	4665      	mov	r5, ip
 80023e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80023ec:	fb02 3311 	mls	r3, r2, r1, r3
 80023f0:	5cc3      	ldrb	r3, [r0, r3]
 80023f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80023f6:	460b      	mov	r3, r1
 80023f8:	2900      	cmp	r1, #0
 80023fa:	d1f5      	bne.n	80023e8 <_printf_i+0x16c>
 80023fc:	e7b9      	b.n	8002372 <_printf_i+0xf6>
 80023fe:	6813      	ldr	r3, [r2, #0]
 8002400:	6825      	ldr	r5, [r4, #0]
 8002402:	6961      	ldr	r1, [r4, #20]
 8002404:	1d18      	adds	r0, r3, #4
 8002406:	6010      	str	r0, [r2, #0]
 8002408:	0628      	lsls	r0, r5, #24
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	d501      	bpl.n	8002412 <_printf_i+0x196>
 800240e:	6019      	str	r1, [r3, #0]
 8002410:	e002      	b.n	8002418 <_printf_i+0x19c>
 8002412:	066a      	lsls	r2, r5, #25
 8002414:	d5fb      	bpl.n	800240e <_printf_i+0x192>
 8002416:	8019      	strh	r1, [r3, #0]
 8002418:	2300      	movs	r3, #0
 800241a:	6123      	str	r3, [r4, #16]
 800241c:	4665      	mov	r5, ip
 800241e:	e7b9      	b.n	8002394 <_printf_i+0x118>
 8002420:	6813      	ldr	r3, [r2, #0]
 8002422:	1d19      	adds	r1, r3, #4
 8002424:	6011      	str	r1, [r2, #0]
 8002426:	681d      	ldr	r5, [r3, #0]
 8002428:	6862      	ldr	r2, [r4, #4]
 800242a:	2100      	movs	r1, #0
 800242c:	4628      	mov	r0, r5
 800242e:	f7fd ff0f 	bl	8000250 <memchr>
 8002432:	b108      	cbz	r0, 8002438 <_printf_i+0x1bc>
 8002434:	1b40      	subs	r0, r0, r5
 8002436:	6060      	str	r0, [r4, #4]
 8002438:	6863      	ldr	r3, [r4, #4]
 800243a:	6123      	str	r3, [r4, #16]
 800243c:	2300      	movs	r3, #0
 800243e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002442:	e7a7      	b.n	8002394 <_printf_i+0x118>
 8002444:	6923      	ldr	r3, [r4, #16]
 8002446:	462a      	mov	r2, r5
 8002448:	4639      	mov	r1, r7
 800244a:	4630      	mov	r0, r6
 800244c:	47c0      	blx	r8
 800244e:	3001      	adds	r0, #1
 8002450:	d0aa      	beq.n	80023a8 <_printf_i+0x12c>
 8002452:	6823      	ldr	r3, [r4, #0]
 8002454:	079b      	lsls	r3, r3, #30
 8002456:	d413      	bmi.n	8002480 <_printf_i+0x204>
 8002458:	68e0      	ldr	r0, [r4, #12]
 800245a:	9b03      	ldr	r3, [sp, #12]
 800245c:	4298      	cmp	r0, r3
 800245e:	bfb8      	it	lt
 8002460:	4618      	movlt	r0, r3
 8002462:	e7a3      	b.n	80023ac <_printf_i+0x130>
 8002464:	2301      	movs	r3, #1
 8002466:	464a      	mov	r2, r9
 8002468:	4639      	mov	r1, r7
 800246a:	4630      	mov	r0, r6
 800246c:	47c0      	blx	r8
 800246e:	3001      	adds	r0, #1
 8002470:	d09a      	beq.n	80023a8 <_printf_i+0x12c>
 8002472:	3501      	adds	r5, #1
 8002474:	68e3      	ldr	r3, [r4, #12]
 8002476:	9a03      	ldr	r2, [sp, #12]
 8002478:	1a9b      	subs	r3, r3, r2
 800247a:	42ab      	cmp	r3, r5
 800247c:	dcf2      	bgt.n	8002464 <_printf_i+0x1e8>
 800247e:	e7eb      	b.n	8002458 <_printf_i+0x1dc>
 8002480:	2500      	movs	r5, #0
 8002482:	f104 0919 	add.w	r9, r4, #25
 8002486:	e7f5      	b.n	8002474 <_printf_i+0x1f8>
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1ac      	bne.n	80023e6 <_printf_i+0x16a>
 800248c:	7803      	ldrb	r3, [r0, #0]
 800248e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002492:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002496:	e76c      	b.n	8002372 <_printf_i+0xf6>
 8002498:	08003c02 	.word	0x08003c02
 800249c:	08003c13 	.word	0x08003c13

080024a0 <_vsiprintf_r>:
 80024a0:	b500      	push	{lr}
 80024a2:	b09b      	sub	sp, #108	; 0x6c
 80024a4:	9100      	str	r1, [sp, #0]
 80024a6:	9104      	str	r1, [sp, #16]
 80024a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80024ac:	9105      	str	r1, [sp, #20]
 80024ae:	9102      	str	r1, [sp, #8]
 80024b0:	4905      	ldr	r1, [pc, #20]	; (80024c8 <_vsiprintf_r+0x28>)
 80024b2:	9103      	str	r1, [sp, #12]
 80024b4:	4669      	mov	r1, sp
 80024b6:	f001 f9f7 	bl	80038a8 <_svfiprintf_r>
 80024ba:	9b00      	ldr	r3, [sp, #0]
 80024bc:	2200      	movs	r2, #0
 80024be:	701a      	strb	r2, [r3, #0]
 80024c0:	b01b      	add	sp, #108	; 0x6c
 80024c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80024c6:	bf00      	nop
 80024c8:	ffff0208 	.word	0xffff0208

080024cc <vsiprintf>:
 80024cc:	4613      	mov	r3, r2
 80024ce:	460a      	mov	r2, r1
 80024d0:	4601      	mov	r1, r0
 80024d2:	4802      	ldr	r0, [pc, #8]	; (80024dc <vsiprintf+0x10>)
 80024d4:	6800      	ldr	r0, [r0, #0]
 80024d6:	f7ff bfe3 	b.w	80024a0 <_vsiprintf_r>
 80024da:	bf00      	nop
 80024dc:	2000006c 	.word	0x2000006c

080024e0 <quorem>:
 80024e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024e4:	6903      	ldr	r3, [r0, #16]
 80024e6:	690c      	ldr	r4, [r1, #16]
 80024e8:	42a3      	cmp	r3, r4
 80024ea:	4680      	mov	r8, r0
 80024ec:	f2c0 8082 	blt.w	80025f4 <quorem+0x114>
 80024f0:	3c01      	subs	r4, #1
 80024f2:	f101 0714 	add.w	r7, r1, #20
 80024f6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80024fa:	f100 0614 	add.w	r6, r0, #20
 80024fe:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8002502:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002506:	eb06 030c 	add.w	r3, r6, ip
 800250a:	3501      	adds	r5, #1
 800250c:	eb07 090c 	add.w	r9, r7, ip
 8002510:	9301      	str	r3, [sp, #4]
 8002512:	fbb0 f5f5 	udiv	r5, r0, r5
 8002516:	b395      	cbz	r5, 800257e <quorem+0x9e>
 8002518:	f04f 0a00 	mov.w	sl, #0
 800251c:	4638      	mov	r0, r7
 800251e:	46b6      	mov	lr, r6
 8002520:	46d3      	mov	fp, sl
 8002522:	f850 2b04 	ldr.w	r2, [r0], #4
 8002526:	b293      	uxth	r3, r2
 8002528:	fb05 a303 	mla	r3, r5, r3, sl
 800252c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002530:	b29b      	uxth	r3, r3
 8002532:	ebab 0303 	sub.w	r3, fp, r3
 8002536:	0c12      	lsrs	r2, r2, #16
 8002538:	f8de b000 	ldr.w	fp, [lr]
 800253c:	fb05 a202 	mla	r2, r5, r2, sl
 8002540:	fa13 f38b 	uxtah	r3, r3, fp
 8002544:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8002548:	fa1f fb82 	uxth.w	fp, r2
 800254c:	f8de 2000 	ldr.w	r2, [lr]
 8002550:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8002554:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002558:	b29b      	uxth	r3, r3
 800255a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800255e:	4581      	cmp	r9, r0
 8002560:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8002564:	f84e 3b04 	str.w	r3, [lr], #4
 8002568:	d2db      	bcs.n	8002522 <quorem+0x42>
 800256a:	f856 300c 	ldr.w	r3, [r6, ip]
 800256e:	b933      	cbnz	r3, 800257e <quorem+0x9e>
 8002570:	9b01      	ldr	r3, [sp, #4]
 8002572:	3b04      	subs	r3, #4
 8002574:	429e      	cmp	r6, r3
 8002576:	461a      	mov	r2, r3
 8002578:	d330      	bcc.n	80025dc <quorem+0xfc>
 800257a:	f8c8 4010 	str.w	r4, [r8, #16]
 800257e:	4640      	mov	r0, r8
 8002580:	f000 ffbc 	bl	80034fc <__mcmp>
 8002584:	2800      	cmp	r0, #0
 8002586:	db25      	blt.n	80025d4 <quorem+0xf4>
 8002588:	3501      	adds	r5, #1
 800258a:	4630      	mov	r0, r6
 800258c:	f04f 0c00 	mov.w	ip, #0
 8002590:	f857 2b04 	ldr.w	r2, [r7], #4
 8002594:	f8d0 e000 	ldr.w	lr, [r0]
 8002598:	b293      	uxth	r3, r2
 800259a:	ebac 0303 	sub.w	r3, ip, r3
 800259e:	0c12      	lsrs	r2, r2, #16
 80025a0:	fa13 f38e 	uxtah	r3, r3, lr
 80025a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80025a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80025b2:	45b9      	cmp	r9, r7
 80025b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80025b8:	f840 3b04 	str.w	r3, [r0], #4
 80025bc:	d2e8      	bcs.n	8002590 <quorem+0xb0>
 80025be:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80025c2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80025c6:	b92a      	cbnz	r2, 80025d4 <quorem+0xf4>
 80025c8:	3b04      	subs	r3, #4
 80025ca:	429e      	cmp	r6, r3
 80025cc:	461a      	mov	r2, r3
 80025ce:	d30b      	bcc.n	80025e8 <quorem+0x108>
 80025d0:	f8c8 4010 	str.w	r4, [r8, #16]
 80025d4:	4628      	mov	r0, r5
 80025d6:	b003      	add	sp, #12
 80025d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025dc:	6812      	ldr	r2, [r2, #0]
 80025de:	3b04      	subs	r3, #4
 80025e0:	2a00      	cmp	r2, #0
 80025e2:	d1ca      	bne.n	800257a <quorem+0x9a>
 80025e4:	3c01      	subs	r4, #1
 80025e6:	e7c5      	b.n	8002574 <quorem+0x94>
 80025e8:	6812      	ldr	r2, [r2, #0]
 80025ea:	3b04      	subs	r3, #4
 80025ec:	2a00      	cmp	r2, #0
 80025ee:	d1ef      	bne.n	80025d0 <quorem+0xf0>
 80025f0:	3c01      	subs	r4, #1
 80025f2:	e7ea      	b.n	80025ca <quorem+0xea>
 80025f4:	2000      	movs	r0, #0
 80025f6:	e7ee      	b.n	80025d6 <quorem+0xf6>

080025f8 <_dtoa_r>:
 80025f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025fc:	ec57 6b10 	vmov	r6, r7, d0
 8002600:	b095      	sub	sp, #84	; 0x54
 8002602:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8002604:	9108      	str	r1, [sp, #32]
 8002606:	4604      	mov	r4, r0
 8002608:	920a      	str	r2, [sp, #40]	; 0x28
 800260a:	9311      	str	r3, [sp, #68]	; 0x44
 800260c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8002610:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8002614:	b93d      	cbnz	r5, 8002626 <_dtoa_r+0x2e>
 8002616:	2010      	movs	r0, #16
 8002618:	f000 fd48 	bl	80030ac <malloc>
 800261c:	6260      	str	r0, [r4, #36]	; 0x24
 800261e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8002622:	6005      	str	r5, [r0, #0]
 8002624:	60c5      	str	r5, [r0, #12]
 8002626:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002628:	6819      	ldr	r1, [r3, #0]
 800262a:	b151      	cbz	r1, 8002642 <_dtoa_r+0x4a>
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	604a      	str	r2, [r1, #4]
 8002630:	2301      	movs	r3, #1
 8002632:	4093      	lsls	r3, r2
 8002634:	608b      	str	r3, [r1, #8]
 8002636:	4620      	mov	r0, r4
 8002638:	f000 fd7f 	bl	800313a <_Bfree>
 800263c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	1e3b      	subs	r3, r7, #0
 8002644:	bfb9      	ittee	lt
 8002646:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800264a:	9303      	strlt	r3, [sp, #12]
 800264c:	2300      	movge	r3, #0
 800264e:	f8c8 3000 	strge.w	r3, [r8]
 8002652:	9d03      	ldr	r5, [sp, #12]
 8002654:	4bac      	ldr	r3, [pc, #688]	; (8002908 <_dtoa_r+0x310>)
 8002656:	bfbc      	itt	lt
 8002658:	2201      	movlt	r2, #1
 800265a:	f8c8 2000 	strlt.w	r2, [r8]
 800265e:	43ab      	bics	r3, r5
 8002660:	d11b      	bne.n	800269a <_dtoa_r+0xa2>
 8002662:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002664:	f242 730f 	movw	r3, #9999	; 0x270f
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	9b02      	ldr	r3, [sp, #8]
 800266c:	b923      	cbnz	r3, 8002678 <_dtoa_r+0x80>
 800266e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8002672:	2d00      	cmp	r5, #0
 8002674:	f000 84dd 	beq.w	8003032 <_dtoa_r+0xa3a>
 8002678:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800267a:	b953      	cbnz	r3, 8002692 <_dtoa_r+0x9a>
 800267c:	4ba3      	ldr	r3, [pc, #652]	; (800290c <_dtoa_r+0x314>)
 800267e:	e020      	b.n	80026c2 <_dtoa_r+0xca>
 8002680:	4ba3      	ldr	r3, [pc, #652]	; (8002910 <_dtoa_r+0x318>)
 8002682:	9304      	str	r3, [sp, #16]
 8002684:	3308      	adds	r3, #8
 8002686:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	9804      	ldr	r0, [sp, #16]
 800268c:	b015      	add	sp, #84	; 0x54
 800268e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002692:	4b9e      	ldr	r3, [pc, #632]	; (800290c <_dtoa_r+0x314>)
 8002694:	9304      	str	r3, [sp, #16]
 8002696:	3303      	adds	r3, #3
 8002698:	e7f5      	b.n	8002686 <_dtoa_r+0x8e>
 800269a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800269e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80026a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a6:	ed8d 7b04 	vstr	d7, [sp, #16]
 80026aa:	d10c      	bne.n	80026c6 <_dtoa_r+0xce>
 80026ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80026ae:	2301      	movs	r3, #1
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 84b9 	beq.w	800302c <_dtoa_r+0xa34>
 80026ba:	4b96      	ldr	r3, [pc, #600]	; (8002914 <_dtoa_r+0x31c>)
 80026bc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80026be:	6013      	str	r3, [r2, #0]
 80026c0:	3b01      	subs	r3, #1
 80026c2:	9304      	str	r3, [sp, #16]
 80026c4:	e7e1      	b.n	800268a <_dtoa_r+0x92>
 80026c6:	a913      	add	r1, sp, #76	; 0x4c
 80026c8:	aa12      	add	r2, sp, #72	; 0x48
 80026ca:	ed9d 0b04 	vldr	d0, [sp, #16]
 80026ce:	4620      	mov	r0, r4
 80026d0:	f000 ff8b 	bl	80035ea <__d2b>
 80026d4:	f3c5 560a 	ubfx	r6, r5, #20, #11
 80026d8:	9001      	str	r0, [sp, #4]
 80026da:	9912      	ldr	r1, [sp, #72]	; 0x48
 80026dc:	2e00      	cmp	r6, #0
 80026de:	d046      	beq.n	800276e <_dtoa_r+0x176>
 80026e0:	9805      	ldr	r0, [sp, #20]
 80026e2:	f3c0 0013 	ubfx	r0, r0, #0, #20
 80026e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80026ea:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 80026ee:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80026f2:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 80026f6:	2700      	movs	r7, #0
 80026f8:	ee07 aa90 	vmov	s15, sl
 80026fc:	ec43 2b16 	vmov	d6, r2, r3
 8002700:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8002704:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 80028f0 <_dtoa_r+0x2f8>
 8002708:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800270c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002710:	ed9f 6b79 	vldr	d6, [pc, #484]	; 80028f8 <_dtoa_r+0x300>
 8002714:	eea7 6b04 	vfma.f64	d6, d7, d4
 8002718:	eeb0 7b46 	vmov.f64	d7, d6
 800271c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8002900 <_dtoa_r+0x308>
 8002720:	eea5 7b06 	vfma.f64	d7, d5, d6
 8002724:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8002728:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800272c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002730:	ee16 ba90 	vmov	fp, s13
 8002734:	d508      	bpl.n	8002748 <_dtoa_r+0x150>
 8002736:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800273a:	eeb4 6b47 	vcmp.f64	d6, d7
 800273e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002742:	bf18      	it	ne
 8002744:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8002748:	f1bb 0f16 	cmp.w	fp, #22
 800274c:	d834      	bhi.n	80027b8 <_dtoa_r+0x1c0>
 800274e:	4b72      	ldr	r3, [pc, #456]	; (8002918 <_dtoa_r+0x320>)
 8002750:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8002754:	ed93 7b00 	vldr	d7, [r3]
 8002758:	ed9d 6b02 	vldr	d6, [sp, #8]
 800275c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002764:	dd01      	ble.n	800276a <_dtoa_r+0x172>
 8002766:	f10b 3bff 	add.w	fp, fp, #4294967295
 800276a:	2300      	movs	r3, #0
 800276c:	e025      	b.n	80027ba <_dtoa_r+0x1c2>
 800276e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002770:	eb01 0a03 	add.w	sl, r1, r3
 8002774:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8002778:	2b20      	cmp	r3, #32
 800277a:	dd17      	ble.n	80027ac <_dtoa_r+0x1b4>
 800277c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002780:	9a02      	ldr	r2, [sp, #8]
 8002782:	409d      	lsls	r5, r3
 8002784:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8002788:	fa22 f303 	lsr.w	r3, r2, r3
 800278c:	432b      	orrs	r3, r5
 800278e:	ee07 3a90 	vmov	s15, r3
 8002792:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002796:	f10a 3aff 	add.w	sl, sl, #4294967295
 800279a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800279e:	9805      	ldr	r0, [sp, #20]
 80027a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80027a4:	2701      	movs	r7, #1
 80027a6:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 80027aa:	e7a5      	b.n	80026f8 <_dtoa_r+0x100>
 80027ac:	9a02      	ldr	r2, [sp, #8]
 80027ae:	f1c3 0320 	rsb	r3, r3, #32
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	e7ea      	b.n	800278e <_dtoa_r+0x196>
 80027b8:	2301      	movs	r3, #1
 80027ba:	eba1 0a0a 	sub.w	sl, r1, sl
 80027be:	9310      	str	r3, [sp, #64]	; 0x40
 80027c0:	f1ba 0301 	subs.w	r3, sl, #1
 80027c4:	9307      	str	r3, [sp, #28]
 80027c6:	bf43      	ittte	mi
 80027c8:	2300      	movmi	r3, #0
 80027ca:	f1ca 0a01 	rsbmi	sl, sl, #1
 80027ce:	9307      	strmi	r3, [sp, #28]
 80027d0:	f04f 0a00 	movpl.w	sl, #0
 80027d4:	f1bb 0f00 	cmp.w	fp, #0
 80027d8:	db19      	blt.n	800280e <_dtoa_r+0x216>
 80027da:	9b07      	ldr	r3, [sp, #28]
 80027dc:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80027e0:	445b      	add	r3, fp
 80027e2:	9307      	str	r3, [sp, #28]
 80027e4:	f04f 0800 	mov.w	r8, #0
 80027e8:	9b08      	ldr	r3, [sp, #32]
 80027ea:	2b09      	cmp	r3, #9
 80027ec:	d866      	bhi.n	80028bc <_dtoa_r+0x2c4>
 80027ee:	2b05      	cmp	r3, #5
 80027f0:	bfc4      	itt	gt
 80027f2:	3b04      	subgt	r3, #4
 80027f4:	9308      	strgt	r3, [sp, #32]
 80027f6:	9b08      	ldr	r3, [sp, #32]
 80027f8:	f1a3 0302 	sub.w	r3, r3, #2
 80027fc:	bfcc      	ite	gt
 80027fe:	2500      	movgt	r5, #0
 8002800:	2501      	movle	r5, #1
 8002802:	2b03      	cmp	r3, #3
 8002804:	d866      	bhi.n	80028d4 <_dtoa_r+0x2dc>
 8002806:	e8df f003 	tbb	[pc, r3]
 800280a:	5755      	.short	0x5755
 800280c:	4909      	.short	0x4909
 800280e:	2300      	movs	r3, #0
 8002810:	ebaa 0a0b 	sub.w	sl, sl, fp
 8002814:	f1cb 0800 	rsb	r8, fp, #0
 8002818:	930b      	str	r3, [sp, #44]	; 0x2c
 800281a:	e7e5      	b.n	80027e8 <_dtoa_r+0x1f0>
 800281c:	2301      	movs	r3, #1
 800281e:	9309      	str	r3, [sp, #36]	; 0x24
 8002820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002822:	2b00      	cmp	r3, #0
 8002824:	dd59      	ble.n	80028da <_dtoa_r+0x2e2>
 8002826:	9306      	str	r3, [sp, #24]
 8002828:	4699      	mov	r9, r3
 800282a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800282c:	2200      	movs	r2, #0
 800282e:	6072      	str	r2, [r6, #4]
 8002830:	2204      	movs	r2, #4
 8002832:	f102 0014 	add.w	r0, r2, #20
 8002836:	4298      	cmp	r0, r3
 8002838:	6871      	ldr	r1, [r6, #4]
 800283a:	d953      	bls.n	80028e4 <_dtoa_r+0x2ec>
 800283c:	4620      	mov	r0, r4
 800283e:	f000 fc48 	bl	80030d2 <_Balloc>
 8002842:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002844:	6030      	str	r0, [r6, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	9304      	str	r3, [sp, #16]
 800284a:	f1b9 0f0e 	cmp.w	r9, #14
 800284e:	f200 80c2 	bhi.w	80029d6 <_dtoa_r+0x3de>
 8002852:	2d00      	cmp	r5, #0
 8002854:	f000 80bf 	beq.w	80029d6 <_dtoa_r+0x3de>
 8002858:	ed9d 7b02 	vldr	d7, [sp, #8]
 800285c:	f1bb 0f00 	cmp.w	fp, #0
 8002860:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8002864:	f340 80e6 	ble.w	8002a34 <_dtoa_r+0x43c>
 8002868:	4a2b      	ldr	r2, [pc, #172]	; (8002918 <_dtoa_r+0x320>)
 800286a:	f00b 030f 	and.w	r3, fp, #15
 800286e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002872:	ed93 7b00 	vldr	d7, [r3]
 8002876:	ea4f 132b 	mov.w	r3, fp, asr #4
 800287a:	06da      	lsls	r2, r3, #27
 800287c:	f140 80d8 	bpl.w	8002a30 <_dtoa_r+0x438>
 8002880:	4a26      	ldr	r2, [pc, #152]	; (800291c <_dtoa_r+0x324>)
 8002882:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8002886:	ed92 6b08 	vldr	d6, [r2, #32]
 800288a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800288e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002892:	f003 030f 	and.w	r3, r3, #15
 8002896:	2203      	movs	r2, #3
 8002898:	4920      	ldr	r1, [pc, #128]	; (800291c <_dtoa_r+0x324>)
 800289a:	e04a      	b.n	8002932 <_dtoa_r+0x33a>
 800289c:	2301      	movs	r3, #1
 800289e:	9309      	str	r3, [sp, #36]	; 0x24
 80028a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80028a2:	445b      	add	r3, fp
 80028a4:	f103 0901 	add.w	r9, r3, #1
 80028a8:	9306      	str	r3, [sp, #24]
 80028aa:	464b      	mov	r3, r9
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	bfb8      	it	lt
 80028b0:	2301      	movlt	r3, #1
 80028b2:	e7ba      	b.n	800282a <_dtoa_r+0x232>
 80028b4:	2300      	movs	r3, #0
 80028b6:	e7b2      	b.n	800281e <_dtoa_r+0x226>
 80028b8:	2300      	movs	r3, #0
 80028ba:	e7f0      	b.n	800289e <_dtoa_r+0x2a6>
 80028bc:	2501      	movs	r5, #1
 80028be:	2300      	movs	r3, #0
 80028c0:	e9cd 3508 	strd	r3, r5, [sp, #32]
 80028c4:	f04f 33ff 	mov.w	r3, #4294967295
 80028c8:	9306      	str	r3, [sp, #24]
 80028ca:	4699      	mov	r9, r3
 80028cc:	2200      	movs	r2, #0
 80028ce:	2312      	movs	r3, #18
 80028d0:	920a      	str	r2, [sp, #40]	; 0x28
 80028d2:	e7aa      	b.n	800282a <_dtoa_r+0x232>
 80028d4:	2301      	movs	r3, #1
 80028d6:	9309      	str	r3, [sp, #36]	; 0x24
 80028d8:	e7f4      	b.n	80028c4 <_dtoa_r+0x2cc>
 80028da:	2301      	movs	r3, #1
 80028dc:	9306      	str	r3, [sp, #24]
 80028de:	4699      	mov	r9, r3
 80028e0:	461a      	mov	r2, r3
 80028e2:	e7f5      	b.n	80028d0 <_dtoa_r+0x2d8>
 80028e4:	3101      	adds	r1, #1
 80028e6:	6071      	str	r1, [r6, #4]
 80028e8:	0052      	lsls	r2, r2, #1
 80028ea:	e7a2      	b.n	8002832 <_dtoa_r+0x23a>
 80028ec:	f3af 8000 	nop.w
 80028f0:	636f4361 	.word	0x636f4361
 80028f4:	3fd287a7 	.word	0x3fd287a7
 80028f8:	8b60c8b3 	.word	0x8b60c8b3
 80028fc:	3fc68a28 	.word	0x3fc68a28
 8002900:	509f79fb 	.word	0x509f79fb
 8002904:	3fd34413 	.word	0x3fd34413
 8002908:	7ff00000 	.word	0x7ff00000
 800290c:	08003c2d 	.word	0x08003c2d
 8002910:	08003c24 	.word	0x08003c24
 8002914:	08003c01 	.word	0x08003c01
 8002918:	08003c60 	.word	0x08003c60
 800291c:	08003c38 	.word	0x08003c38
 8002920:	07de      	lsls	r6, r3, #31
 8002922:	d504      	bpl.n	800292e <_dtoa_r+0x336>
 8002924:	ed91 6b00 	vldr	d6, [r1]
 8002928:	3201      	adds	r2, #1
 800292a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800292e:	105b      	asrs	r3, r3, #1
 8002930:	3108      	adds	r1, #8
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f4      	bne.n	8002920 <_dtoa_r+0x328>
 8002936:	ed9d 6b02 	vldr	d6, [sp, #8]
 800293a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800293e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002942:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 80a7 	beq.w	8002a98 <_dtoa_r+0x4a0>
 800294a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800294e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002952:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800295a:	f140 809d 	bpl.w	8002a98 <_dtoa_r+0x4a0>
 800295e:	f1b9 0f00 	cmp.w	r9, #0
 8002962:	f000 8099 	beq.w	8002a98 <_dtoa_r+0x4a0>
 8002966:	9b06      	ldr	r3, [sp, #24]
 8002968:	2b00      	cmp	r3, #0
 800296a:	dd30      	ble.n	80029ce <_dtoa_r+0x3d6>
 800296c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8002970:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002974:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002978:	9d06      	ldr	r5, [sp, #24]
 800297a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800297e:	3201      	adds	r2, #1
 8002980:	ed9d 6b02 	vldr	d6, [sp, #8]
 8002984:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8002988:	ee07 2a90 	vmov	s15, r2
 800298c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002990:	eea7 5b06 	vfma.f64	d5, d7, d6
 8002994:	ed8d 5b02 	vstr	d5, [sp, #8]
 8002998:	9a03      	ldr	r2, [sp, #12]
 800299a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800299e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 80029a2:	2d00      	cmp	r5, #0
 80029a4:	d17b      	bne.n	8002a9e <_dtoa_r+0x4a6>
 80029a6:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80029aa:	ee36 6b47 	vsub.f64	d6, d6, d7
 80029ae:	ec41 0b17 	vmov	d7, r0, r1
 80029b2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80029b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ba:	f300 8253 	bgt.w	8002e64 <_dtoa_r+0x86c>
 80029be:	eeb1 7b47 	vneg.f64	d7, d7
 80029c2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80029c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ca:	f100 8249 	bmi.w	8002e60 <_dtoa_r+0x868>
 80029ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80029d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80029d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f2c0 8119 	blt.w	8002c10 <_dtoa_r+0x618>
 80029de:	f1bb 0f0e 	cmp.w	fp, #14
 80029e2:	f300 8115 	bgt.w	8002c10 <_dtoa_r+0x618>
 80029e6:	4bc3      	ldr	r3, [pc, #780]	; (8002cf4 <_dtoa_r+0x6fc>)
 80029e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80029ec:	ed93 6b00 	vldr	d6, [r3]
 80029f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f280 80ba 	bge.w	8002b6c <_dtoa_r+0x574>
 80029f8:	f1b9 0f00 	cmp.w	r9, #0
 80029fc:	f300 80b6 	bgt.w	8002b6c <_dtoa_r+0x574>
 8002a00:	f040 822d 	bne.w	8002e5e <_dtoa_r+0x866>
 8002a04:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8002a08:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002a0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002a10:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a18:	464d      	mov	r5, r9
 8002a1a:	464f      	mov	r7, r9
 8002a1c:	f280 8204 	bge.w	8002e28 <_dtoa_r+0x830>
 8002a20:	9b04      	ldr	r3, [sp, #16]
 8002a22:	9a04      	ldr	r2, [sp, #16]
 8002a24:	1c5e      	adds	r6, r3, #1
 8002a26:	2331      	movs	r3, #49	; 0x31
 8002a28:	7013      	strb	r3, [r2, #0]
 8002a2a:	f10b 0b01 	add.w	fp, fp, #1
 8002a2e:	e1ff      	b.n	8002e30 <_dtoa_r+0x838>
 8002a30:	2202      	movs	r2, #2
 8002a32:	e731      	b.n	8002898 <_dtoa_r+0x2a0>
 8002a34:	d02e      	beq.n	8002a94 <_dtoa_r+0x49c>
 8002a36:	f1cb 0300 	rsb	r3, fp, #0
 8002a3a:	4aae      	ldr	r2, [pc, #696]	; (8002cf4 <_dtoa_r+0x6fc>)
 8002a3c:	f003 010f 	and.w	r1, r3, #15
 8002a40:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002a44:	ed92 7b00 	vldr	d7, [r2]
 8002a48:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8002a4c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002a50:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8002a54:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8002a58:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8002a5c:	49a6      	ldr	r1, [pc, #664]	; (8002cf8 <_dtoa_r+0x700>)
 8002a5e:	111b      	asrs	r3, r3, #4
 8002a60:	2000      	movs	r0, #0
 8002a62:	2202      	movs	r2, #2
 8002a64:	b93b      	cbnz	r3, 8002a76 <_dtoa_r+0x47e>
 8002a66:	2800      	cmp	r0, #0
 8002a68:	f43f af6b 	beq.w	8002942 <_dtoa_r+0x34a>
 8002a6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002a70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002a74:	e765      	b.n	8002942 <_dtoa_r+0x34a>
 8002a76:	07dd      	lsls	r5, r3, #31
 8002a78:	d509      	bpl.n	8002a8e <_dtoa_r+0x496>
 8002a7a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8002a7e:	ed91 7b00 	vldr	d7, [r1]
 8002a82:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002a86:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8002a8a:	3201      	adds	r2, #1
 8002a8c:	2001      	movs	r0, #1
 8002a8e:	105b      	asrs	r3, r3, #1
 8002a90:	3108      	adds	r1, #8
 8002a92:	e7e7      	b.n	8002a64 <_dtoa_r+0x46c>
 8002a94:	2202      	movs	r2, #2
 8002a96:	e754      	b.n	8002942 <_dtoa_r+0x34a>
 8002a98:	465b      	mov	r3, fp
 8002a9a:	464d      	mov	r5, r9
 8002a9c:	e770      	b.n	8002980 <_dtoa_r+0x388>
 8002a9e:	4a95      	ldr	r2, [pc, #596]	; (8002cf4 <_dtoa_r+0x6fc>)
 8002aa0:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8002aa4:	ed12 4b02 	vldr	d4, [r2, #-8]
 8002aa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002aaa:	ec41 0b17 	vmov	d7, r0, r1
 8002aae:	b35a      	cbz	r2, 8002b08 <_dtoa_r+0x510>
 8002ab0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8002ab4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8002ab8:	9e04      	ldr	r6, [sp, #16]
 8002aba:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8002abe:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8002ac2:	ee35 7b47 	vsub.f64	d7, d5, d7
 8002ac6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8002aca:	ee14 2a90 	vmov	r2, s9
 8002ace:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8002ad2:	3230      	adds	r2, #48	; 0x30
 8002ad4:	ee36 6b45 	vsub.f64	d6, d6, d5
 8002ad8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ae0:	f806 2b01 	strb.w	r2, [r6], #1
 8002ae4:	d43b      	bmi.n	8002b5e <_dtoa_r+0x566>
 8002ae6:	ee32 5b46 	vsub.f64	d5, d2, d6
 8002aea:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8002aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af2:	d472      	bmi.n	8002bda <_dtoa_r+0x5e2>
 8002af4:	9a04      	ldr	r2, [sp, #16]
 8002af6:	1ab2      	subs	r2, r6, r2
 8002af8:	4295      	cmp	r5, r2
 8002afa:	f77f af68 	ble.w	80029ce <_dtoa_r+0x3d6>
 8002afe:	ee27 7b03 	vmul.f64	d7, d7, d3
 8002b02:	ee26 6b03 	vmul.f64	d6, d6, d3
 8002b06:	e7de      	b.n	8002ac6 <_dtoa_r+0x4ce>
 8002b08:	9a04      	ldr	r2, [sp, #16]
 8002b0a:	ee24 7b07 	vmul.f64	d7, d4, d7
 8002b0e:	1956      	adds	r6, r2, r5
 8002b10:	4611      	mov	r1, r2
 8002b12:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8002b16:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8002b1a:	ee14 2a90 	vmov	r2, s9
 8002b1e:	3230      	adds	r2, #48	; 0x30
 8002b20:	f801 2b01 	strb.w	r2, [r1], #1
 8002b24:	42b1      	cmp	r1, r6
 8002b26:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8002b2a:	ee36 6b45 	vsub.f64	d6, d6, d5
 8002b2e:	d11a      	bne.n	8002b66 <_dtoa_r+0x56e>
 8002b30:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8002b34:	ee37 4b05 	vadd.f64	d4, d7, d5
 8002b38:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8002b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b40:	dc4b      	bgt.n	8002bda <_dtoa_r+0x5e2>
 8002b42:	ee35 7b47 	vsub.f64	d7, d5, d7
 8002b46:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b4e:	f57f af3e 	bpl.w	80029ce <_dtoa_r+0x3d6>
 8002b52:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8002b56:	2a30      	cmp	r2, #48	; 0x30
 8002b58:	f106 31ff 	add.w	r1, r6, #4294967295
 8002b5c:	d001      	beq.n	8002b62 <_dtoa_r+0x56a>
 8002b5e:	469b      	mov	fp, r3
 8002b60:	e02a      	b.n	8002bb8 <_dtoa_r+0x5c0>
 8002b62:	460e      	mov	r6, r1
 8002b64:	e7f5      	b.n	8002b52 <_dtoa_r+0x55a>
 8002b66:	ee26 6b03 	vmul.f64	d6, d6, d3
 8002b6a:	e7d4      	b.n	8002b16 <_dtoa_r+0x51e>
 8002b6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002b70:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8002b74:	9e04      	ldr	r6, [sp, #16]
 8002b76:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8002b7a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8002b7e:	ee15 3a10 	vmov	r3, s10
 8002b82:	3330      	adds	r3, #48	; 0x30
 8002b84:	f806 3b01 	strb.w	r3, [r6], #1
 8002b88:	9b04      	ldr	r3, [sp, #16]
 8002b8a:	1af3      	subs	r3, r6, r3
 8002b8c:	4599      	cmp	r9, r3
 8002b8e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8002b92:	eea3 7b46 	vfms.f64	d7, d3, d6
 8002b96:	d133      	bne.n	8002c00 <_dtoa_r+0x608>
 8002b98:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002b9c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba4:	dc18      	bgt.n	8002bd8 <_dtoa_r+0x5e0>
 8002ba6:	eeb4 7b46 	vcmp.f64	d7, d6
 8002baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bae:	d103      	bne.n	8002bb8 <_dtoa_r+0x5c0>
 8002bb0:	ee15 3a10 	vmov	r3, s10
 8002bb4:	07db      	lsls	r3, r3, #31
 8002bb6:	d40f      	bmi.n	8002bd8 <_dtoa_r+0x5e0>
 8002bb8:	9901      	ldr	r1, [sp, #4]
 8002bba:	4620      	mov	r0, r4
 8002bbc:	f000 fabd 	bl	800313a <_Bfree>
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002bc4:	7033      	strb	r3, [r6, #0]
 8002bc6:	f10b 0301 	add.w	r3, fp, #1
 8002bca:	6013      	str	r3, [r2, #0]
 8002bcc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f43f ad5b 	beq.w	800268a <_dtoa_r+0x92>
 8002bd4:	601e      	str	r6, [r3, #0]
 8002bd6:	e558      	b.n	800268a <_dtoa_r+0x92>
 8002bd8:	465b      	mov	r3, fp
 8002bda:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8002bde:	2939      	cmp	r1, #57	; 0x39
 8002be0:	f106 32ff 	add.w	r2, r6, #4294967295
 8002be4:	d106      	bne.n	8002bf4 <_dtoa_r+0x5fc>
 8002be6:	9904      	ldr	r1, [sp, #16]
 8002be8:	4291      	cmp	r1, r2
 8002bea:	d107      	bne.n	8002bfc <_dtoa_r+0x604>
 8002bec:	2230      	movs	r2, #48	; 0x30
 8002bee:	700a      	strb	r2, [r1, #0]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	460a      	mov	r2, r1
 8002bf4:	7811      	ldrb	r1, [r2, #0]
 8002bf6:	3101      	adds	r1, #1
 8002bf8:	7011      	strb	r1, [r2, #0]
 8002bfa:	e7b0      	b.n	8002b5e <_dtoa_r+0x566>
 8002bfc:	4616      	mov	r6, r2
 8002bfe:	e7ec      	b.n	8002bda <_dtoa_r+0x5e2>
 8002c00:	ee27 7b04 	vmul.f64	d7, d7, d4
 8002c04:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8002c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c0c:	d1b3      	bne.n	8002b76 <_dtoa_r+0x57e>
 8002c0e:	e7d3      	b.n	8002bb8 <_dtoa_r+0x5c0>
 8002c10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c12:	2a00      	cmp	r2, #0
 8002c14:	f000 808d 	beq.w	8002d32 <_dtoa_r+0x73a>
 8002c18:	9a08      	ldr	r2, [sp, #32]
 8002c1a:	2a01      	cmp	r2, #1
 8002c1c:	dc72      	bgt.n	8002d04 <_dtoa_r+0x70c>
 8002c1e:	2f00      	cmp	r7, #0
 8002c20:	d06c      	beq.n	8002cfc <_dtoa_r+0x704>
 8002c22:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8002c26:	4645      	mov	r5, r8
 8002c28:	4656      	mov	r6, sl
 8002c2a:	9a07      	ldr	r2, [sp, #28]
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	441a      	add	r2, r3
 8002c30:	4620      	mov	r0, r4
 8002c32:	449a      	add	sl, r3
 8002c34:	9207      	str	r2, [sp, #28]
 8002c36:	f000 fb20 	bl	800327a <__i2b>
 8002c3a:	4607      	mov	r7, r0
 8002c3c:	2e00      	cmp	r6, #0
 8002c3e:	dd0b      	ble.n	8002c58 <_dtoa_r+0x660>
 8002c40:	9b07      	ldr	r3, [sp, #28]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	dd08      	ble.n	8002c58 <_dtoa_r+0x660>
 8002c46:	42b3      	cmp	r3, r6
 8002c48:	9a07      	ldr	r2, [sp, #28]
 8002c4a:	bfa8      	it	ge
 8002c4c:	4633      	movge	r3, r6
 8002c4e:	ebaa 0a03 	sub.w	sl, sl, r3
 8002c52:	1af6      	subs	r6, r6, r3
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	9307      	str	r3, [sp, #28]
 8002c58:	f1b8 0f00 	cmp.w	r8, #0
 8002c5c:	d01d      	beq.n	8002c9a <_dtoa_r+0x6a2>
 8002c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d06a      	beq.n	8002d3a <_dtoa_r+0x742>
 8002c64:	b18d      	cbz	r5, 8002c8a <_dtoa_r+0x692>
 8002c66:	4639      	mov	r1, r7
 8002c68:	462a      	mov	r2, r5
 8002c6a:	4620      	mov	r0, r4
 8002c6c:	f000 fba4 	bl	80033b8 <__pow5mult>
 8002c70:	9a01      	ldr	r2, [sp, #4]
 8002c72:	4601      	mov	r1, r0
 8002c74:	4607      	mov	r7, r0
 8002c76:	4620      	mov	r0, r4
 8002c78:	f000 fb08 	bl	800328c <__multiply>
 8002c7c:	9901      	ldr	r1, [sp, #4]
 8002c7e:	900c      	str	r0, [sp, #48]	; 0x30
 8002c80:	4620      	mov	r0, r4
 8002c82:	f000 fa5a 	bl	800313a <_Bfree>
 8002c86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002c88:	9301      	str	r3, [sp, #4]
 8002c8a:	ebb8 0205 	subs.w	r2, r8, r5
 8002c8e:	d004      	beq.n	8002c9a <_dtoa_r+0x6a2>
 8002c90:	9901      	ldr	r1, [sp, #4]
 8002c92:	4620      	mov	r0, r4
 8002c94:	f000 fb90 	bl	80033b8 <__pow5mult>
 8002c98:	9001      	str	r0, [sp, #4]
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	4620      	mov	r0, r4
 8002c9e:	f000 faec 	bl	800327a <__i2b>
 8002ca2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002ca4:	4605      	mov	r5, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f000 81ca 	beq.w	8003040 <_dtoa_r+0xa48>
 8002cac:	461a      	mov	r2, r3
 8002cae:	4601      	mov	r1, r0
 8002cb0:	4620      	mov	r0, r4
 8002cb2:	f000 fb81 	bl	80033b8 <__pow5mult>
 8002cb6:	9b08      	ldr	r3, [sp, #32]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	4605      	mov	r5, r0
 8002cbc:	dc44      	bgt.n	8002d48 <_dtoa_r+0x750>
 8002cbe:	9b02      	ldr	r3, [sp, #8]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d13c      	bne.n	8002d3e <_dtoa_r+0x746>
 8002cc4:	9b03      	ldr	r3, [sp, #12]
 8002cc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d137      	bne.n	8002d3e <_dtoa_r+0x746>
 8002cce:	9b03      	ldr	r3, [sp, #12]
 8002cd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cd4:	0d1b      	lsrs	r3, r3, #20
 8002cd6:	051b      	lsls	r3, r3, #20
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d033      	beq.n	8002d44 <_dtoa_r+0x74c>
 8002cdc:	9b07      	ldr	r3, [sp, #28]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	f10a 0a01 	add.w	sl, sl, #1
 8002ce4:	9307      	str	r3, [sp, #28]
 8002ce6:	f04f 0801 	mov.w	r8, #1
 8002cea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002cec:	bb73      	cbnz	r3, 8002d4c <_dtoa_r+0x754>
 8002cee:	2001      	movs	r0, #1
 8002cf0:	e034      	b.n	8002d5c <_dtoa_r+0x764>
 8002cf2:	bf00      	nop
 8002cf4:	08003c60 	.word	0x08003c60
 8002cf8:	08003c38 	.word	0x08003c38
 8002cfc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002cfe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8002d02:	e790      	b.n	8002c26 <_dtoa_r+0x62e>
 8002d04:	f109 35ff 	add.w	r5, r9, #4294967295
 8002d08:	45a8      	cmp	r8, r5
 8002d0a:	bfbf      	itttt	lt
 8002d0c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8002d0e:	eba5 0808 	sublt.w	r8, r5, r8
 8002d12:	4443      	addlt	r3, r8
 8002d14:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8002d16:	bfb6      	itet	lt
 8002d18:	46a8      	movlt	r8, r5
 8002d1a:	eba8 0505 	subge.w	r5, r8, r5
 8002d1e:	2500      	movlt	r5, #0
 8002d20:	f1b9 0f00 	cmp.w	r9, #0
 8002d24:	bfb9      	ittee	lt
 8002d26:	ebaa 0609 	sublt.w	r6, sl, r9
 8002d2a:	2300      	movlt	r3, #0
 8002d2c:	4656      	movge	r6, sl
 8002d2e:	464b      	movge	r3, r9
 8002d30:	e77b      	b.n	8002c2a <_dtoa_r+0x632>
 8002d32:	4645      	mov	r5, r8
 8002d34:	4656      	mov	r6, sl
 8002d36:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002d38:	e780      	b.n	8002c3c <_dtoa_r+0x644>
 8002d3a:	4642      	mov	r2, r8
 8002d3c:	e7a8      	b.n	8002c90 <_dtoa_r+0x698>
 8002d3e:	f04f 0800 	mov.w	r8, #0
 8002d42:	e7d2      	b.n	8002cea <_dtoa_r+0x6f2>
 8002d44:	4698      	mov	r8, r3
 8002d46:	e7d0      	b.n	8002cea <_dtoa_r+0x6f2>
 8002d48:	f04f 0800 	mov.w	r8, #0
 8002d4c:	692b      	ldr	r3, [r5, #16]
 8002d4e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8002d52:	6918      	ldr	r0, [r3, #16]
 8002d54:	f000 fa43 	bl	80031de <__hi0bits>
 8002d58:	f1c0 0020 	rsb	r0, r0, #32
 8002d5c:	9b07      	ldr	r3, [sp, #28]
 8002d5e:	4418      	add	r0, r3
 8002d60:	f010 001f 	ands.w	r0, r0, #31
 8002d64:	d047      	beq.n	8002df6 <_dtoa_r+0x7fe>
 8002d66:	f1c0 0320 	rsb	r3, r0, #32
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	dd3b      	ble.n	8002de6 <_dtoa_r+0x7ee>
 8002d6e:	9b07      	ldr	r3, [sp, #28]
 8002d70:	f1c0 001c 	rsb	r0, r0, #28
 8002d74:	4482      	add	sl, r0
 8002d76:	4406      	add	r6, r0
 8002d78:	4403      	add	r3, r0
 8002d7a:	9307      	str	r3, [sp, #28]
 8002d7c:	f1ba 0f00 	cmp.w	sl, #0
 8002d80:	dd05      	ble.n	8002d8e <_dtoa_r+0x796>
 8002d82:	4652      	mov	r2, sl
 8002d84:	9901      	ldr	r1, [sp, #4]
 8002d86:	4620      	mov	r0, r4
 8002d88:	f000 fb64 	bl	8003454 <__lshift>
 8002d8c:	9001      	str	r0, [sp, #4]
 8002d8e:	9b07      	ldr	r3, [sp, #28]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	dd05      	ble.n	8002da0 <_dtoa_r+0x7a8>
 8002d94:	4629      	mov	r1, r5
 8002d96:	461a      	mov	r2, r3
 8002d98:	4620      	mov	r0, r4
 8002d9a:	f000 fb5b 	bl	8003454 <__lshift>
 8002d9e:	4605      	mov	r5, r0
 8002da0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002da2:	b353      	cbz	r3, 8002dfa <_dtoa_r+0x802>
 8002da4:	4629      	mov	r1, r5
 8002da6:	9801      	ldr	r0, [sp, #4]
 8002da8:	f000 fba8 	bl	80034fc <__mcmp>
 8002dac:	2800      	cmp	r0, #0
 8002dae:	da24      	bge.n	8002dfa <_dtoa_r+0x802>
 8002db0:	2300      	movs	r3, #0
 8002db2:	220a      	movs	r2, #10
 8002db4:	9901      	ldr	r1, [sp, #4]
 8002db6:	4620      	mov	r0, r4
 8002db8:	f000 f9d6 	bl	8003168 <__multadd>
 8002dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dbe:	9001      	str	r0, [sp, #4]
 8002dc0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 8142 	beq.w	800304e <_dtoa_r+0xa56>
 8002dca:	2300      	movs	r3, #0
 8002dcc:	4639      	mov	r1, r7
 8002dce:	220a      	movs	r2, #10
 8002dd0:	4620      	mov	r0, r4
 8002dd2:	f000 f9c9 	bl	8003168 <__multadd>
 8002dd6:	9b06      	ldr	r3, [sp, #24]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	4607      	mov	r7, r0
 8002ddc:	dc4b      	bgt.n	8002e76 <_dtoa_r+0x87e>
 8002dde:	9b08      	ldr	r3, [sp, #32]
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	dd48      	ble.n	8002e76 <_dtoa_r+0x87e>
 8002de4:	e011      	b.n	8002e0a <_dtoa_r+0x812>
 8002de6:	d0c9      	beq.n	8002d7c <_dtoa_r+0x784>
 8002de8:	9a07      	ldr	r2, [sp, #28]
 8002dea:	331c      	adds	r3, #28
 8002dec:	441a      	add	r2, r3
 8002dee:	449a      	add	sl, r3
 8002df0:	441e      	add	r6, r3
 8002df2:	4613      	mov	r3, r2
 8002df4:	e7c1      	b.n	8002d7a <_dtoa_r+0x782>
 8002df6:	4603      	mov	r3, r0
 8002df8:	e7f6      	b.n	8002de8 <_dtoa_r+0x7f0>
 8002dfa:	f1b9 0f00 	cmp.w	r9, #0
 8002dfe:	dc34      	bgt.n	8002e6a <_dtoa_r+0x872>
 8002e00:	9b08      	ldr	r3, [sp, #32]
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	dd31      	ble.n	8002e6a <_dtoa_r+0x872>
 8002e06:	f8cd 9018 	str.w	r9, [sp, #24]
 8002e0a:	9b06      	ldr	r3, [sp, #24]
 8002e0c:	b963      	cbnz	r3, 8002e28 <_dtoa_r+0x830>
 8002e0e:	4629      	mov	r1, r5
 8002e10:	2205      	movs	r2, #5
 8002e12:	4620      	mov	r0, r4
 8002e14:	f000 f9a8 	bl	8003168 <__multadd>
 8002e18:	4601      	mov	r1, r0
 8002e1a:	4605      	mov	r5, r0
 8002e1c:	9801      	ldr	r0, [sp, #4]
 8002e1e:	f000 fb6d 	bl	80034fc <__mcmp>
 8002e22:	2800      	cmp	r0, #0
 8002e24:	f73f adfc 	bgt.w	8002a20 <_dtoa_r+0x428>
 8002e28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e2a:	9e04      	ldr	r6, [sp, #16]
 8002e2c:	ea6f 0b03 	mvn.w	fp, r3
 8002e30:	f04f 0900 	mov.w	r9, #0
 8002e34:	4629      	mov	r1, r5
 8002e36:	4620      	mov	r0, r4
 8002e38:	f000 f97f 	bl	800313a <_Bfree>
 8002e3c:	2f00      	cmp	r7, #0
 8002e3e:	f43f aebb 	beq.w	8002bb8 <_dtoa_r+0x5c0>
 8002e42:	f1b9 0f00 	cmp.w	r9, #0
 8002e46:	d005      	beq.n	8002e54 <_dtoa_r+0x85c>
 8002e48:	45b9      	cmp	r9, r7
 8002e4a:	d003      	beq.n	8002e54 <_dtoa_r+0x85c>
 8002e4c:	4649      	mov	r1, r9
 8002e4e:	4620      	mov	r0, r4
 8002e50:	f000 f973 	bl	800313a <_Bfree>
 8002e54:	4639      	mov	r1, r7
 8002e56:	4620      	mov	r0, r4
 8002e58:	f000 f96f 	bl	800313a <_Bfree>
 8002e5c:	e6ac      	b.n	8002bb8 <_dtoa_r+0x5c0>
 8002e5e:	2500      	movs	r5, #0
 8002e60:	462f      	mov	r7, r5
 8002e62:	e7e1      	b.n	8002e28 <_dtoa_r+0x830>
 8002e64:	469b      	mov	fp, r3
 8002e66:	462f      	mov	r7, r5
 8002e68:	e5da      	b.n	8002a20 <_dtoa_r+0x428>
 8002e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e6c:	f8cd 9018 	str.w	r9, [sp, #24]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 80f3 	beq.w	800305c <_dtoa_r+0xa64>
 8002e76:	2e00      	cmp	r6, #0
 8002e78:	dd05      	ble.n	8002e86 <_dtoa_r+0x88e>
 8002e7a:	4639      	mov	r1, r7
 8002e7c:	4632      	mov	r2, r6
 8002e7e:	4620      	mov	r0, r4
 8002e80:	f000 fae8 	bl	8003454 <__lshift>
 8002e84:	4607      	mov	r7, r0
 8002e86:	f1b8 0f00 	cmp.w	r8, #0
 8002e8a:	d04c      	beq.n	8002f26 <_dtoa_r+0x92e>
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	4620      	mov	r0, r4
 8002e90:	f000 f91f 	bl	80030d2 <_Balloc>
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	3202      	adds	r2, #2
 8002e98:	4606      	mov	r6, r0
 8002e9a:	0092      	lsls	r2, r2, #2
 8002e9c:	f107 010c 	add.w	r1, r7, #12
 8002ea0:	300c      	adds	r0, #12
 8002ea2:	f000 f90b 	bl	80030bc <memcpy>
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	4631      	mov	r1, r6
 8002eaa:	4620      	mov	r0, r4
 8002eac:	f000 fad2 	bl	8003454 <__lshift>
 8002eb0:	9b02      	ldr	r3, [sp, #8]
 8002eb2:	f8dd a010 	ldr.w	sl, [sp, #16]
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	46b9      	mov	r9, r7
 8002ebc:	9307      	str	r3, [sp, #28]
 8002ebe:	4607      	mov	r7, r0
 8002ec0:	4629      	mov	r1, r5
 8002ec2:	9801      	ldr	r0, [sp, #4]
 8002ec4:	f7ff fb0c 	bl	80024e0 <quorem>
 8002ec8:	4649      	mov	r1, r9
 8002eca:	4606      	mov	r6, r0
 8002ecc:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8002ed0:	9801      	ldr	r0, [sp, #4]
 8002ed2:	f000 fb13 	bl	80034fc <__mcmp>
 8002ed6:	463a      	mov	r2, r7
 8002ed8:	9002      	str	r0, [sp, #8]
 8002eda:	4629      	mov	r1, r5
 8002edc:	4620      	mov	r0, r4
 8002ede:	f000 fb27 	bl	8003530 <__mdiff>
 8002ee2:	68c3      	ldr	r3, [r0, #12]
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	bb03      	cbnz	r3, 8002f2a <_dtoa_r+0x932>
 8002ee8:	4601      	mov	r1, r0
 8002eea:	9009      	str	r0, [sp, #36]	; 0x24
 8002eec:	9801      	ldr	r0, [sp, #4]
 8002eee:	f000 fb05 	bl	80034fc <__mcmp>
 8002ef2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	4611      	mov	r1, r2
 8002ef8:	4620      	mov	r0, r4
 8002efa:	9309      	str	r3, [sp, #36]	; 0x24
 8002efc:	f000 f91d 	bl	800313a <_Bfree>
 8002f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f02:	b9a3      	cbnz	r3, 8002f2e <_dtoa_r+0x936>
 8002f04:	9a08      	ldr	r2, [sp, #32]
 8002f06:	b992      	cbnz	r2, 8002f2e <_dtoa_r+0x936>
 8002f08:	9a07      	ldr	r2, [sp, #28]
 8002f0a:	b982      	cbnz	r2, 8002f2e <_dtoa_r+0x936>
 8002f0c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8002f10:	d029      	beq.n	8002f66 <_dtoa_r+0x96e>
 8002f12:	9b02      	ldr	r3, [sp, #8]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	dd01      	ble.n	8002f1c <_dtoa_r+0x924>
 8002f18:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8002f1c:	f10a 0601 	add.w	r6, sl, #1
 8002f20:	f88a 8000 	strb.w	r8, [sl]
 8002f24:	e786      	b.n	8002e34 <_dtoa_r+0x83c>
 8002f26:	4638      	mov	r0, r7
 8002f28:	e7c2      	b.n	8002eb0 <_dtoa_r+0x8b8>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e7e3      	b.n	8002ef6 <_dtoa_r+0x8fe>
 8002f2e:	9a02      	ldr	r2, [sp, #8]
 8002f30:	2a00      	cmp	r2, #0
 8002f32:	db04      	blt.n	8002f3e <_dtoa_r+0x946>
 8002f34:	d124      	bne.n	8002f80 <_dtoa_r+0x988>
 8002f36:	9a08      	ldr	r2, [sp, #32]
 8002f38:	bb12      	cbnz	r2, 8002f80 <_dtoa_r+0x988>
 8002f3a:	9a07      	ldr	r2, [sp, #28]
 8002f3c:	bb02      	cbnz	r2, 8002f80 <_dtoa_r+0x988>
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	ddec      	ble.n	8002f1c <_dtoa_r+0x924>
 8002f42:	2201      	movs	r2, #1
 8002f44:	9901      	ldr	r1, [sp, #4]
 8002f46:	4620      	mov	r0, r4
 8002f48:	f000 fa84 	bl	8003454 <__lshift>
 8002f4c:	4629      	mov	r1, r5
 8002f4e:	9001      	str	r0, [sp, #4]
 8002f50:	f000 fad4 	bl	80034fc <__mcmp>
 8002f54:	2800      	cmp	r0, #0
 8002f56:	dc03      	bgt.n	8002f60 <_dtoa_r+0x968>
 8002f58:	d1e0      	bne.n	8002f1c <_dtoa_r+0x924>
 8002f5a:	f018 0f01 	tst.w	r8, #1
 8002f5e:	d0dd      	beq.n	8002f1c <_dtoa_r+0x924>
 8002f60:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8002f64:	d1d8      	bne.n	8002f18 <_dtoa_r+0x920>
 8002f66:	2339      	movs	r3, #57	; 0x39
 8002f68:	f10a 0601 	add.w	r6, sl, #1
 8002f6c:	f88a 3000 	strb.w	r3, [sl]
 8002f70:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8002f74:	2b39      	cmp	r3, #57	; 0x39
 8002f76:	f106 32ff 	add.w	r2, r6, #4294967295
 8002f7a:	d04c      	beq.n	8003016 <_dtoa_r+0xa1e>
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	e051      	b.n	8003024 <_dtoa_r+0xa2c>
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f10a 0601 	add.w	r6, sl, #1
 8002f86:	dd05      	ble.n	8002f94 <_dtoa_r+0x99c>
 8002f88:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8002f8c:	d0eb      	beq.n	8002f66 <_dtoa_r+0x96e>
 8002f8e:	f108 0801 	add.w	r8, r8, #1
 8002f92:	e7c5      	b.n	8002f20 <_dtoa_r+0x928>
 8002f94:	9b04      	ldr	r3, [sp, #16]
 8002f96:	9a06      	ldr	r2, [sp, #24]
 8002f98:	f806 8c01 	strb.w	r8, [r6, #-1]
 8002f9c:	1af3      	subs	r3, r6, r3
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d021      	beq.n	8002fe6 <_dtoa_r+0x9ee>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	220a      	movs	r2, #10
 8002fa6:	9901      	ldr	r1, [sp, #4]
 8002fa8:	4620      	mov	r0, r4
 8002faa:	f000 f8dd 	bl	8003168 <__multadd>
 8002fae:	45b9      	cmp	r9, r7
 8002fb0:	9001      	str	r0, [sp, #4]
 8002fb2:	f04f 0300 	mov.w	r3, #0
 8002fb6:	f04f 020a 	mov.w	r2, #10
 8002fba:	4649      	mov	r1, r9
 8002fbc:	4620      	mov	r0, r4
 8002fbe:	d105      	bne.n	8002fcc <_dtoa_r+0x9d4>
 8002fc0:	f000 f8d2 	bl	8003168 <__multadd>
 8002fc4:	4681      	mov	r9, r0
 8002fc6:	4607      	mov	r7, r0
 8002fc8:	46b2      	mov	sl, r6
 8002fca:	e779      	b.n	8002ec0 <_dtoa_r+0x8c8>
 8002fcc:	f000 f8cc 	bl	8003168 <__multadd>
 8002fd0:	4639      	mov	r1, r7
 8002fd2:	4681      	mov	r9, r0
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	220a      	movs	r2, #10
 8002fd8:	4620      	mov	r0, r4
 8002fda:	f000 f8c5 	bl	8003168 <__multadd>
 8002fde:	4607      	mov	r7, r0
 8002fe0:	e7f2      	b.n	8002fc8 <_dtoa_r+0x9d0>
 8002fe2:	f04f 0900 	mov.w	r9, #0
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	9901      	ldr	r1, [sp, #4]
 8002fea:	4620      	mov	r0, r4
 8002fec:	f000 fa32 	bl	8003454 <__lshift>
 8002ff0:	4629      	mov	r1, r5
 8002ff2:	9001      	str	r0, [sp, #4]
 8002ff4:	f000 fa82 	bl	80034fc <__mcmp>
 8002ff8:	2800      	cmp	r0, #0
 8002ffa:	dcb9      	bgt.n	8002f70 <_dtoa_r+0x978>
 8002ffc:	d102      	bne.n	8003004 <_dtoa_r+0xa0c>
 8002ffe:	f018 0f01 	tst.w	r8, #1
 8003002:	d1b5      	bne.n	8002f70 <_dtoa_r+0x978>
 8003004:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8003008:	2b30      	cmp	r3, #48	; 0x30
 800300a:	f106 32ff 	add.w	r2, r6, #4294967295
 800300e:	f47f af11 	bne.w	8002e34 <_dtoa_r+0x83c>
 8003012:	4616      	mov	r6, r2
 8003014:	e7f6      	b.n	8003004 <_dtoa_r+0xa0c>
 8003016:	9b04      	ldr	r3, [sp, #16]
 8003018:	4293      	cmp	r3, r2
 800301a:	d105      	bne.n	8003028 <_dtoa_r+0xa30>
 800301c:	9a04      	ldr	r2, [sp, #16]
 800301e:	f10b 0b01 	add.w	fp, fp, #1
 8003022:	2331      	movs	r3, #49	; 0x31
 8003024:	7013      	strb	r3, [r2, #0]
 8003026:	e705      	b.n	8002e34 <_dtoa_r+0x83c>
 8003028:	4616      	mov	r6, r2
 800302a:	e7a1      	b.n	8002f70 <_dtoa_r+0x978>
 800302c:	4b16      	ldr	r3, [pc, #88]	; (8003088 <_dtoa_r+0xa90>)
 800302e:	f7ff bb48 	b.w	80026c2 <_dtoa_r+0xca>
 8003032:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003034:	2b00      	cmp	r3, #0
 8003036:	f47f ab23 	bne.w	8002680 <_dtoa_r+0x88>
 800303a:	4b14      	ldr	r3, [pc, #80]	; (800308c <_dtoa_r+0xa94>)
 800303c:	f7ff bb41 	b.w	80026c2 <_dtoa_r+0xca>
 8003040:	9b08      	ldr	r3, [sp, #32]
 8003042:	2b01      	cmp	r3, #1
 8003044:	f77f ae3b 	ble.w	8002cbe <_dtoa_r+0x6c6>
 8003048:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800304c:	e64f      	b.n	8002cee <_dtoa_r+0x6f6>
 800304e:	9b06      	ldr	r3, [sp, #24]
 8003050:	2b00      	cmp	r3, #0
 8003052:	dc03      	bgt.n	800305c <_dtoa_r+0xa64>
 8003054:	9b08      	ldr	r3, [sp, #32]
 8003056:	2b02      	cmp	r3, #2
 8003058:	f73f aed7 	bgt.w	8002e0a <_dtoa_r+0x812>
 800305c:	9e04      	ldr	r6, [sp, #16]
 800305e:	9801      	ldr	r0, [sp, #4]
 8003060:	4629      	mov	r1, r5
 8003062:	f7ff fa3d 	bl	80024e0 <quorem>
 8003066:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800306a:	f806 8b01 	strb.w	r8, [r6], #1
 800306e:	9b04      	ldr	r3, [sp, #16]
 8003070:	9a06      	ldr	r2, [sp, #24]
 8003072:	1af3      	subs	r3, r6, r3
 8003074:	429a      	cmp	r2, r3
 8003076:	ddb4      	ble.n	8002fe2 <_dtoa_r+0x9ea>
 8003078:	2300      	movs	r3, #0
 800307a:	220a      	movs	r2, #10
 800307c:	9901      	ldr	r1, [sp, #4]
 800307e:	4620      	mov	r0, r4
 8003080:	f000 f872 	bl	8003168 <__multadd>
 8003084:	9001      	str	r0, [sp, #4]
 8003086:	e7ea      	b.n	800305e <_dtoa_r+0xa66>
 8003088:	08003c00 	.word	0x08003c00
 800308c:	08003c24 	.word	0x08003c24

08003090 <_localeconv_r>:
 8003090:	4b04      	ldr	r3, [pc, #16]	; (80030a4 <_localeconv_r+0x14>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6a18      	ldr	r0, [r3, #32]
 8003096:	4b04      	ldr	r3, [pc, #16]	; (80030a8 <_localeconv_r+0x18>)
 8003098:	2800      	cmp	r0, #0
 800309a:	bf08      	it	eq
 800309c:	4618      	moveq	r0, r3
 800309e:	30f0      	adds	r0, #240	; 0xf0
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	2000006c 	.word	0x2000006c
 80030a8:	200000d0 	.word	0x200000d0

080030ac <malloc>:
 80030ac:	4b02      	ldr	r3, [pc, #8]	; (80030b8 <malloc+0xc>)
 80030ae:	4601      	mov	r1, r0
 80030b0:	6818      	ldr	r0, [r3, #0]
 80030b2:	f000 bb45 	b.w	8003740 <_malloc_r>
 80030b6:	bf00      	nop
 80030b8:	2000006c 	.word	0x2000006c

080030bc <memcpy>:
 80030bc:	b510      	push	{r4, lr}
 80030be:	1e43      	subs	r3, r0, #1
 80030c0:	440a      	add	r2, r1
 80030c2:	4291      	cmp	r1, r2
 80030c4:	d100      	bne.n	80030c8 <memcpy+0xc>
 80030c6:	bd10      	pop	{r4, pc}
 80030c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80030cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80030d0:	e7f7      	b.n	80030c2 <memcpy+0x6>

080030d2 <_Balloc>:
 80030d2:	b570      	push	{r4, r5, r6, lr}
 80030d4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80030d6:	4604      	mov	r4, r0
 80030d8:	460e      	mov	r6, r1
 80030da:	b93d      	cbnz	r5, 80030ec <_Balloc+0x1a>
 80030dc:	2010      	movs	r0, #16
 80030de:	f7ff ffe5 	bl	80030ac <malloc>
 80030e2:	6260      	str	r0, [r4, #36]	; 0x24
 80030e4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80030e8:	6005      	str	r5, [r0, #0]
 80030ea:	60c5      	str	r5, [r0, #12]
 80030ec:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80030ee:	68eb      	ldr	r3, [r5, #12]
 80030f0:	b183      	cbz	r3, 8003114 <_Balloc+0x42>
 80030f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80030fa:	b9b8      	cbnz	r0, 800312c <_Balloc+0x5a>
 80030fc:	2101      	movs	r1, #1
 80030fe:	fa01 f506 	lsl.w	r5, r1, r6
 8003102:	1d6a      	adds	r2, r5, #5
 8003104:	0092      	lsls	r2, r2, #2
 8003106:	4620      	mov	r0, r4
 8003108:	f000 fabe 	bl	8003688 <_calloc_r>
 800310c:	b160      	cbz	r0, 8003128 <_Balloc+0x56>
 800310e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8003112:	e00e      	b.n	8003132 <_Balloc+0x60>
 8003114:	2221      	movs	r2, #33	; 0x21
 8003116:	2104      	movs	r1, #4
 8003118:	4620      	mov	r0, r4
 800311a:	f000 fab5 	bl	8003688 <_calloc_r>
 800311e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003120:	60e8      	str	r0, [r5, #12]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1e4      	bne.n	80030f2 <_Balloc+0x20>
 8003128:	2000      	movs	r0, #0
 800312a:	bd70      	pop	{r4, r5, r6, pc}
 800312c:	6802      	ldr	r2, [r0, #0]
 800312e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8003132:	2300      	movs	r3, #0
 8003134:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003138:	e7f7      	b.n	800312a <_Balloc+0x58>

0800313a <_Bfree>:
 800313a:	b570      	push	{r4, r5, r6, lr}
 800313c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800313e:	4606      	mov	r6, r0
 8003140:	460d      	mov	r5, r1
 8003142:	b93c      	cbnz	r4, 8003154 <_Bfree+0x1a>
 8003144:	2010      	movs	r0, #16
 8003146:	f7ff ffb1 	bl	80030ac <malloc>
 800314a:	6270      	str	r0, [r6, #36]	; 0x24
 800314c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003150:	6004      	str	r4, [r0, #0]
 8003152:	60c4      	str	r4, [r0, #12]
 8003154:	b13d      	cbz	r5, 8003166 <_Bfree+0x2c>
 8003156:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003158:	686a      	ldr	r2, [r5, #4]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003160:	6029      	str	r1, [r5, #0]
 8003162:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8003166:	bd70      	pop	{r4, r5, r6, pc}

08003168 <__multadd>:
 8003168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800316c:	690d      	ldr	r5, [r1, #16]
 800316e:	461f      	mov	r7, r3
 8003170:	4606      	mov	r6, r0
 8003172:	460c      	mov	r4, r1
 8003174:	f101 0c14 	add.w	ip, r1, #20
 8003178:	2300      	movs	r3, #0
 800317a:	f8dc 0000 	ldr.w	r0, [ip]
 800317e:	b281      	uxth	r1, r0
 8003180:	fb02 7101 	mla	r1, r2, r1, r7
 8003184:	0c0f      	lsrs	r7, r1, #16
 8003186:	0c00      	lsrs	r0, r0, #16
 8003188:	fb02 7000 	mla	r0, r2, r0, r7
 800318c:	b289      	uxth	r1, r1
 800318e:	3301      	adds	r3, #1
 8003190:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8003194:	429d      	cmp	r5, r3
 8003196:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800319a:	f84c 1b04 	str.w	r1, [ip], #4
 800319e:	dcec      	bgt.n	800317a <__multadd+0x12>
 80031a0:	b1d7      	cbz	r7, 80031d8 <__multadd+0x70>
 80031a2:	68a3      	ldr	r3, [r4, #8]
 80031a4:	42ab      	cmp	r3, r5
 80031a6:	dc12      	bgt.n	80031ce <__multadd+0x66>
 80031a8:	6861      	ldr	r1, [r4, #4]
 80031aa:	4630      	mov	r0, r6
 80031ac:	3101      	adds	r1, #1
 80031ae:	f7ff ff90 	bl	80030d2 <_Balloc>
 80031b2:	6922      	ldr	r2, [r4, #16]
 80031b4:	3202      	adds	r2, #2
 80031b6:	f104 010c 	add.w	r1, r4, #12
 80031ba:	4680      	mov	r8, r0
 80031bc:	0092      	lsls	r2, r2, #2
 80031be:	300c      	adds	r0, #12
 80031c0:	f7ff ff7c 	bl	80030bc <memcpy>
 80031c4:	4621      	mov	r1, r4
 80031c6:	4630      	mov	r0, r6
 80031c8:	f7ff ffb7 	bl	800313a <_Bfree>
 80031cc:	4644      	mov	r4, r8
 80031ce:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80031d2:	3501      	adds	r5, #1
 80031d4:	615f      	str	r7, [r3, #20]
 80031d6:	6125      	str	r5, [r4, #16]
 80031d8:	4620      	mov	r0, r4
 80031da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080031de <__hi0bits>:
 80031de:	0c02      	lsrs	r2, r0, #16
 80031e0:	0412      	lsls	r2, r2, #16
 80031e2:	4603      	mov	r3, r0
 80031e4:	b9b2      	cbnz	r2, 8003214 <__hi0bits+0x36>
 80031e6:	0403      	lsls	r3, r0, #16
 80031e8:	2010      	movs	r0, #16
 80031ea:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80031ee:	bf04      	itt	eq
 80031f0:	021b      	lsleq	r3, r3, #8
 80031f2:	3008      	addeq	r0, #8
 80031f4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80031f8:	bf04      	itt	eq
 80031fa:	011b      	lsleq	r3, r3, #4
 80031fc:	3004      	addeq	r0, #4
 80031fe:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8003202:	bf04      	itt	eq
 8003204:	009b      	lsleq	r3, r3, #2
 8003206:	3002      	addeq	r0, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	db06      	blt.n	800321a <__hi0bits+0x3c>
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	d503      	bpl.n	8003218 <__hi0bits+0x3a>
 8003210:	3001      	adds	r0, #1
 8003212:	4770      	bx	lr
 8003214:	2000      	movs	r0, #0
 8003216:	e7e8      	b.n	80031ea <__hi0bits+0xc>
 8003218:	2020      	movs	r0, #32
 800321a:	4770      	bx	lr

0800321c <__lo0bits>:
 800321c:	6803      	ldr	r3, [r0, #0]
 800321e:	f013 0207 	ands.w	r2, r3, #7
 8003222:	4601      	mov	r1, r0
 8003224:	d00b      	beq.n	800323e <__lo0bits+0x22>
 8003226:	07da      	lsls	r2, r3, #31
 8003228:	d423      	bmi.n	8003272 <__lo0bits+0x56>
 800322a:	0798      	lsls	r0, r3, #30
 800322c:	bf49      	itett	mi
 800322e:	085b      	lsrmi	r3, r3, #1
 8003230:	089b      	lsrpl	r3, r3, #2
 8003232:	2001      	movmi	r0, #1
 8003234:	600b      	strmi	r3, [r1, #0]
 8003236:	bf5c      	itt	pl
 8003238:	600b      	strpl	r3, [r1, #0]
 800323a:	2002      	movpl	r0, #2
 800323c:	4770      	bx	lr
 800323e:	b298      	uxth	r0, r3
 8003240:	b9a8      	cbnz	r0, 800326e <__lo0bits+0x52>
 8003242:	0c1b      	lsrs	r3, r3, #16
 8003244:	2010      	movs	r0, #16
 8003246:	f013 0fff 	tst.w	r3, #255	; 0xff
 800324a:	bf04      	itt	eq
 800324c:	0a1b      	lsreq	r3, r3, #8
 800324e:	3008      	addeq	r0, #8
 8003250:	071a      	lsls	r2, r3, #28
 8003252:	bf04      	itt	eq
 8003254:	091b      	lsreq	r3, r3, #4
 8003256:	3004      	addeq	r0, #4
 8003258:	079a      	lsls	r2, r3, #30
 800325a:	bf04      	itt	eq
 800325c:	089b      	lsreq	r3, r3, #2
 800325e:	3002      	addeq	r0, #2
 8003260:	07da      	lsls	r2, r3, #31
 8003262:	d402      	bmi.n	800326a <__lo0bits+0x4e>
 8003264:	085b      	lsrs	r3, r3, #1
 8003266:	d006      	beq.n	8003276 <__lo0bits+0x5a>
 8003268:	3001      	adds	r0, #1
 800326a:	600b      	str	r3, [r1, #0]
 800326c:	4770      	bx	lr
 800326e:	4610      	mov	r0, r2
 8003270:	e7e9      	b.n	8003246 <__lo0bits+0x2a>
 8003272:	2000      	movs	r0, #0
 8003274:	4770      	bx	lr
 8003276:	2020      	movs	r0, #32
 8003278:	4770      	bx	lr

0800327a <__i2b>:
 800327a:	b510      	push	{r4, lr}
 800327c:	460c      	mov	r4, r1
 800327e:	2101      	movs	r1, #1
 8003280:	f7ff ff27 	bl	80030d2 <_Balloc>
 8003284:	2201      	movs	r2, #1
 8003286:	6144      	str	r4, [r0, #20]
 8003288:	6102      	str	r2, [r0, #16]
 800328a:	bd10      	pop	{r4, pc}

0800328c <__multiply>:
 800328c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003290:	4614      	mov	r4, r2
 8003292:	690a      	ldr	r2, [r1, #16]
 8003294:	6923      	ldr	r3, [r4, #16]
 8003296:	429a      	cmp	r2, r3
 8003298:	bfb8      	it	lt
 800329a:	460b      	movlt	r3, r1
 800329c:	4688      	mov	r8, r1
 800329e:	bfbc      	itt	lt
 80032a0:	46a0      	movlt	r8, r4
 80032a2:	461c      	movlt	r4, r3
 80032a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80032a8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80032ac:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80032b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80032b4:	eb07 0609 	add.w	r6, r7, r9
 80032b8:	42b3      	cmp	r3, r6
 80032ba:	bfb8      	it	lt
 80032bc:	3101      	addlt	r1, #1
 80032be:	f7ff ff08 	bl	80030d2 <_Balloc>
 80032c2:	f100 0514 	add.w	r5, r0, #20
 80032c6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80032ca:	462b      	mov	r3, r5
 80032cc:	2200      	movs	r2, #0
 80032ce:	4573      	cmp	r3, lr
 80032d0:	d316      	bcc.n	8003300 <__multiply+0x74>
 80032d2:	f104 0214 	add.w	r2, r4, #20
 80032d6:	f108 0114 	add.w	r1, r8, #20
 80032da:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80032de:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	9b00      	ldr	r3, [sp, #0]
 80032e6:	9201      	str	r2, [sp, #4]
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d80c      	bhi.n	8003306 <__multiply+0x7a>
 80032ec:	2e00      	cmp	r6, #0
 80032ee:	dd03      	ble.n	80032f8 <__multiply+0x6c>
 80032f0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d05d      	beq.n	80033b4 <__multiply+0x128>
 80032f8:	6106      	str	r6, [r0, #16]
 80032fa:	b003      	add	sp, #12
 80032fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003300:	f843 2b04 	str.w	r2, [r3], #4
 8003304:	e7e3      	b.n	80032ce <__multiply+0x42>
 8003306:	f8b2 b000 	ldrh.w	fp, [r2]
 800330a:	f1bb 0f00 	cmp.w	fp, #0
 800330e:	d023      	beq.n	8003358 <__multiply+0xcc>
 8003310:	4689      	mov	r9, r1
 8003312:	46ac      	mov	ip, r5
 8003314:	f04f 0800 	mov.w	r8, #0
 8003318:	f859 4b04 	ldr.w	r4, [r9], #4
 800331c:	f8dc a000 	ldr.w	sl, [ip]
 8003320:	b2a3      	uxth	r3, r4
 8003322:	fa1f fa8a 	uxth.w	sl, sl
 8003326:	fb0b a303 	mla	r3, fp, r3, sl
 800332a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800332e:	f8dc 4000 	ldr.w	r4, [ip]
 8003332:	4443      	add	r3, r8
 8003334:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8003338:	fb0b 840a 	mla	r4, fp, sl, r8
 800333c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8003340:	46e2      	mov	sl, ip
 8003342:	b29b      	uxth	r3, r3
 8003344:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003348:	454f      	cmp	r7, r9
 800334a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800334e:	f84a 3b04 	str.w	r3, [sl], #4
 8003352:	d82b      	bhi.n	80033ac <__multiply+0x120>
 8003354:	f8cc 8004 	str.w	r8, [ip, #4]
 8003358:	9b01      	ldr	r3, [sp, #4]
 800335a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800335e:	3204      	adds	r2, #4
 8003360:	f1ba 0f00 	cmp.w	sl, #0
 8003364:	d020      	beq.n	80033a8 <__multiply+0x11c>
 8003366:	682b      	ldr	r3, [r5, #0]
 8003368:	4689      	mov	r9, r1
 800336a:	46a8      	mov	r8, r5
 800336c:	f04f 0b00 	mov.w	fp, #0
 8003370:	f8b9 c000 	ldrh.w	ip, [r9]
 8003374:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8003378:	fb0a 440c 	mla	r4, sl, ip, r4
 800337c:	445c      	add	r4, fp
 800337e:	46c4      	mov	ip, r8
 8003380:	b29b      	uxth	r3, r3
 8003382:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003386:	f84c 3b04 	str.w	r3, [ip], #4
 800338a:	f859 3b04 	ldr.w	r3, [r9], #4
 800338e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8003392:	0c1b      	lsrs	r3, r3, #16
 8003394:	fb0a b303 	mla	r3, sl, r3, fp
 8003398:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800339c:	454f      	cmp	r7, r9
 800339e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80033a2:	d805      	bhi.n	80033b0 <__multiply+0x124>
 80033a4:	f8c8 3004 	str.w	r3, [r8, #4]
 80033a8:	3504      	adds	r5, #4
 80033aa:	e79b      	b.n	80032e4 <__multiply+0x58>
 80033ac:	46d4      	mov	ip, sl
 80033ae:	e7b3      	b.n	8003318 <__multiply+0x8c>
 80033b0:	46e0      	mov	r8, ip
 80033b2:	e7dd      	b.n	8003370 <__multiply+0xe4>
 80033b4:	3e01      	subs	r6, #1
 80033b6:	e799      	b.n	80032ec <__multiply+0x60>

080033b8 <__pow5mult>:
 80033b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033bc:	4615      	mov	r5, r2
 80033be:	f012 0203 	ands.w	r2, r2, #3
 80033c2:	4606      	mov	r6, r0
 80033c4:	460f      	mov	r7, r1
 80033c6:	d007      	beq.n	80033d8 <__pow5mult+0x20>
 80033c8:	3a01      	subs	r2, #1
 80033ca:	4c21      	ldr	r4, [pc, #132]	; (8003450 <__pow5mult+0x98>)
 80033cc:	2300      	movs	r3, #0
 80033ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80033d2:	f7ff fec9 	bl	8003168 <__multadd>
 80033d6:	4607      	mov	r7, r0
 80033d8:	10ad      	asrs	r5, r5, #2
 80033da:	d035      	beq.n	8003448 <__pow5mult+0x90>
 80033dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80033de:	b93c      	cbnz	r4, 80033f0 <__pow5mult+0x38>
 80033e0:	2010      	movs	r0, #16
 80033e2:	f7ff fe63 	bl	80030ac <malloc>
 80033e6:	6270      	str	r0, [r6, #36]	; 0x24
 80033e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80033ec:	6004      	str	r4, [r0, #0]
 80033ee:	60c4      	str	r4, [r0, #12]
 80033f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80033f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80033f8:	b94c      	cbnz	r4, 800340e <__pow5mult+0x56>
 80033fa:	f240 2171 	movw	r1, #625	; 0x271
 80033fe:	4630      	mov	r0, r6
 8003400:	f7ff ff3b 	bl	800327a <__i2b>
 8003404:	2300      	movs	r3, #0
 8003406:	f8c8 0008 	str.w	r0, [r8, #8]
 800340a:	4604      	mov	r4, r0
 800340c:	6003      	str	r3, [r0, #0]
 800340e:	f04f 0800 	mov.w	r8, #0
 8003412:	07eb      	lsls	r3, r5, #31
 8003414:	d50a      	bpl.n	800342c <__pow5mult+0x74>
 8003416:	4639      	mov	r1, r7
 8003418:	4622      	mov	r2, r4
 800341a:	4630      	mov	r0, r6
 800341c:	f7ff ff36 	bl	800328c <__multiply>
 8003420:	4639      	mov	r1, r7
 8003422:	4681      	mov	r9, r0
 8003424:	4630      	mov	r0, r6
 8003426:	f7ff fe88 	bl	800313a <_Bfree>
 800342a:	464f      	mov	r7, r9
 800342c:	106d      	asrs	r5, r5, #1
 800342e:	d00b      	beq.n	8003448 <__pow5mult+0x90>
 8003430:	6820      	ldr	r0, [r4, #0]
 8003432:	b938      	cbnz	r0, 8003444 <__pow5mult+0x8c>
 8003434:	4622      	mov	r2, r4
 8003436:	4621      	mov	r1, r4
 8003438:	4630      	mov	r0, r6
 800343a:	f7ff ff27 	bl	800328c <__multiply>
 800343e:	6020      	str	r0, [r4, #0]
 8003440:	f8c0 8000 	str.w	r8, [r0]
 8003444:	4604      	mov	r4, r0
 8003446:	e7e4      	b.n	8003412 <__pow5mult+0x5a>
 8003448:	4638      	mov	r0, r7
 800344a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800344e:	bf00      	nop
 8003450:	08003d28 	.word	0x08003d28

08003454 <__lshift>:
 8003454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003458:	460c      	mov	r4, r1
 800345a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800345e:	6923      	ldr	r3, [r4, #16]
 8003460:	6849      	ldr	r1, [r1, #4]
 8003462:	eb0a 0903 	add.w	r9, sl, r3
 8003466:	68a3      	ldr	r3, [r4, #8]
 8003468:	4607      	mov	r7, r0
 800346a:	4616      	mov	r6, r2
 800346c:	f109 0501 	add.w	r5, r9, #1
 8003470:	42ab      	cmp	r3, r5
 8003472:	db32      	blt.n	80034da <__lshift+0x86>
 8003474:	4638      	mov	r0, r7
 8003476:	f7ff fe2c 	bl	80030d2 <_Balloc>
 800347a:	2300      	movs	r3, #0
 800347c:	4680      	mov	r8, r0
 800347e:	f100 0114 	add.w	r1, r0, #20
 8003482:	461a      	mov	r2, r3
 8003484:	4553      	cmp	r3, sl
 8003486:	db2b      	blt.n	80034e0 <__lshift+0x8c>
 8003488:	6920      	ldr	r0, [r4, #16]
 800348a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800348e:	f104 0314 	add.w	r3, r4, #20
 8003492:	f016 021f 	ands.w	r2, r6, #31
 8003496:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800349a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800349e:	d025      	beq.n	80034ec <__lshift+0x98>
 80034a0:	f1c2 0e20 	rsb	lr, r2, #32
 80034a4:	2000      	movs	r0, #0
 80034a6:	681e      	ldr	r6, [r3, #0]
 80034a8:	468a      	mov	sl, r1
 80034aa:	4096      	lsls	r6, r2
 80034ac:	4330      	orrs	r0, r6
 80034ae:	f84a 0b04 	str.w	r0, [sl], #4
 80034b2:	f853 0b04 	ldr.w	r0, [r3], #4
 80034b6:	459c      	cmp	ip, r3
 80034b8:	fa20 f00e 	lsr.w	r0, r0, lr
 80034bc:	d814      	bhi.n	80034e8 <__lshift+0x94>
 80034be:	6048      	str	r0, [r1, #4]
 80034c0:	b108      	cbz	r0, 80034c6 <__lshift+0x72>
 80034c2:	f109 0502 	add.w	r5, r9, #2
 80034c6:	3d01      	subs	r5, #1
 80034c8:	4638      	mov	r0, r7
 80034ca:	f8c8 5010 	str.w	r5, [r8, #16]
 80034ce:	4621      	mov	r1, r4
 80034d0:	f7ff fe33 	bl	800313a <_Bfree>
 80034d4:	4640      	mov	r0, r8
 80034d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034da:	3101      	adds	r1, #1
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	e7c7      	b.n	8003470 <__lshift+0x1c>
 80034e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80034e4:	3301      	adds	r3, #1
 80034e6:	e7cd      	b.n	8003484 <__lshift+0x30>
 80034e8:	4651      	mov	r1, sl
 80034ea:	e7dc      	b.n	80034a6 <__lshift+0x52>
 80034ec:	3904      	subs	r1, #4
 80034ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80034f2:	f841 2f04 	str.w	r2, [r1, #4]!
 80034f6:	459c      	cmp	ip, r3
 80034f8:	d8f9      	bhi.n	80034ee <__lshift+0x9a>
 80034fa:	e7e4      	b.n	80034c6 <__lshift+0x72>

080034fc <__mcmp>:
 80034fc:	6903      	ldr	r3, [r0, #16]
 80034fe:	690a      	ldr	r2, [r1, #16]
 8003500:	1a9b      	subs	r3, r3, r2
 8003502:	b530      	push	{r4, r5, lr}
 8003504:	d10c      	bne.n	8003520 <__mcmp+0x24>
 8003506:	0092      	lsls	r2, r2, #2
 8003508:	3014      	adds	r0, #20
 800350a:	3114      	adds	r1, #20
 800350c:	1884      	adds	r4, r0, r2
 800350e:	4411      	add	r1, r2
 8003510:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003514:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003518:	4295      	cmp	r5, r2
 800351a:	d003      	beq.n	8003524 <__mcmp+0x28>
 800351c:	d305      	bcc.n	800352a <__mcmp+0x2e>
 800351e:	2301      	movs	r3, #1
 8003520:	4618      	mov	r0, r3
 8003522:	bd30      	pop	{r4, r5, pc}
 8003524:	42a0      	cmp	r0, r4
 8003526:	d3f3      	bcc.n	8003510 <__mcmp+0x14>
 8003528:	e7fa      	b.n	8003520 <__mcmp+0x24>
 800352a:	f04f 33ff 	mov.w	r3, #4294967295
 800352e:	e7f7      	b.n	8003520 <__mcmp+0x24>

08003530 <__mdiff>:
 8003530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003534:	460d      	mov	r5, r1
 8003536:	4607      	mov	r7, r0
 8003538:	4611      	mov	r1, r2
 800353a:	4628      	mov	r0, r5
 800353c:	4614      	mov	r4, r2
 800353e:	f7ff ffdd 	bl	80034fc <__mcmp>
 8003542:	1e06      	subs	r6, r0, #0
 8003544:	d108      	bne.n	8003558 <__mdiff+0x28>
 8003546:	4631      	mov	r1, r6
 8003548:	4638      	mov	r0, r7
 800354a:	f7ff fdc2 	bl	80030d2 <_Balloc>
 800354e:	2301      	movs	r3, #1
 8003550:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8003554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003558:	bfa4      	itt	ge
 800355a:	4623      	movge	r3, r4
 800355c:	462c      	movge	r4, r5
 800355e:	4638      	mov	r0, r7
 8003560:	6861      	ldr	r1, [r4, #4]
 8003562:	bfa6      	itte	ge
 8003564:	461d      	movge	r5, r3
 8003566:	2600      	movge	r6, #0
 8003568:	2601      	movlt	r6, #1
 800356a:	f7ff fdb2 	bl	80030d2 <_Balloc>
 800356e:	692b      	ldr	r3, [r5, #16]
 8003570:	60c6      	str	r6, [r0, #12]
 8003572:	6926      	ldr	r6, [r4, #16]
 8003574:	f105 0914 	add.w	r9, r5, #20
 8003578:	f104 0214 	add.w	r2, r4, #20
 800357c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8003580:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8003584:	f100 0514 	add.w	r5, r0, #20
 8003588:	f04f 0e00 	mov.w	lr, #0
 800358c:	f852 ab04 	ldr.w	sl, [r2], #4
 8003590:	f859 4b04 	ldr.w	r4, [r9], #4
 8003594:	fa1e f18a 	uxtah	r1, lr, sl
 8003598:	b2a3      	uxth	r3, r4
 800359a:	1ac9      	subs	r1, r1, r3
 800359c:	0c23      	lsrs	r3, r4, #16
 800359e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80035a2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80035a6:	b289      	uxth	r1, r1
 80035a8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80035ac:	45c8      	cmp	r8, r9
 80035ae:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80035b2:	4694      	mov	ip, r2
 80035b4:	f845 3b04 	str.w	r3, [r5], #4
 80035b8:	d8e8      	bhi.n	800358c <__mdiff+0x5c>
 80035ba:	45bc      	cmp	ip, r7
 80035bc:	d304      	bcc.n	80035c8 <__mdiff+0x98>
 80035be:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80035c2:	b183      	cbz	r3, 80035e6 <__mdiff+0xb6>
 80035c4:	6106      	str	r6, [r0, #16]
 80035c6:	e7c5      	b.n	8003554 <__mdiff+0x24>
 80035c8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80035cc:	fa1e f381 	uxtah	r3, lr, r1
 80035d0:	141a      	asrs	r2, r3, #16
 80035d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80035dc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80035e0:	f845 3b04 	str.w	r3, [r5], #4
 80035e4:	e7e9      	b.n	80035ba <__mdiff+0x8a>
 80035e6:	3e01      	subs	r6, #1
 80035e8:	e7e9      	b.n	80035be <__mdiff+0x8e>

080035ea <__d2b>:
 80035ea:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80035ee:	460e      	mov	r6, r1
 80035f0:	2101      	movs	r1, #1
 80035f2:	ec59 8b10 	vmov	r8, r9, d0
 80035f6:	4615      	mov	r5, r2
 80035f8:	f7ff fd6b 	bl	80030d2 <_Balloc>
 80035fc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003600:	4607      	mov	r7, r0
 8003602:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003606:	bb34      	cbnz	r4, 8003656 <__d2b+0x6c>
 8003608:	9301      	str	r3, [sp, #4]
 800360a:	f1b8 0300 	subs.w	r3, r8, #0
 800360e:	d027      	beq.n	8003660 <__d2b+0x76>
 8003610:	a802      	add	r0, sp, #8
 8003612:	f840 3d08 	str.w	r3, [r0, #-8]!
 8003616:	f7ff fe01 	bl	800321c <__lo0bits>
 800361a:	9900      	ldr	r1, [sp, #0]
 800361c:	b1f0      	cbz	r0, 800365c <__d2b+0x72>
 800361e:	9a01      	ldr	r2, [sp, #4]
 8003620:	f1c0 0320 	rsb	r3, r0, #32
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	430b      	orrs	r3, r1
 800362a:	40c2      	lsrs	r2, r0
 800362c:	617b      	str	r3, [r7, #20]
 800362e:	9201      	str	r2, [sp, #4]
 8003630:	9b01      	ldr	r3, [sp, #4]
 8003632:	61bb      	str	r3, [r7, #24]
 8003634:	2b00      	cmp	r3, #0
 8003636:	bf14      	ite	ne
 8003638:	2102      	movne	r1, #2
 800363a:	2101      	moveq	r1, #1
 800363c:	6139      	str	r1, [r7, #16]
 800363e:	b1c4      	cbz	r4, 8003672 <__d2b+0x88>
 8003640:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8003644:	4404      	add	r4, r0
 8003646:	6034      	str	r4, [r6, #0]
 8003648:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800364c:	6028      	str	r0, [r5, #0]
 800364e:	4638      	mov	r0, r7
 8003650:	b003      	add	sp, #12
 8003652:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003656:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800365a:	e7d5      	b.n	8003608 <__d2b+0x1e>
 800365c:	6179      	str	r1, [r7, #20]
 800365e:	e7e7      	b.n	8003630 <__d2b+0x46>
 8003660:	a801      	add	r0, sp, #4
 8003662:	f7ff fddb 	bl	800321c <__lo0bits>
 8003666:	9b01      	ldr	r3, [sp, #4]
 8003668:	617b      	str	r3, [r7, #20]
 800366a:	2101      	movs	r1, #1
 800366c:	6139      	str	r1, [r7, #16]
 800366e:	3020      	adds	r0, #32
 8003670:	e7e5      	b.n	800363e <__d2b+0x54>
 8003672:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8003676:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800367a:	6030      	str	r0, [r6, #0]
 800367c:	6918      	ldr	r0, [r3, #16]
 800367e:	f7ff fdae 	bl	80031de <__hi0bits>
 8003682:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8003686:	e7e1      	b.n	800364c <__d2b+0x62>

08003688 <_calloc_r>:
 8003688:	b538      	push	{r3, r4, r5, lr}
 800368a:	fb02 f401 	mul.w	r4, r2, r1
 800368e:	4621      	mov	r1, r4
 8003690:	f000 f856 	bl	8003740 <_malloc_r>
 8003694:	4605      	mov	r5, r0
 8003696:	b118      	cbz	r0, 80036a0 <_calloc_r+0x18>
 8003698:	4622      	mov	r2, r4
 800369a:	2100      	movs	r1, #0
 800369c:	f7fe fabe 	bl	8001c1c <memset>
 80036a0:	4628      	mov	r0, r5
 80036a2:	bd38      	pop	{r3, r4, r5, pc}

080036a4 <_free_r>:
 80036a4:	b538      	push	{r3, r4, r5, lr}
 80036a6:	4605      	mov	r5, r0
 80036a8:	2900      	cmp	r1, #0
 80036aa:	d045      	beq.n	8003738 <_free_r+0x94>
 80036ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036b0:	1f0c      	subs	r4, r1, #4
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	bfb8      	it	lt
 80036b6:	18e4      	addlt	r4, r4, r3
 80036b8:	f000 fa29 	bl	8003b0e <__malloc_lock>
 80036bc:	4a1f      	ldr	r2, [pc, #124]	; (800373c <_free_r+0x98>)
 80036be:	6813      	ldr	r3, [r2, #0]
 80036c0:	4610      	mov	r0, r2
 80036c2:	b933      	cbnz	r3, 80036d2 <_free_r+0x2e>
 80036c4:	6063      	str	r3, [r4, #4]
 80036c6:	6014      	str	r4, [r2, #0]
 80036c8:	4628      	mov	r0, r5
 80036ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036ce:	f000 ba1f 	b.w	8003b10 <__malloc_unlock>
 80036d2:	42a3      	cmp	r3, r4
 80036d4:	d90c      	bls.n	80036f0 <_free_r+0x4c>
 80036d6:	6821      	ldr	r1, [r4, #0]
 80036d8:	1862      	adds	r2, r4, r1
 80036da:	4293      	cmp	r3, r2
 80036dc:	bf04      	itt	eq
 80036de:	681a      	ldreq	r2, [r3, #0]
 80036e0:	685b      	ldreq	r3, [r3, #4]
 80036e2:	6063      	str	r3, [r4, #4]
 80036e4:	bf04      	itt	eq
 80036e6:	1852      	addeq	r2, r2, r1
 80036e8:	6022      	streq	r2, [r4, #0]
 80036ea:	6004      	str	r4, [r0, #0]
 80036ec:	e7ec      	b.n	80036c8 <_free_r+0x24>
 80036ee:	4613      	mov	r3, r2
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	b10a      	cbz	r2, 80036f8 <_free_r+0x54>
 80036f4:	42a2      	cmp	r2, r4
 80036f6:	d9fa      	bls.n	80036ee <_free_r+0x4a>
 80036f8:	6819      	ldr	r1, [r3, #0]
 80036fa:	1858      	adds	r0, r3, r1
 80036fc:	42a0      	cmp	r0, r4
 80036fe:	d10b      	bne.n	8003718 <_free_r+0x74>
 8003700:	6820      	ldr	r0, [r4, #0]
 8003702:	4401      	add	r1, r0
 8003704:	1858      	adds	r0, r3, r1
 8003706:	4282      	cmp	r2, r0
 8003708:	6019      	str	r1, [r3, #0]
 800370a:	d1dd      	bne.n	80036c8 <_free_r+0x24>
 800370c:	6810      	ldr	r0, [r2, #0]
 800370e:	6852      	ldr	r2, [r2, #4]
 8003710:	605a      	str	r2, [r3, #4]
 8003712:	4401      	add	r1, r0
 8003714:	6019      	str	r1, [r3, #0]
 8003716:	e7d7      	b.n	80036c8 <_free_r+0x24>
 8003718:	d902      	bls.n	8003720 <_free_r+0x7c>
 800371a:	230c      	movs	r3, #12
 800371c:	602b      	str	r3, [r5, #0]
 800371e:	e7d3      	b.n	80036c8 <_free_r+0x24>
 8003720:	6820      	ldr	r0, [r4, #0]
 8003722:	1821      	adds	r1, r4, r0
 8003724:	428a      	cmp	r2, r1
 8003726:	bf04      	itt	eq
 8003728:	6811      	ldreq	r1, [r2, #0]
 800372a:	6852      	ldreq	r2, [r2, #4]
 800372c:	6062      	str	r2, [r4, #4]
 800372e:	bf04      	itt	eq
 8003730:	1809      	addeq	r1, r1, r0
 8003732:	6021      	streq	r1, [r4, #0]
 8003734:	605c      	str	r4, [r3, #4]
 8003736:	e7c7      	b.n	80036c8 <_free_r+0x24>
 8003738:	bd38      	pop	{r3, r4, r5, pc}
 800373a:	bf00      	nop
 800373c:	20000260 	.word	0x20000260

08003740 <_malloc_r>:
 8003740:	b570      	push	{r4, r5, r6, lr}
 8003742:	1ccd      	adds	r5, r1, #3
 8003744:	f025 0503 	bic.w	r5, r5, #3
 8003748:	3508      	adds	r5, #8
 800374a:	2d0c      	cmp	r5, #12
 800374c:	bf38      	it	cc
 800374e:	250c      	movcc	r5, #12
 8003750:	2d00      	cmp	r5, #0
 8003752:	4606      	mov	r6, r0
 8003754:	db01      	blt.n	800375a <_malloc_r+0x1a>
 8003756:	42a9      	cmp	r1, r5
 8003758:	d903      	bls.n	8003762 <_malloc_r+0x22>
 800375a:	230c      	movs	r3, #12
 800375c:	6033      	str	r3, [r6, #0]
 800375e:	2000      	movs	r0, #0
 8003760:	bd70      	pop	{r4, r5, r6, pc}
 8003762:	f000 f9d4 	bl	8003b0e <__malloc_lock>
 8003766:	4a21      	ldr	r2, [pc, #132]	; (80037ec <_malloc_r+0xac>)
 8003768:	6814      	ldr	r4, [r2, #0]
 800376a:	4621      	mov	r1, r4
 800376c:	b991      	cbnz	r1, 8003794 <_malloc_r+0x54>
 800376e:	4c20      	ldr	r4, [pc, #128]	; (80037f0 <_malloc_r+0xb0>)
 8003770:	6823      	ldr	r3, [r4, #0]
 8003772:	b91b      	cbnz	r3, 800377c <_malloc_r+0x3c>
 8003774:	4630      	mov	r0, r6
 8003776:	f000 f98f 	bl	8003a98 <_sbrk_r>
 800377a:	6020      	str	r0, [r4, #0]
 800377c:	4629      	mov	r1, r5
 800377e:	4630      	mov	r0, r6
 8003780:	f000 f98a 	bl	8003a98 <_sbrk_r>
 8003784:	1c43      	adds	r3, r0, #1
 8003786:	d124      	bne.n	80037d2 <_malloc_r+0x92>
 8003788:	230c      	movs	r3, #12
 800378a:	6033      	str	r3, [r6, #0]
 800378c:	4630      	mov	r0, r6
 800378e:	f000 f9bf 	bl	8003b10 <__malloc_unlock>
 8003792:	e7e4      	b.n	800375e <_malloc_r+0x1e>
 8003794:	680b      	ldr	r3, [r1, #0]
 8003796:	1b5b      	subs	r3, r3, r5
 8003798:	d418      	bmi.n	80037cc <_malloc_r+0x8c>
 800379a:	2b0b      	cmp	r3, #11
 800379c:	d90f      	bls.n	80037be <_malloc_r+0x7e>
 800379e:	600b      	str	r3, [r1, #0]
 80037a0:	50cd      	str	r5, [r1, r3]
 80037a2:	18cc      	adds	r4, r1, r3
 80037a4:	4630      	mov	r0, r6
 80037a6:	f000 f9b3 	bl	8003b10 <__malloc_unlock>
 80037aa:	f104 000b 	add.w	r0, r4, #11
 80037ae:	1d23      	adds	r3, r4, #4
 80037b0:	f020 0007 	bic.w	r0, r0, #7
 80037b4:	1ac3      	subs	r3, r0, r3
 80037b6:	d0d3      	beq.n	8003760 <_malloc_r+0x20>
 80037b8:	425a      	negs	r2, r3
 80037ba:	50e2      	str	r2, [r4, r3]
 80037bc:	e7d0      	b.n	8003760 <_malloc_r+0x20>
 80037be:	428c      	cmp	r4, r1
 80037c0:	684b      	ldr	r3, [r1, #4]
 80037c2:	bf16      	itet	ne
 80037c4:	6063      	strne	r3, [r4, #4]
 80037c6:	6013      	streq	r3, [r2, #0]
 80037c8:	460c      	movne	r4, r1
 80037ca:	e7eb      	b.n	80037a4 <_malloc_r+0x64>
 80037cc:	460c      	mov	r4, r1
 80037ce:	6849      	ldr	r1, [r1, #4]
 80037d0:	e7cc      	b.n	800376c <_malloc_r+0x2c>
 80037d2:	1cc4      	adds	r4, r0, #3
 80037d4:	f024 0403 	bic.w	r4, r4, #3
 80037d8:	42a0      	cmp	r0, r4
 80037da:	d005      	beq.n	80037e8 <_malloc_r+0xa8>
 80037dc:	1a21      	subs	r1, r4, r0
 80037de:	4630      	mov	r0, r6
 80037e0:	f000 f95a 	bl	8003a98 <_sbrk_r>
 80037e4:	3001      	adds	r0, #1
 80037e6:	d0cf      	beq.n	8003788 <_malloc_r+0x48>
 80037e8:	6025      	str	r5, [r4, #0]
 80037ea:	e7db      	b.n	80037a4 <_malloc_r+0x64>
 80037ec:	20000260 	.word	0x20000260
 80037f0:	20000264 	.word	0x20000264

080037f4 <__ssputs_r>:
 80037f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037f8:	688e      	ldr	r6, [r1, #8]
 80037fa:	429e      	cmp	r6, r3
 80037fc:	4682      	mov	sl, r0
 80037fe:	460c      	mov	r4, r1
 8003800:	4690      	mov	r8, r2
 8003802:	4699      	mov	r9, r3
 8003804:	d837      	bhi.n	8003876 <__ssputs_r+0x82>
 8003806:	898a      	ldrh	r2, [r1, #12]
 8003808:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800380c:	d031      	beq.n	8003872 <__ssputs_r+0x7e>
 800380e:	6825      	ldr	r5, [r4, #0]
 8003810:	6909      	ldr	r1, [r1, #16]
 8003812:	1a6f      	subs	r7, r5, r1
 8003814:	6965      	ldr	r5, [r4, #20]
 8003816:	2302      	movs	r3, #2
 8003818:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800381c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003820:	f109 0301 	add.w	r3, r9, #1
 8003824:	443b      	add	r3, r7
 8003826:	429d      	cmp	r5, r3
 8003828:	bf38      	it	cc
 800382a:	461d      	movcc	r5, r3
 800382c:	0553      	lsls	r3, r2, #21
 800382e:	d530      	bpl.n	8003892 <__ssputs_r+0x9e>
 8003830:	4629      	mov	r1, r5
 8003832:	f7ff ff85 	bl	8003740 <_malloc_r>
 8003836:	4606      	mov	r6, r0
 8003838:	b950      	cbnz	r0, 8003850 <__ssputs_r+0x5c>
 800383a:	230c      	movs	r3, #12
 800383c:	f8ca 3000 	str.w	r3, [sl]
 8003840:	89a3      	ldrh	r3, [r4, #12]
 8003842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003846:	81a3      	strh	r3, [r4, #12]
 8003848:	f04f 30ff 	mov.w	r0, #4294967295
 800384c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003850:	463a      	mov	r2, r7
 8003852:	6921      	ldr	r1, [r4, #16]
 8003854:	f7ff fc32 	bl	80030bc <memcpy>
 8003858:	89a3      	ldrh	r3, [r4, #12]
 800385a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800385e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003862:	81a3      	strh	r3, [r4, #12]
 8003864:	6126      	str	r6, [r4, #16]
 8003866:	6165      	str	r5, [r4, #20]
 8003868:	443e      	add	r6, r7
 800386a:	1bed      	subs	r5, r5, r7
 800386c:	6026      	str	r6, [r4, #0]
 800386e:	60a5      	str	r5, [r4, #8]
 8003870:	464e      	mov	r6, r9
 8003872:	454e      	cmp	r6, r9
 8003874:	d900      	bls.n	8003878 <__ssputs_r+0x84>
 8003876:	464e      	mov	r6, r9
 8003878:	4632      	mov	r2, r6
 800387a:	4641      	mov	r1, r8
 800387c:	6820      	ldr	r0, [r4, #0]
 800387e:	f000 f92d 	bl	8003adc <memmove>
 8003882:	68a3      	ldr	r3, [r4, #8]
 8003884:	1b9b      	subs	r3, r3, r6
 8003886:	60a3      	str	r3, [r4, #8]
 8003888:	6823      	ldr	r3, [r4, #0]
 800388a:	441e      	add	r6, r3
 800388c:	6026      	str	r6, [r4, #0]
 800388e:	2000      	movs	r0, #0
 8003890:	e7dc      	b.n	800384c <__ssputs_r+0x58>
 8003892:	462a      	mov	r2, r5
 8003894:	f000 f93d 	bl	8003b12 <_realloc_r>
 8003898:	4606      	mov	r6, r0
 800389a:	2800      	cmp	r0, #0
 800389c:	d1e2      	bne.n	8003864 <__ssputs_r+0x70>
 800389e:	6921      	ldr	r1, [r4, #16]
 80038a0:	4650      	mov	r0, sl
 80038a2:	f7ff feff 	bl	80036a4 <_free_r>
 80038a6:	e7c8      	b.n	800383a <__ssputs_r+0x46>

080038a8 <_svfiprintf_r>:
 80038a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038ac:	461d      	mov	r5, r3
 80038ae:	898b      	ldrh	r3, [r1, #12]
 80038b0:	061f      	lsls	r7, r3, #24
 80038b2:	b09d      	sub	sp, #116	; 0x74
 80038b4:	4680      	mov	r8, r0
 80038b6:	460c      	mov	r4, r1
 80038b8:	4616      	mov	r6, r2
 80038ba:	d50f      	bpl.n	80038dc <_svfiprintf_r+0x34>
 80038bc:	690b      	ldr	r3, [r1, #16]
 80038be:	b96b      	cbnz	r3, 80038dc <_svfiprintf_r+0x34>
 80038c0:	2140      	movs	r1, #64	; 0x40
 80038c2:	f7ff ff3d 	bl	8003740 <_malloc_r>
 80038c6:	6020      	str	r0, [r4, #0]
 80038c8:	6120      	str	r0, [r4, #16]
 80038ca:	b928      	cbnz	r0, 80038d8 <_svfiprintf_r+0x30>
 80038cc:	230c      	movs	r3, #12
 80038ce:	f8c8 3000 	str.w	r3, [r8]
 80038d2:	f04f 30ff 	mov.w	r0, #4294967295
 80038d6:	e0c8      	b.n	8003a6a <_svfiprintf_r+0x1c2>
 80038d8:	2340      	movs	r3, #64	; 0x40
 80038da:	6163      	str	r3, [r4, #20]
 80038dc:	2300      	movs	r3, #0
 80038de:	9309      	str	r3, [sp, #36]	; 0x24
 80038e0:	2320      	movs	r3, #32
 80038e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038e6:	2330      	movs	r3, #48	; 0x30
 80038e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038ec:	9503      	str	r5, [sp, #12]
 80038ee:	f04f 0b01 	mov.w	fp, #1
 80038f2:	4637      	mov	r7, r6
 80038f4:	463d      	mov	r5, r7
 80038f6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80038fa:	b10b      	cbz	r3, 8003900 <_svfiprintf_r+0x58>
 80038fc:	2b25      	cmp	r3, #37	; 0x25
 80038fe:	d13e      	bne.n	800397e <_svfiprintf_r+0xd6>
 8003900:	ebb7 0a06 	subs.w	sl, r7, r6
 8003904:	d00b      	beq.n	800391e <_svfiprintf_r+0x76>
 8003906:	4653      	mov	r3, sl
 8003908:	4632      	mov	r2, r6
 800390a:	4621      	mov	r1, r4
 800390c:	4640      	mov	r0, r8
 800390e:	f7ff ff71 	bl	80037f4 <__ssputs_r>
 8003912:	3001      	adds	r0, #1
 8003914:	f000 80a4 	beq.w	8003a60 <_svfiprintf_r+0x1b8>
 8003918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800391a:	4453      	add	r3, sl
 800391c:	9309      	str	r3, [sp, #36]	; 0x24
 800391e:	783b      	ldrb	r3, [r7, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 809d 	beq.w	8003a60 <_svfiprintf_r+0x1b8>
 8003926:	2300      	movs	r3, #0
 8003928:	f04f 32ff 	mov.w	r2, #4294967295
 800392c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003930:	9304      	str	r3, [sp, #16]
 8003932:	9307      	str	r3, [sp, #28]
 8003934:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003938:	931a      	str	r3, [sp, #104]	; 0x68
 800393a:	462f      	mov	r7, r5
 800393c:	2205      	movs	r2, #5
 800393e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003942:	4850      	ldr	r0, [pc, #320]	; (8003a84 <_svfiprintf_r+0x1dc>)
 8003944:	f7fc fc84 	bl	8000250 <memchr>
 8003948:	9b04      	ldr	r3, [sp, #16]
 800394a:	b9d0      	cbnz	r0, 8003982 <_svfiprintf_r+0xda>
 800394c:	06d9      	lsls	r1, r3, #27
 800394e:	bf44      	itt	mi
 8003950:	2220      	movmi	r2, #32
 8003952:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003956:	071a      	lsls	r2, r3, #28
 8003958:	bf44      	itt	mi
 800395a:	222b      	movmi	r2, #43	; 0x2b
 800395c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003960:	782a      	ldrb	r2, [r5, #0]
 8003962:	2a2a      	cmp	r2, #42	; 0x2a
 8003964:	d015      	beq.n	8003992 <_svfiprintf_r+0xea>
 8003966:	9a07      	ldr	r2, [sp, #28]
 8003968:	462f      	mov	r7, r5
 800396a:	2000      	movs	r0, #0
 800396c:	250a      	movs	r5, #10
 800396e:	4639      	mov	r1, r7
 8003970:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003974:	3b30      	subs	r3, #48	; 0x30
 8003976:	2b09      	cmp	r3, #9
 8003978:	d94d      	bls.n	8003a16 <_svfiprintf_r+0x16e>
 800397a:	b1b8      	cbz	r0, 80039ac <_svfiprintf_r+0x104>
 800397c:	e00f      	b.n	800399e <_svfiprintf_r+0xf6>
 800397e:	462f      	mov	r7, r5
 8003980:	e7b8      	b.n	80038f4 <_svfiprintf_r+0x4c>
 8003982:	4a40      	ldr	r2, [pc, #256]	; (8003a84 <_svfiprintf_r+0x1dc>)
 8003984:	1a80      	subs	r0, r0, r2
 8003986:	fa0b f000 	lsl.w	r0, fp, r0
 800398a:	4318      	orrs	r0, r3
 800398c:	9004      	str	r0, [sp, #16]
 800398e:	463d      	mov	r5, r7
 8003990:	e7d3      	b.n	800393a <_svfiprintf_r+0x92>
 8003992:	9a03      	ldr	r2, [sp, #12]
 8003994:	1d11      	adds	r1, r2, #4
 8003996:	6812      	ldr	r2, [r2, #0]
 8003998:	9103      	str	r1, [sp, #12]
 800399a:	2a00      	cmp	r2, #0
 800399c:	db01      	blt.n	80039a2 <_svfiprintf_r+0xfa>
 800399e:	9207      	str	r2, [sp, #28]
 80039a0:	e004      	b.n	80039ac <_svfiprintf_r+0x104>
 80039a2:	4252      	negs	r2, r2
 80039a4:	f043 0302 	orr.w	r3, r3, #2
 80039a8:	9207      	str	r2, [sp, #28]
 80039aa:	9304      	str	r3, [sp, #16]
 80039ac:	783b      	ldrb	r3, [r7, #0]
 80039ae:	2b2e      	cmp	r3, #46	; 0x2e
 80039b0:	d10c      	bne.n	80039cc <_svfiprintf_r+0x124>
 80039b2:	787b      	ldrb	r3, [r7, #1]
 80039b4:	2b2a      	cmp	r3, #42	; 0x2a
 80039b6:	d133      	bne.n	8003a20 <_svfiprintf_r+0x178>
 80039b8:	9b03      	ldr	r3, [sp, #12]
 80039ba:	1d1a      	adds	r2, r3, #4
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	9203      	str	r2, [sp, #12]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	bfb8      	it	lt
 80039c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80039c8:	3702      	adds	r7, #2
 80039ca:	9305      	str	r3, [sp, #20]
 80039cc:	4d2e      	ldr	r5, [pc, #184]	; (8003a88 <_svfiprintf_r+0x1e0>)
 80039ce:	7839      	ldrb	r1, [r7, #0]
 80039d0:	2203      	movs	r2, #3
 80039d2:	4628      	mov	r0, r5
 80039d4:	f7fc fc3c 	bl	8000250 <memchr>
 80039d8:	b138      	cbz	r0, 80039ea <_svfiprintf_r+0x142>
 80039da:	2340      	movs	r3, #64	; 0x40
 80039dc:	1b40      	subs	r0, r0, r5
 80039de:	fa03 f000 	lsl.w	r0, r3, r0
 80039e2:	9b04      	ldr	r3, [sp, #16]
 80039e4:	4303      	orrs	r3, r0
 80039e6:	3701      	adds	r7, #1
 80039e8:	9304      	str	r3, [sp, #16]
 80039ea:	7839      	ldrb	r1, [r7, #0]
 80039ec:	4827      	ldr	r0, [pc, #156]	; (8003a8c <_svfiprintf_r+0x1e4>)
 80039ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80039f2:	2206      	movs	r2, #6
 80039f4:	1c7e      	adds	r6, r7, #1
 80039f6:	f7fc fc2b 	bl	8000250 <memchr>
 80039fa:	2800      	cmp	r0, #0
 80039fc:	d038      	beq.n	8003a70 <_svfiprintf_r+0x1c8>
 80039fe:	4b24      	ldr	r3, [pc, #144]	; (8003a90 <_svfiprintf_r+0x1e8>)
 8003a00:	bb13      	cbnz	r3, 8003a48 <_svfiprintf_r+0x1a0>
 8003a02:	9b03      	ldr	r3, [sp, #12]
 8003a04:	3307      	adds	r3, #7
 8003a06:	f023 0307 	bic.w	r3, r3, #7
 8003a0a:	3308      	adds	r3, #8
 8003a0c:	9303      	str	r3, [sp, #12]
 8003a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a10:	444b      	add	r3, r9
 8003a12:	9309      	str	r3, [sp, #36]	; 0x24
 8003a14:	e76d      	b.n	80038f2 <_svfiprintf_r+0x4a>
 8003a16:	fb05 3202 	mla	r2, r5, r2, r3
 8003a1a:	2001      	movs	r0, #1
 8003a1c:	460f      	mov	r7, r1
 8003a1e:	e7a6      	b.n	800396e <_svfiprintf_r+0xc6>
 8003a20:	2300      	movs	r3, #0
 8003a22:	3701      	adds	r7, #1
 8003a24:	9305      	str	r3, [sp, #20]
 8003a26:	4619      	mov	r1, r3
 8003a28:	250a      	movs	r5, #10
 8003a2a:	4638      	mov	r0, r7
 8003a2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a30:	3a30      	subs	r2, #48	; 0x30
 8003a32:	2a09      	cmp	r2, #9
 8003a34:	d903      	bls.n	8003a3e <_svfiprintf_r+0x196>
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0c8      	beq.n	80039cc <_svfiprintf_r+0x124>
 8003a3a:	9105      	str	r1, [sp, #20]
 8003a3c:	e7c6      	b.n	80039cc <_svfiprintf_r+0x124>
 8003a3e:	fb05 2101 	mla	r1, r5, r1, r2
 8003a42:	2301      	movs	r3, #1
 8003a44:	4607      	mov	r7, r0
 8003a46:	e7f0      	b.n	8003a2a <_svfiprintf_r+0x182>
 8003a48:	ab03      	add	r3, sp, #12
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	4622      	mov	r2, r4
 8003a4e:	4b11      	ldr	r3, [pc, #68]	; (8003a94 <_svfiprintf_r+0x1ec>)
 8003a50:	a904      	add	r1, sp, #16
 8003a52:	4640      	mov	r0, r8
 8003a54:	f7fe f970 	bl	8001d38 <_printf_float>
 8003a58:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003a5c:	4681      	mov	r9, r0
 8003a5e:	d1d6      	bne.n	8003a0e <_svfiprintf_r+0x166>
 8003a60:	89a3      	ldrh	r3, [r4, #12]
 8003a62:	065b      	lsls	r3, r3, #25
 8003a64:	f53f af35 	bmi.w	80038d2 <_svfiprintf_r+0x2a>
 8003a68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a6a:	b01d      	add	sp, #116	; 0x74
 8003a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a70:	ab03      	add	r3, sp, #12
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	4622      	mov	r2, r4
 8003a76:	4b07      	ldr	r3, [pc, #28]	; (8003a94 <_svfiprintf_r+0x1ec>)
 8003a78:	a904      	add	r1, sp, #16
 8003a7a:	4640      	mov	r0, r8
 8003a7c:	f7fe fbfe 	bl	800227c <_printf_i>
 8003a80:	e7ea      	b.n	8003a58 <_svfiprintf_r+0x1b0>
 8003a82:	bf00      	nop
 8003a84:	08003d34 	.word	0x08003d34
 8003a88:	08003d3a 	.word	0x08003d3a
 8003a8c:	08003d3e 	.word	0x08003d3e
 8003a90:	08001d39 	.word	0x08001d39
 8003a94:	080037f5 	.word	0x080037f5

08003a98 <_sbrk_r>:
 8003a98:	b538      	push	{r3, r4, r5, lr}
 8003a9a:	4c06      	ldr	r4, [pc, #24]	; (8003ab4 <_sbrk_r+0x1c>)
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	4605      	mov	r5, r0
 8003aa0:	4608      	mov	r0, r1
 8003aa2:	6023      	str	r3, [r4, #0]
 8003aa4:	f7fc ff0a 	bl	80008bc <_sbrk>
 8003aa8:	1c43      	adds	r3, r0, #1
 8003aaa:	d102      	bne.n	8003ab2 <_sbrk_r+0x1a>
 8003aac:	6823      	ldr	r3, [r4, #0]
 8003aae:	b103      	cbz	r3, 8003ab2 <_sbrk_r+0x1a>
 8003ab0:	602b      	str	r3, [r5, #0]
 8003ab2:	bd38      	pop	{r3, r4, r5, pc}
 8003ab4:	20000304 	.word	0x20000304

08003ab8 <__ascii_mbtowc>:
 8003ab8:	b082      	sub	sp, #8
 8003aba:	b901      	cbnz	r1, 8003abe <__ascii_mbtowc+0x6>
 8003abc:	a901      	add	r1, sp, #4
 8003abe:	b142      	cbz	r2, 8003ad2 <__ascii_mbtowc+0x1a>
 8003ac0:	b14b      	cbz	r3, 8003ad6 <__ascii_mbtowc+0x1e>
 8003ac2:	7813      	ldrb	r3, [r2, #0]
 8003ac4:	600b      	str	r3, [r1, #0]
 8003ac6:	7812      	ldrb	r2, [r2, #0]
 8003ac8:	1c10      	adds	r0, r2, #0
 8003aca:	bf18      	it	ne
 8003acc:	2001      	movne	r0, #1
 8003ace:	b002      	add	sp, #8
 8003ad0:	4770      	bx	lr
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	e7fb      	b.n	8003ace <__ascii_mbtowc+0x16>
 8003ad6:	f06f 0001 	mvn.w	r0, #1
 8003ada:	e7f8      	b.n	8003ace <__ascii_mbtowc+0x16>

08003adc <memmove>:
 8003adc:	4288      	cmp	r0, r1
 8003ade:	b510      	push	{r4, lr}
 8003ae0:	eb01 0302 	add.w	r3, r1, r2
 8003ae4:	d807      	bhi.n	8003af6 <memmove+0x1a>
 8003ae6:	1e42      	subs	r2, r0, #1
 8003ae8:	4299      	cmp	r1, r3
 8003aea:	d00a      	beq.n	8003b02 <memmove+0x26>
 8003aec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003af0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003af4:	e7f8      	b.n	8003ae8 <memmove+0xc>
 8003af6:	4283      	cmp	r3, r0
 8003af8:	d9f5      	bls.n	8003ae6 <memmove+0xa>
 8003afa:	1881      	adds	r1, r0, r2
 8003afc:	1ad2      	subs	r2, r2, r3
 8003afe:	42d3      	cmn	r3, r2
 8003b00:	d100      	bne.n	8003b04 <memmove+0x28>
 8003b02:	bd10      	pop	{r4, pc}
 8003b04:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b08:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003b0c:	e7f7      	b.n	8003afe <memmove+0x22>

08003b0e <__malloc_lock>:
 8003b0e:	4770      	bx	lr

08003b10 <__malloc_unlock>:
 8003b10:	4770      	bx	lr

08003b12 <_realloc_r>:
 8003b12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b14:	4607      	mov	r7, r0
 8003b16:	4614      	mov	r4, r2
 8003b18:	460e      	mov	r6, r1
 8003b1a:	b921      	cbnz	r1, 8003b26 <_realloc_r+0x14>
 8003b1c:	4611      	mov	r1, r2
 8003b1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003b22:	f7ff be0d 	b.w	8003740 <_malloc_r>
 8003b26:	b922      	cbnz	r2, 8003b32 <_realloc_r+0x20>
 8003b28:	f7ff fdbc 	bl	80036a4 <_free_r>
 8003b2c:	4625      	mov	r5, r4
 8003b2e:	4628      	mov	r0, r5
 8003b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b32:	f000 f821 	bl	8003b78 <_malloc_usable_size_r>
 8003b36:	42a0      	cmp	r0, r4
 8003b38:	d20f      	bcs.n	8003b5a <_realloc_r+0x48>
 8003b3a:	4621      	mov	r1, r4
 8003b3c:	4638      	mov	r0, r7
 8003b3e:	f7ff fdff 	bl	8003740 <_malloc_r>
 8003b42:	4605      	mov	r5, r0
 8003b44:	2800      	cmp	r0, #0
 8003b46:	d0f2      	beq.n	8003b2e <_realloc_r+0x1c>
 8003b48:	4631      	mov	r1, r6
 8003b4a:	4622      	mov	r2, r4
 8003b4c:	f7ff fab6 	bl	80030bc <memcpy>
 8003b50:	4631      	mov	r1, r6
 8003b52:	4638      	mov	r0, r7
 8003b54:	f7ff fda6 	bl	80036a4 <_free_r>
 8003b58:	e7e9      	b.n	8003b2e <_realloc_r+0x1c>
 8003b5a:	4635      	mov	r5, r6
 8003b5c:	e7e7      	b.n	8003b2e <_realloc_r+0x1c>

08003b5e <__ascii_wctomb>:
 8003b5e:	b149      	cbz	r1, 8003b74 <__ascii_wctomb+0x16>
 8003b60:	2aff      	cmp	r2, #255	; 0xff
 8003b62:	bf85      	ittet	hi
 8003b64:	238a      	movhi	r3, #138	; 0x8a
 8003b66:	6003      	strhi	r3, [r0, #0]
 8003b68:	700a      	strbls	r2, [r1, #0]
 8003b6a:	f04f 30ff 	movhi.w	r0, #4294967295
 8003b6e:	bf98      	it	ls
 8003b70:	2001      	movls	r0, #1
 8003b72:	4770      	bx	lr
 8003b74:	4608      	mov	r0, r1
 8003b76:	4770      	bx	lr

08003b78 <_malloc_usable_size_r>:
 8003b78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b7c:	1f18      	subs	r0, r3, #4
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	bfbc      	itt	lt
 8003b82:	580b      	ldrlt	r3, [r1, r0]
 8003b84:	18c0      	addlt	r0, r0, r3
 8003b86:	4770      	bx	lr

08003b88 <_init>:
 8003b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b8a:	bf00      	nop
 8003b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b8e:	bc08      	pop	{r3}
 8003b90:	469e      	mov	lr, r3
 8003b92:	4770      	bx	lr

08003b94 <_fini>:
 8003b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b96:	bf00      	nop
 8003b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b9a:	bc08      	pop	{r3}
 8003b9c:	469e      	mov	lr, r3
 8003b9e:	4770      	bx	lr
