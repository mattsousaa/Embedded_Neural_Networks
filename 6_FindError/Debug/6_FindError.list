
6_FindError.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e34  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000558  08004038  08004038  00014038  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004590  08004590  0002029c  2**0
                  CONTENTS
  4 .ARM          00000008  08004590  08004590  00014590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004598  08004598  0002029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004598  08004598  00014598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800459c  0800459c  0001459c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000029c  20000000  080045a0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  200002a0  0800483c  000202a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  0800483c  00020368  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002029c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000082d6  00000000  00000000  000202ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014d3  00000000  00000000  000285a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000680  00000000  00000000  00029a78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005c8  00000000  00000000  0002a0f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000281df  00000000  00000000  0002a6c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000063d7  00000000  00000000  0005289f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fb373  00000000  00000000  00058c76  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00153fe9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002264  00000000  00000000  00154064  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002a0 	.word	0x200002a0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800401c 	.word	0x0800401c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002a4 	.word	0x200002a4
 800023c:	0800401c 	.word	0x0800401c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <printmsg>:
UART_HandleTypeDef huart3;

void SystemClock_Config(void);
void UART3_Init(void);

void printmsg(char *format, ...){
 80005f0:	b40f      	push	{r0, r1, r2, r3}
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b096      	sub	sp, #88	; 0x58
 80005f6:	af00      	add	r7, sp, #0

	char str[80];

	/*Extract the argument list using VA apis */
	va_list args;
	va_start(args, format);
 80005f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80005fc:	607b      	str	r3, [r7, #4]
	vsprintf(str, format, args);
 80005fe:	f107 0308 	add.w	r3, r7, #8
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000606:	4618      	mov	r0, r3
 8000608:	f002 f808 	bl	800261c <vsiprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 800060c:	f107 0308 	add.w	r3, r7, #8
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff fe15 	bl	8000240 <strlen>
 8000616:	4603      	mov	r3, r0
 8000618:	b29a      	uxth	r2, r3
 800061a:	f107 0108 	add.w	r1, r7, #8
 800061e:	f04f 33ff 	mov.w	r3, #4294967295
 8000622:	4805      	ldr	r0, [pc, #20]	; (8000638 <printmsg+0x48>)
 8000624:	f000 fed8 	bl	80013d8 <HAL_UART_Transmit>
	va_end(args);

}
 8000628:	bf00      	nop
 800062a:	3758      	adds	r7, #88	; 0x58
 800062c:	46bd      	mov	sp, r7
 800062e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000632:	b004      	add	sp, #16
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	200002c8 	.word	0x200002c8

0800063c <main>:

int main(void){
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b085      	sub	sp, #20
 8000640:	af04      	add	r7, sp, #16

	HAL_Init();
 8000642:	f000 fa56 	bl	8000af2 <HAL_Init>
	SystemClock_Config();
 8000646:	f000 f877 	bl	8000738 <SystemClock_Config>
	UART3_Init();
 800064a:	f000 f87d 	bl	8000748 <UART3_Init>

	hidden_layer_nn(input_vector, IN_LEN, HID_LEN, input_to_hidden_weights, OUT_LEN, hidden_to_output_weights, predicted_output);
 800064e:	4b2f      	ldr	r3, [pc, #188]	; (800070c <main+0xd0>)
 8000650:	9302      	str	r3, [sp, #8]
 8000652:	4b2f      	ldr	r3, [pc, #188]	; (8000710 <main+0xd4>)
 8000654:	9301      	str	r3, [sp, #4]
 8000656:	2303      	movs	r3, #3
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	4b2e      	ldr	r3, [pc, #184]	; (8000714 <main+0xd8>)
 800065c:	2203      	movs	r2, #3
 800065e:	2103      	movs	r1, #3
 8000660:	482d      	ldr	r0, [pc, #180]	; (8000718 <main+0xdc>)
 8000662:	f000 f8ea 	bl	800083a <hidden_layer_nn>

	printmsg("Sad prediction: %f\r\n", predicted_output[SAD_PREDICTION_IDX]);
 8000666:	4b29      	ldr	r3, [pc, #164]	; (800070c <main+0xd0>)
 8000668:	e9d3 3400 	ldrd	r3, r4, [r3]
 800066c:	461a      	mov	r2, r3
 800066e:	4623      	mov	r3, r4
 8000670:	482a      	ldr	r0, [pc, #168]	; (800071c <main+0xe0>)
 8000672:	f7ff ffbd 	bl	80005f0 <printmsg>
	printmsg("Sad error: %f\r\n", find_error_simple(predicted_output[SAD_PREDICTION_IDX], expected_values[SAD_PREDICTION_IDX]));
 8000676:	4b25      	ldr	r3, [pc, #148]	; (800070c <main+0xd0>)
 8000678:	ed93 7b00 	vldr	d7, [r3]
 800067c:	4b28      	ldr	r3, [pc, #160]	; (8000720 <main+0xe4>)
 800067e:	ed93 6b00 	vldr	d6, [r3]
 8000682:	eeb0 1b46 	vmov.f64	d1, d6
 8000686:	eeb0 0b47 	vmov.f64	d0, d7
 800068a:	f000 f938 	bl	80008fe <find_error_simple>
 800068e:	ec54 3b10 	vmov	r3, r4, d0
 8000692:	461a      	mov	r2, r3
 8000694:	4623      	mov	r3, r4
 8000696:	4823      	ldr	r0, [pc, #140]	; (8000724 <main+0xe8>)
 8000698:	f7ff ffaa 	bl	80005f0 <printmsg>

	printmsg("Sick prediction: %f\r\n", predicted_output[SICK_PREDCITION_IDX]);
 800069c:	4b1b      	ldr	r3, [pc, #108]	; (800070c <main+0xd0>)
 800069e:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80006a2:	461a      	mov	r2, r3
 80006a4:	4623      	mov	r3, r4
 80006a6:	4820      	ldr	r0, [pc, #128]	; (8000728 <main+0xec>)
 80006a8:	f7ff ffa2 	bl	80005f0 <printmsg>
	printmsg("Sick error: %f\r\n", find_error_simple(predicted_output[SICK_PREDCITION_IDX], expected_values[SICK_PREDCITION_IDX]));
 80006ac:	4b17      	ldr	r3, [pc, #92]	; (800070c <main+0xd0>)
 80006ae:	ed93 7b02 	vldr	d7, [r3, #8]
 80006b2:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <main+0xe4>)
 80006b4:	ed93 6b02 	vldr	d6, [r3, #8]
 80006b8:	eeb0 1b46 	vmov.f64	d1, d6
 80006bc:	eeb0 0b47 	vmov.f64	d0, d7
 80006c0:	f000 f91d 	bl	80008fe <find_error_simple>
 80006c4:	ec54 3b10 	vmov	r3, r4, d0
 80006c8:	461a      	mov	r2, r3
 80006ca:	4623      	mov	r3, r4
 80006cc:	4817      	ldr	r0, [pc, #92]	; (800072c <main+0xf0>)
 80006ce:	f7ff ff8f 	bl	80005f0 <printmsg>

	printmsg("Active prediction: %f\r\n", predicted_output[ACTIVE_PREDICTION_IDX]);
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <main+0xd0>)
 80006d4:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80006d8:	461a      	mov	r2, r3
 80006da:	4623      	mov	r3, r4
 80006dc:	4814      	ldr	r0, [pc, #80]	; (8000730 <main+0xf4>)
 80006de:	f7ff ff87 	bl	80005f0 <printmsg>
	printmsg("Active error: %f\r\n", find_error_simple(predicted_output[ACTIVE_PREDICTION_IDX], expected_values[ACTIVE_PREDICTION_IDX]));
 80006e2:	4b0a      	ldr	r3, [pc, #40]	; (800070c <main+0xd0>)
 80006e4:	ed93 7b04 	vldr	d7, [r3, #16]
 80006e8:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <main+0xe4>)
 80006ea:	ed93 6b04 	vldr	d6, [r3, #16]
 80006ee:	eeb0 1b46 	vmov.f64	d1, d6
 80006f2:	eeb0 0b47 	vmov.f64	d0, d7
 80006f6:	f000 f902 	bl	80008fe <find_error_simple>
 80006fa:	ec54 3b10 	vmov	r3, r4, d0
 80006fe:	461a      	mov	r2, r3
 8000700:	4623      	mov	r3, r4
 8000702:	480c      	ldr	r0, [pc, #48]	; (8000734 <main+0xf8>)
 8000704:	f7ff ff74 	bl	80005f0 <printmsg>

	while(1);
 8000708:	e7fe      	b.n	8000708 <main+0xcc>
 800070a:	bf00      	nop
 800070c:	20000348 	.word	0x20000348
 8000710:	20000048 	.word	0x20000048
 8000714:	20000000 	.word	0x20000000
 8000718:	20000090 	.word	0x20000090
 800071c:	08004038 	.word	0x08004038
 8000720:	200000a8 	.word	0x200000a8
 8000724:	08004050 	.word	0x08004050
 8000728:	08004060 	.word	0x08004060
 800072c:	08004078 	.word	0x08004078
 8000730:	0800408c 	.word	0x0800408c
 8000734:	080040a4 	.word	0x080040a4

08000738 <SystemClock_Config>:

}

void SystemClock_Config(void){
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0

}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
	...

08000748 <UART3_Init>:

void UART3_Init(void){
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0

	huart3.Instance = USART3;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <UART3_Init+0x44>)
 800074e:	4a10      	ldr	r2, [pc, #64]	; (8000790 <UART3_Init+0x48>)
 8000750:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <UART3_Init+0x44>)
 8000754:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000758:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <UART3_Init+0x44>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <UART3_Init+0x44>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <UART3_Init+0x44>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <UART3_Init+0x44>)
 800076e:	2200      	movs	r2, #0
 8000770:	619a      	str	r2, [r3, #24]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <UART3_Init+0x44>)
 8000774:	220c      	movs	r2, #12
 8000776:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart3) != HAL_OK){
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <UART3_Init+0x44>)
 800077a:	f000 fddf 	bl	800133c <HAL_UART_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <UART3_Init+0x40>
		Error_Handler();
 8000784:	f000 f806 	bl	8000794 <Error_Handler>
	}

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	200002c8 	.word	0x200002c8
 8000790:	40004800 	.word	0x40004800

08000794 <Error_Handler>:

void Error_Handler(void){
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  while(1);
 8000798:	e7fe      	b.n	8000798 <Error_Handler+0x4>

0800079a <matrix_vector_multiplication>:

void single_in_multiple_out_nn(double input_scalar, double *weight_vector, double *out_vector, double vector_len){
	elementwise_multiply(input_scalar, weight_vector, out_vector, vector_len);
}

void matrix_vector_multiplication(double *input_vector, uint32_t input_len, double *output_vector, uint32_t output_len, double weights_matrix[output_len][input_len]){
 800079a:	b490      	push	{r4, r7}
 800079c:	b088      	sub	sp, #32
 800079e:	af00      	add	r7, sp, #0
 80007a0:	60f8      	str	r0, [r7, #12]
 80007a2:	60b9      	str	r1, [r7, #8]
 80007a4:	607a      	str	r2, [r7, #4]
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	68b8      	ldr	r0, [r7, #8]
 80007aa:	4603      	mov	r3, r0
 80007ac:	3b01      	subs	r3, #1
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	4601      	mov	r1, r0
 80007b2:	f04f 0200 	mov.w	r2, #0
 80007b6:	f04f 0300 	mov.w	r3, #0
 80007ba:	f04f 0400 	mov.w	r4, #0
 80007be:	0194      	lsls	r4, r2, #6
 80007c0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80007c4:	018b      	lsls	r3, r1, #6
	for(int k = 0; k < output_len; k++){
 80007c6:	2300      	movs	r3, #0
 80007c8:	61bb      	str	r3, [r7, #24]
 80007ca:	e02d      	b.n	8000828 <matrix_vector_multiplication+0x8e>
		for(int i = 0; i < input_len; i++){
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
 80007d0:	e023      	b.n	800081a <matrix_vector_multiplication+0x80>
			output_vector[k] += input_vector[i] * weights_matrix[k][i];
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	00db      	lsls	r3, r3, #3
 80007d6:	68fa      	ldr	r2, [r7, #12]
 80007d8:	4413      	add	r3, r2
 80007da:	ed93 6b00 	vldr	d6, [r3]
 80007de:	69bb      	ldr	r3, [r7, #24]
 80007e0:	fb03 f300 	mul.w	r3, r3, r0
 80007e4:	00db      	lsls	r3, r3, #3
 80007e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007e8:	441a      	add	r2, r3
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	00db      	lsls	r3, r3, #3
 80007ee:	4413      	add	r3, r2
 80007f0:	ed93 7b00 	vldr	d7, [r3]
 80007f4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80007f8:	69bb      	ldr	r3, [r7, #24]
 80007fa:	00db      	lsls	r3, r3, #3
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	4413      	add	r3, r2
 8000800:	ed93 7b00 	vldr	d7, [r3]
 8000804:	69bb      	ldr	r3, [r7, #24]
 8000806:	00db      	lsls	r3, r3, #3
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	4413      	add	r3, r2
 800080c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000810:	ed83 7b00 	vstr	d7, [r3]
		for(int i = 0; i < input_len; i++){
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	3301      	adds	r3, #1
 8000818:	61fb      	str	r3, [r7, #28]
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	68ba      	ldr	r2, [r7, #8]
 800081e:	429a      	cmp	r2, r3
 8000820:	d8d7      	bhi.n	80007d2 <matrix_vector_multiplication+0x38>
	for(int k = 0; k < output_len; k++){
 8000822:	69bb      	ldr	r3, [r7, #24]
 8000824:	3301      	adds	r3, #1
 8000826:	61bb      	str	r3, [r7, #24]
 8000828:	69bb      	ldr	r3, [r7, #24]
 800082a:	683a      	ldr	r2, [r7, #0]
 800082c:	429a      	cmp	r2, r3
 800082e:	d8cd      	bhi.n	80007cc <matrix_vector_multiplication+0x32>
		}
	}
}
 8000830:	bf00      	nop
 8000832:	3720      	adds	r7, #32
 8000834:	46bd      	mov	sp, r7
 8000836:	bc90      	pop	{r4, r7}
 8000838:	4770      	bx	lr

0800083a <hidden_layer_nn>:
			   	     uint32_t input_len,
					 uint32_t hidden_len,
					 double in_to_hid_weights[hidden_len][input_len],
					 uint32_t output_len,
					 double hid_to_out_weights[output_len][hidden_len],
					 double *output_vector){
 800083a:	b5b0      	push	{r4, r5, r7, lr}
 800083c:	b08a      	sub	sp, #40	; 0x28
 800083e:	af02      	add	r7, sp, #8
 8000840:	60f8      	str	r0, [r7, #12]
 8000842:	60b9      	str	r1, [r7, #8]
 8000844:	607a      	str	r2, [r7, #4]
 8000846:	603b      	str	r3, [r7, #0]
					 double in_to_hid_weights[hidden_len][input_len],
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	461a      	mov	r2, r3
 800084c:	3a01      	subs	r2, #1
void hidden_layer_nn(double *input_vector,
 800084e:	61ba      	str	r2, [r7, #24]
 8000850:	4619      	mov	r1, r3
 8000852:	f04f 0200 	mov.w	r2, #0
 8000856:	f04f 0300 	mov.w	r3, #0
 800085a:	f04f 0400 	mov.w	r4, #0
 800085e:	0194      	lsls	r4, r2, #6
 8000860:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000864:	018b      	lsls	r3, r1, #6
					 double hid_to_out_weights[output_len][hidden_len],
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	461a      	mov	r2, r3
 800086a:	3a01      	subs	r2, #1
void hidden_layer_nn(double *input_vector,
 800086c:	61fa      	str	r2, [r7, #28]
 800086e:	4619      	mov	r1, r3
 8000870:	f04f 0200 	mov.w	r2, #0
 8000874:	f04f 0300 	mov.w	r3, #0
 8000878:	f04f 0400 	mov.w	r4, #0
 800087c:	0194      	lsls	r4, r2, #6
 800087e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000882:	018b      	lsls	r3, r1, #6
					 double *output_vector){
 8000884:	466b      	mov	r3, sp
 8000886:	461d      	mov	r5, r3

double hidden_pred_vector[hidden_len];
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	4603      	mov	r3, r0
 800088c:	3b01      	subs	r3, #1
 800088e:	617b      	str	r3, [r7, #20]
 8000890:	4601      	mov	r1, r0
 8000892:	f04f 0200 	mov.w	r2, #0
 8000896:	f04f 0300 	mov.w	r3, #0
 800089a:	f04f 0400 	mov.w	r4, #0
 800089e:	0194      	lsls	r4, r2, #6
 80008a0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80008a4:	018b      	lsls	r3, r1, #6
 80008a6:	4601      	mov	r1, r0
 80008a8:	f04f 0200 	mov.w	r2, #0
 80008ac:	f04f 0300 	mov.w	r3, #0
 80008b0:	f04f 0400 	mov.w	r4, #0
 80008b4:	0194      	lsls	r4, r2, #6
 80008b6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80008ba:	018b      	lsls	r3, r1, #6
 80008bc:	00c3      	lsls	r3, r0, #3
 80008be:	3307      	adds	r3, #7
 80008c0:	3307      	adds	r3, #7
 80008c2:	08db      	lsrs	r3, r3, #3
 80008c4:	00db      	lsls	r3, r3, #3
 80008c6:	ebad 0d03 	sub.w	sp, sp, r3
 80008ca:	ab02      	add	r3, sp, #8
 80008cc:	3307      	adds	r3, #7
 80008ce:	08db      	lsrs	r3, r3, #3
 80008d0:	00db      	lsls	r3, r3, #3
 80008d2:	613b      	str	r3, [r7, #16]

matrix_vector_multiplication(input_vector, input_len, hidden_pred_vector, output_len, in_to_hid_weights);
 80008d4:	693a      	ldr	r2, [r7, #16]
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008dc:	68b9      	ldr	r1, [r7, #8]
 80008de:	68f8      	ldr	r0, [r7, #12]
 80008e0:	f7ff ff5b 	bl	800079a <matrix_vector_multiplication>
matrix_vector_multiplication(hidden_pred_vector, hidden_len, output_vector, output_len, hid_to_out_weights);
 80008e4:	6938      	ldr	r0, [r7, #16]
 80008e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008e8:	9300      	str	r3, [sp, #0]
 80008ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80008ee:	6879      	ldr	r1, [r7, #4]
 80008f0:	f7ff ff53 	bl	800079a <matrix_vector_multiplication>
 80008f4:	46ad      	mov	sp, r5

}
 80008f6:	bf00      	nop
 80008f8:	3720      	adds	r7, #32
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bdb0      	pop	{r4, r5, r7, pc}

080008fe <find_error_simple>:

double find_error_simple(double yhat, double y){
 80008fe:	b580      	push	{r7, lr}
 8000900:	b084      	sub	sp, #16
 8000902:	af00      	add	r7, sp, #0
 8000904:	ed87 0b02 	vstr	d0, [r7, #8]
 8000908:	ed87 1b00 	vstr	d1, [r7]

	return powf((yhat - y), 2);
 800090c:	ed97 6b02 	vldr	d6, [r7, #8]
 8000910:	ed97 7b00 	vldr	d7, [r7]
 8000914:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000918:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800091c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000920:	eeb0 0a67 	vmov.f32	s0, s15
 8000924:	f003 f9f0 	bl	8003d08 <powf>
 8000928:	eef0 7a40 	vmov.f32	s15, s0
 800092c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
}
 8000930:	eeb0 0b47 	vmov.f64	d0, d7
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <HAL_MspInit>:
 *      Author: Mateus Sousa
 */

#include "main.h"

void HAL_MspInit(void){
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	//__HAL_RCC_PWR_CLK_ENABLE();
	//__HAL_RCC_SYSCFG_CLK_ENABLE();

	//1. Set up the priority grouping of the arm cortex mx processor
	// This line is not required because priority grouping will be 4 by default
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000940:	2003      	movs	r0, #3
 8000942:	f000 fa03 	bl	8000d4c <HAL_NVIC_SetPriorityGrouping>
	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <HAL_MspInit+0x40>)
 8000948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800094a:	4a0c      	ldr	r2, [pc, #48]	; (800097c <HAL_MspInit+0x40>)
 800094c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000950:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	2100      	movs	r1, #0
 8000956:	f06f 000b 	mvn.w	r0, #11
 800095a:	f000 fa02 	bl	8000d62 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	f06f 000a 	mvn.w	r0, #10
 8000966:	f000 f9fc 	bl	8000d62 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	f06f 0009 	mvn.w	r0, #9
 8000972:	f000 f9f6 	bl	8000d62 <HAL_NVIC_SetPriority>

}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart){
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	; 0x28
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef gpio_uart;
	//here we are going to do the low level inits. of the USART2 peripheral

	//1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	__HAL_RCC_USART3_CLK_ENABLE();
 8000988:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <HAL_UART_MspInit+0x74>)
 800098a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098c:	4a19      	ldr	r2, [pc, #100]	; (80009f4 <HAL_UART_MspInit+0x74>)
 800098e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000992:	6413      	str	r3, [r2, #64]	; 0x40
 8000994:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <HAL_UART_MspInit+0x74>)
 8000996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000998:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80009a0:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <HAL_UART_MspInit+0x74>)
 80009a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a4:	4a13      	ldr	r2, [pc, #76]	; (80009f4 <HAL_UART_MspInit+0x74>)
 80009a6:	f043 0308 	orr.w	r3, r3, #8
 80009aa:	6313      	str	r3, [r2, #48]	; 0x30
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <HAL_UART_MspInit+0x74>)
 80009ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b0:	f003 0308 	and.w	r3, r3, #8
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	68fb      	ldr	r3, [r7, #12]

	//2. Do the pin muxing configurations
	gpio_uart.Pin = GPIO_PIN_8|GPIO_PIN_9; //UART2_TX
 80009b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009bc:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 80009be:	2302      	movs	r3, #2
 80009c0:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART3;
 80009ca:	2307      	movs	r3, #7
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(GPIOD, &gpio_uart);
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	4619      	mov	r1, r3
 80009d4:	4808      	ldr	r0, [pc, #32]	; (80009f8 <HAL_UART_MspInit+0x78>)
 80009d6:	f000 f9fb 	bl	8000dd0 <HAL_GPIO_Init>

	//3. Enable the IRQ and set up the priority (NVIC settings)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009da:	2026      	movs	r0, #38	; 0x26
 80009dc:	f000 f9dd 	bl	8000d9a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 80009e0:	2200      	movs	r2, #0
 80009e2:	210f      	movs	r1, #15
 80009e4:	2026      	movs	r0, #38	; 0x26
 80009e6:	f000 f9bc 	bl	8000d62 <HAL_NVIC_SetPriority>

}
 80009ea:	bf00      	nop
 80009ec:	3728      	adds	r7, #40	; 0x28
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40020c00 	.word	0x40020c00

080009fc <SysTick_Handler>:
 */

#include "main.h"
#include "stm32f7xx_it.h"

void SysTick_Handler(void){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000a00:	f000 f8b4 	bl	8000b6c <HAL_IncTick>
}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a10:	4a14      	ldr	r2, [pc, #80]	; (8000a64 <_sbrk+0x5c>)
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <_sbrk+0x60>)
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a1c:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <_sbrk+0x64>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d102      	bne.n	8000a2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a24:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <_sbrk+0x64>)
 8000a26:	4a12      	ldr	r2, [pc, #72]	; (8000a70 <_sbrk+0x68>)
 8000a28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a2a:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <_sbrk+0x64>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4413      	add	r3, r2
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d207      	bcs.n	8000a48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a38:	f001 f96c 	bl	8001d14 <__errno>
 8000a3c:	4602      	mov	r2, r0
 8000a3e:	230c      	movs	r3, #12
 8000a40:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000a42:	f04f 33ff 	mov.w	r3, #4294967295
 8000a46:	e009      	b.n	8000a5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a48:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <_sbrk+0x64>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a4e:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <_sbrk+0x64>)
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4413      	add	r3, r2
 8000a56:	4a05      	ldr	r2, [pc, #20]	; (8000a6c <_sbrk+0x64>)
 8000a58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3718      	adds	r7, #24
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20080000 	.word	0x20080000
 8000a68:	00000400 	.word	0x00000400
 8000a6c:	200002bc 	.word	0x200002bc
 8000a70:	20000368 	.word	0x20000368

08000a74 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <SystemInit+0x28>)
 8000a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7e:	4a07      	ldr	r2, [pc, #28]	; (8000a9c <SystemInit+0x28>)
 8000a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a88:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <SystemInit+0x28>)
 8000a8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a8e:	609a      	str	r2, [r3, #8]
#endif
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000aa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ad8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000aa4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000aa6:	e003      	b.n	8000ab0 <LoopCopyDataInit>

08000aa8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000aaa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000aac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000aae:	3104      	adds	r1, #4

08000ab0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ab0:	480b      	ldr	r0, [pc, #44]	; (8000ae0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ab4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ab6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ab8:	d3f6      	bcc.n	8000aa8 <CopyDataInit>
  ldr  r2, =_sbss
 8000aba:	4a0b      	ldr	r2, [pc, #44]	; (8000ae8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000abc:	e002      	b.n	8000ac4 <LoopFillZerobss>

08000abe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000abe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ac0:	f842 3b04 	str.w	r3, [r2], #4

08000ac4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ac4:	4b09      	ldr	r3, [pc, #36]	; (8000aec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ac6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ac8:	d3f9      	bcc.n	8000abe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000aca:	f7ff ffd3 	bl	8000a74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ace:	f001 f927 	bl	8001d20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ad2:	f7ff fdb3 	bl	800063c <main>
  bx  lr    
 8000ad6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ad8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000adc:	080045a0 	.word	0x080045a0
  ldr  r0, =_sdata
 8000ae0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ae4:	2000029c 	.word	0x2000029c
  ldr  r2, =_sbss
 8000ae8:	200002a0 	.word	0x200002a0
  ldr  r3, = _ebss
 8000aec:	20000368 	.word	0x20000368

08000af0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af0:	e7fe      	b.n	8000af0 <ADC_IRQHandler>

08000af2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af6:	2003      	movs	r0, #3
 8000af8:	f000 f928 	bl	8000d4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000afc:	2000      	movs	r0, #0
 8000afe:	f000 f805 	bl	8000b0c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000b02:	f7ff ff1b 	bl	800093c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000b06:	2300      	movs	r3, #0
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <HAL_InitTick+0x54>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <HAL_InitTick+0x58>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 f943 	bl	8000db6 <HAL_SYSTICK_Config>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e00e      	b.n	8000b58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2b0f      	cmp	r3, #15
 8000b3e:	d80a      	bhi.n	8000b56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b40:	2200      	movs	r2, #0
 8000b42:	6879      	ldr	r1, [r7, #4]
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295
 8000b48:	f000 f90b 	bl	8000d62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b4c:	4a06      	ldr	r2, [pc, #24]	; (8000b68 <HAL_InitTick+0x5c>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b52:	2300      	movs	r3, #0
 8000b54:	e000      	b.n	8000b58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	200000c0 	.word	0x200000c0
 8000b64:	200000c8 	.word	0x200000c8
 8000b68:	200000c4 	.word	0x200000c4

08000b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_IncTick+0x20>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_IncTick+0x24>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <HAL_IncTick+0x24>)
 8000b7e:	6013      	str	r3, [r2, #0]
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	200000c8 	.word	0x200000c8
 8000b90:	20000360 	.word	0x20000360

08000b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return uwTick;
 8000b98:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <HAL_GetTick+0x14>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	20000360 	.word	0x20000360

08000bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bbc:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <__NVIC_SetPriorityGrouping+0x40>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc2:	68ba      	ldr	r2, [r7, #8]
 8000bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bda:	4a04      	ldr	r2, [pc, #16]	; (8000bec <__NVIC_SetPriorityGrouping+0x40>)
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	60d3      	str	r3, [r2, #12]
}
 8000be0:	bf00      	nop
 8000be2:	3714      	adds	r7, #20
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000ed00 	.word	0xe000ed00
 8000bf0:	05fa0000 	.word	0x05fa0000

08000bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf8:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <__NVIC_GetPriorityGrouping+0x18>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	0a1b      	lsrs	r3, r3, #8
 8000bfe:	f003 0307 	and.w	r3, r3, #7
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	db0b      	blt.n	8000c3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	f003 021f 	and.w	r2, r3, #31
 8000c28:	4907      	ldr	r1, [pc, #28]	; (8000c48 <__NVIC_EnableIRQ+0x38>)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	095b      	lsrs	r3, r3, #5
 8000c30:	2001      	movs	r0, #1
 8000c32:	fa00 f202 	lsl.w	r2, r0, r2
 8000c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000e100 	.word	0xe000e100

08000c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	6039      	str	r1, [r7, #0]
 8000c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	db0a      	blt.n	8000c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	490c      	ldr	r1, [pc, #48]	; (8000c98 <__NVIC_SetPriority+0x4c>)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	0112      	lsls	r2, r2, #4
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	440b      	add	r3, r1
 8000c70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c74:	e00a      	b.n	8000c8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	4908      	ldr	r1, [pc, #32]	; (8000c9c <__NVIC_SetPriority+0x50>)
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	f003 030f 	and.w	r3, r3, #15
 8000c82:	3b04      	subs	r3, #4
 8000c84:	0112      	lsls	r2, r2, #4
 8000c86:	b2d2      	uxtb	r2, r2
 8000c88:	440b      	add	r3, r1
 8000c8a:	761a      	strb	r2, [r3, #24]
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000e100 	.word	0xe000e100
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b089      	sub	sp, #36	; 0x24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	f1c3 0307 	rsb	r3, r3, #7
 8000cba:	2b04      	cmp	r3, #4
 8000cbc:	bf28      	it	cs
 8000cbe:	2304      	movcs	r3, #4
 8000cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3304      	adds	r3, #4
 8000cc6:	2b06      	cmp	r3, #6
 8000cc8:	d902      	bls.n	8000cd0 <NVIC_EncodePriority+0x30>
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3b03      	subs	r3, #3
 8000cce:	e000      	b.n	8000cd2 <NVIC_EncodePriority+0x32>
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43da      	mvns	r2, r3
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf2:	43d9      	mvns	r1, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	4313      	orrs	r3, r2
         );
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3724      	adds	r7, #36	; 0x24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
	...

08000d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d18:	d301      	bcc.n	8000d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e00f      	b.n	8000d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <SysTick_Config+0x40>)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d26:	210f      	movs	r1, #15
 8000d28:	f04f 30ff 	mov.w	r0, #4294967295
 8000d2c:	f7ff ff8e 	bl	8000c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d30:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <SysTick_Config+0x40>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d36:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <SysTick_Config+0x40>)
 8000d38:	2207      	movs	r2, #7
 8000d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	e000e010 	.word	0xe000e010

08000d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f7ff ff29 	bl	8000bac <__NVIC_SetPriorityGrouping>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b086      	sub	sp, #24
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	4603      	mov	r3, r0
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	607a      	str	r2, [r7, #4]
 8000d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d74:	f7ff ff3e 	bl	8000bf4 <__NVIC_GetPriorityGrouping>
 8000d78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	68b9      	ldr	r1, [r7, #8]
 8000d7e:	6978      	ldr	r0, [r7, #20]
 8000d80:	f7ff ff8e 	bl	8000ca0 <NVIC_EncodePriority>
 8000d84:	4602      	mov	r2, r0
 8000d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff5d 	bl	8000c4c <__NVIC_SetPriority>
}
 8000d92:	bf00      	nop
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	4603      	mov	r3, r0
 8000da2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff ff31 	bl	8000c10 <__NVIC_EnableIRQ>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff ffa2 	bl	8000d08 <SysTick_Config>
 8000dc4:	4603      	mov	r3, r0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b089      	sub	sp, #36	; 0x24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
 8000dee:	e175      	b.n	80010dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000df0:	2201      	movs	r2, #1
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	697a      	ldr	r2, [r7, #20]
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	f040 8164 	bne.w	80010d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d00b      	beq.n	8000e2e <HAL_GPIO_Init+0x5e>
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d007      	beq.n	8000e2e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e22:	2b11      	cmp	r3, #17
 8000e24:	d003      	beq.n	8000e2e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	2b12      	cmp	r3, #18
 8000e2c:	d130      	bne.n	8000e90 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	2203      	movs	r2, #3
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4013      	ands	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	68da      	ldr	r2, [r3, #12]
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e64:	2201      	movs	r2, #1
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	091b      	lsrs	r3, r3, #4
 8000e7a:	f003 0201 	and.w	r2, r3, #1
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	689a      	ldr	r2, [r3, #8]
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d003      	beq.n	8000ed0 <HAL_GPIO_Init+0x100>
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	2b12      	cmp	r3, #18
 8000ece:	d123      	bne.n	8000f18 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	08da      	lsrs	r2, r3, #3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3208      	adds	r2, #8
 8000ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	f003 0307 	and.w	r3, r3, #7
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	220f      	movs	r2, #15
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	691a      	ldr	r2, [r3, #16]
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	08da      	lsrs	r2, r3, #3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3208      	adds	r2, #8
 8000f12:	69b9      	ldr	r1, [r7, #24]
 8000f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	2203      	movs	r2, #3
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f003 0203 	and.w	r2, r3, #3
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	f000 80be 	beq.w	80010d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5a:	4b65      	ldr	r3, [pc, #404]	; (80010f0 <HAL_GPIO_Init+0x320>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	4a64      	ldr	r2, [pc, #400]	; (80010f0 <HAL_GPIO_Init+0x320>)
 8000f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f64:	6453      	str	r3, [r2, #68]	; 0x44
 8000f66:	4b62      	ldr	r3, [pc, #392]	; (80010f0 <HAL_GPIO_Init+0x320>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f72:	4a60      	ldr	r2, [pc, #384]	; (80010f4 <HAL_GPIO_Init+0x324>)
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	089b      	lsrs	r3, r3, #2
 8000f78:	3302      	adds	r3, #2
 8000f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	f003 0303 	and.w	r3, r3, #3
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	220f      	movs	r2, #15
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4013      	ands	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a57      	ldr	r2, [pc, #348]	; (80010f8 <HAL_GPIO_Init+0x328>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d037      	beq.n	800100e <HAL_GPIO_Init+0x23e>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a56      	ldr	r2, [pc, #344]	; (80010fc <HAL_GPIO_Init+0x32c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d031      	beq.n	800100a <HAL_GPIO_Init+0x23a>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a55      	ldr	r2, [pc, #340]	; (8001100 <HAL_GPIO_Init+0x330>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d02b      	beq.n	8001006 <HAL_GPIO_Init+0x236>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a54      	ldr	r2, [pc, #336]	; (8001104 <HAL_GPIO_Init+0x334>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d025      	beq.n	8001002 <HAL_GPIO_Init+0x232>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a53      	ldr	r2, [pc, #332]	; (8001108 <HAL_GPIO_Init+0x338>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d01f      	beq.n	8000ffe <HAL_GPIO_Init+0x22e>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a52      	ldr	r2, [pc, #328]	; (800110c <HAL_GPIO_Init+0x33c>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d019      	beq.n	8000ffa <HAL_GPIO_Init+0x22a>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a51      	ldr	r2, [pc, #324]	; (8001110 <HAL_GPIO_Init+0x340>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d013      	beq.n	8000ff6 <HAL_GPIO_Init+0x226>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a50      	ldr	r2, [pc, #320]	; (8001114 <HAL_GPIO_Init+0x344>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d00d      	beq.n	8000ff2 <HAL_GPIO_Init+0x222>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a4f      	ldr	r2, [pc, #316]	; (8001118 <HAL_GPIO_Init+0x348>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d007      	beq.n	8000fee <HAL_GPIO_Init+0x21e>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a4e      	ldr	r2, [pc, #312]	; (800111c <HAL_GPIO_Init+0x34c>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d101      	bne.n	8000fea <HAL_GPIO_Init+0x21a>
 8000fe6:	2309      	movs	r3, #9
 8000fe8:	e012      	b.n	8001010 <HAL_GPIO_Init+0x240>
 8000fea:	230a      	movs	r3, #10
 8000fec:	e010      	b.n	8001010 <HAL_GPIO_Init+0x240>
 8000fee:	2308      	movs	r3, #8
 8000ff0:	e00e      	b.n	8001010 <HAL_GPIO_Init+0x240>
 8000ff2:	2307      	movs	r3, #7
 8000ff4:	e00c      	b.n	8001010 <HAL_GPIO_Init+0x240>
 8000ff6:	2306      	movs	r3, #6
 8000ff8:	e00a      	b.n	8001010 <HAL_GPIO_Init+0x240>
 8000ffa:	2305      	movs	r3, #5
 8000ffc:	e008      	b.n	8001010 <HAL_GPIO_Init+0x240>
 8000ffe:	2304      	movs	r3, #4
 8001000:	e006      	b.n	8001010 <HAL_GPIO_Init+0x240>
 8001002:	2303      	movs	r3, #3
 8001004:	e004      	b.n	8001010 <HAL_GPIO_Init+0x240>
 8001006:	2302      	movs	r3, #2
 8001008:	e002      	b.n	8001010 <HAL_GPIO_Init+0x240>
 800100a:	2301      	movs	r3, #1
 800100c:	e000      	b.n	8001010 <HAL_GPIO_Init+0x240>
 800100e:	2300      	movs	r3, #0
 8001010:	69fa      	ldr	r2, [r7, #28]
 8001012:	f002 0203 	and.w	r2, r2, #3
 8001016:	0092      	lsls	r2, r2, #2
 8001018:	4093      	lsls	r3, r2
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4313      	orrs	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001020:	4934      	ldr	r1, [pc, #208]	; (80010f4 <HAL_GPIO_Init+0x324>)
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	089b      	lsrs	r3, r3, #2
 8001026:	3302      	adds	r3, #2
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800102e:	4b3c      	ldr	r3, [pc, #240]	; (8001120 <HAL_GPIO_Init+0x350>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001052:	4a33      	ldr	r2, [pc, #204]	; (8001120 <HAL_GPIO_Init+0x350>)
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001058:	4b31      	ldr	r3, [pc, #196]	; (8001120 <HAL_GPIO_Init+0x350>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800107c:	4a28      	ldr	r2, [pc, #160]	; (8001120 <HAL_GPIO_Init+0x350>)
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001082:	4b27      	ldr	r3, [pc, #156]	; (8001120 <HAL_GPIO_Init+0x350>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010a6:	4a1e      	ldr	r2, [pc, #120]	; (8001120 <HAL_GPIO_Init+0x350>)
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010ac:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <HAL_GPIO_Init+0x350>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d003      	beq.n	80010d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010d0:	4a13      	ldr	r2, [pc, #76]	; (8001120 <HAL_GPIO_Init+0x350>)
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3301      	adds	r3, #1
 80010da:	61fb      	str	r3, [r7, #28]
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	2b0f      	cmp	r3, #15
 80010e0:	f67f ae86 	bls.w	8000df0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80010e4:	bf00      	nop
 80010e6:	3724      	adds	r7, #36	; 0x24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40013800 	.word	0x40013800
 80010f8:	40020000 	.word	0x40020000
 80010fc:	40020400 	.word	0x40020400
 8001100:	40020800 	.word	0x40020800
 8001104:	40020c00 	.word	0x40020c00
 8001108:	40021000 	.word	0x40021000
 800110c:	40021400 	.word	0x40021400
 8001110:	40021800 	.word	0x40021800
 8001114:	40021c00 	.word	0x40021c00
 8001118:	40022000 	.word	0x40022000
 800111c:	40022400 	.word	0x40022400
 8001120:	40013c00 	.word	0x40013c00

08001124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	2300      	movs	r3, #0
 8001134:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800113a:	4b63      	ldr	r3, [pc, #396]	; (80012c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	f003 030c 	and.w	r3, r3, #12
 8001142:	2b04      	cmp	r3, #4
 8001144:	d007      	beq.n	8001156 <HAL_RCC_GetSysClockFreq+0x32>
 8001146:	2b08      	cmp	r3, #8
 8001148:	d008      	beq.n	800115c <HAL_RCC_GetSysClockFreq+0x38>
 800114a:	2b00      	cmp	r3, #0
 800114c:	f040 80b4 	bne.w	80012b8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001150:	4b5e      	ldr	r3, [pc, #376]	; (80012cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001152:	60bb      	str	r3, [r7, #8]
      break;
 8001154:	e0b3      	b.n	80012be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001156:	4b5e      	ldr	r3, [pc, #376]	; (80012d0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001158:	60bb      	str	r3, [r7, #8]
      break;
 800115a:	e0b0      	b.n	80012be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800115c:	4b5a      	ldr	r3, [pc, #360]	; (80012c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001164:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001166:	4b58      	ldr	r3, [pc, #352]	; (80012c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d04a      	beq.n	8001208 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001172:	4b55      	ldr	r3, [pc, #340]	; (80012c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	099b      	lsrs	r3, r3, #6
 8001178:	f04f 0400 	mov.w	r4, #0
 800117c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001180:	f04f 0200 	mov.w	r2, #0
 8001184:	ea03 0501 	and.w	r5, r3, r1
 8001188:	ea04 0602 	and.w	r6, r4, r2
 800118c:	4629      	mov	r1, r5
 800118e:	4632      	mov	r2, r6
 8001190:	f04f 0300 	mov.w	r3, #0
 8001194:	f04f 0400 	mov.w	r4, #0
 8001198:	0154      	lsls	r4, r2, #5
 800119a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800119e:	014b      	lsls	r3, r1, #5
 80011a0:	4619      	mov	r1, r3
 80011a2:	4622      	mov	r2, r4
 80011a4:	1b49      	subs	r1, r1, r5
 80011a6:	eb62 0206 	sbc.w	r2, r2, r6
 80011aa:	f04f 0300 	mov.w	r3, #0
 80011ae:	f04f 0400 	mov.w	r4, #0
 80011b2:	0194      	lsls	r4, r2, #6
 80011b4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80011b8:	018b      	lsls	r3, r1, #6
 80011ba:	1a5b      	subs	r3, r3, r1
 80011bc:	eb64 0402 	sbc.w	r4, r4, r2
 80011c0:	f04f 0100 	mov.w	r1, #0
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	00e2      	lsls	r2, r4, #3
 80011ca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80011ce:	00d9      	lsls	r1, r3, #3
 80011d0:	460b      	mov	r3, r1
 80011d2:	4614      	mov	r4, r2
 80011d4:	195b      	adds	r3, r3, r5
 80011d6:	eb44 0406 	adc.w	r4, r4, r6
 80011da:	f04f 0100 	mov.w	r1, #0
 80011de:	f04f 0200 	mov.w	r2, #0
 80011e2:	0262      	lsls	r2, r4, #9
 80011e4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80011e8:	0259      	lsls	r1, r3, #9
 80011ea:	460b      	mov	r3, r1
 80011ec:	4614      	mov	r4, r2
 80011ee:	4618      	mov	r0, r3
 80011f0:	4621      	mov	r1, r4
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f04f 0400 	mov.w	r4, #0
 80011f8:	461a      	mov	r2, r3
 80011fa:	4623      	mov	r3, r4
 80011fc:	f7ff f878 	bl	80002f0 <__aeabi_uldivmod>
 8001200:	4603      	mov	r3, r0
 8001202:	460c      	mov	r4, r1
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	e049      	b.n	800129c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001208:	4b2f      	ldr	r3, [pc, #188]	; (80012c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	099b      	lsrs	r3, r3, #6
 800120e:	f04f 0400 	mov.w	r4, #0
 8001212:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001216:	f04f 0200 	mov.w	r2, #0
 800121a:	ea03 0501 	and.w	r5, r3, r1
 800121e:	ea04 0602 	and.w	r6, r4, r2
 8001222:	4629      	mov	r1, r5
 8001224:	4632      	mov	r2, r6
 8001226:	f04f 0300 	mov.w	r3, #0
 800122a:	f04f 0400 	mov.w	r4, #0
 800122e:	0154      	lsls	r4, r2, #5
 8001230:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001234:	014b      	lsls	r3, r1, #5
 8001236:	4619      	mov	r1, r3
 8001238:	4622      	mov	r2, r4
 800123a:	1b49      	subs	r1, r1, r5
 800123c:	eb62 0206 	sbc.w	r2, r2, r6
 8001240:	f04f 0300 	mov.w	r3, #0
 8001244:	f04f 0400 	mov.w	r4, #0
 8001248:	0194      	lsls	r4, r2, #6
 800124a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800124e:	018b      	lsls	r3, r1, #6
 8001250:	1a5b      	subs	r3, r3, r1
 8001252:	eb64 0402 	sbc.w	r4, r4, r2
 8001256:	f04f 0100 	mov.w	r1, #0
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	00e2      	lsls	r2, r4, #3
 8001260:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001264:	00d9      	lsls	r1, r3, #3
 8001266:	460b      	mov	r3, r1
 8001268:	4614      	mov	r4, r2
 800126a:	195b      	adds	r3, r3, r5
 800126c:	eb44 0406 	adc.w	r4, r4, r6
 8001270:	f04f 0100 	mov.w	r1, #0
 8001274:	f04f 0200 	mov.w	r2, #0
 8001278:	02a2      	lsls	r2, r4, #10
 800127a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800127e:	0299      	lsls	r1, r3, #10
 8001280:	460b      	mov	r3, r1
 8001282:	4614      	mov	r4, r2
 8001284:	4618      	mov	r0, r3
 8001286:	4621      	mov	r1, r4
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f04f 0400 	mov.w	r4, #0
 800128e:	461a      	mov	r2, r3
 8001290:	4623      	mov	r3, r4
 8001292:	f7ff f82d 	bl	80002f0 <__aeabi_uldivmod>
 8001296:	4603      	mov	r3, r0
 8001298:	460c      	mov	r4, r1
 800129a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800129c:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	0c1b      	lsrs	r3, r3, #16
 80012a2:	f003 0303 	and.w	r3, r3, #3
 80012a6:	3301      	adds	r3, #1
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80012ac:	68fa      	ldr	r2, [r7, #12]
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b4:	60bb      	str	r3, [r7, #8]
      break;
 80012b6:	e002      	b.n	80012be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80012b8:	4b04      	ldr	r3, [pc, #16]	; (80012cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80012ba:	60bb      	str	r3, [r7, #8]
      break;
 80012bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012be:	68bb      	ldr	r3, [r7, #8]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c8:	40023800 	.word	0x40023800
 80012cc:	00f42400 	.word	0x00f42400
 80012d0:	007a1200 	.word	0x007a1200

080012d4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012d8:	4b03      	ldr	r3, [pc, #12]	; (80012e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80012da:	681b      	ldr	r3, [r3, #0]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	200000c0 	.word	0x200000c0

080012ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80012f0:	f7ff fff0 	bl	80012d4 <HAL_RCC_GetHCLKFreq>
 80012f4:	4601      	mov	r1, r0
 80012f6:	4b05      	ldr	r3, [pc, #20]	; (800130c <HAL_RCC_GetPCLK1Freq+0x20>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	0a9b      	lsrs	r3, r3, #10
 80012fc:	f003 0307 	and.w	r3, r3, #7
 8001300:	4a03      	ldr	r2, [pc, #12]	; (8001310 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001302:	5cd3      	ldrb	r3, [r2, r3]
 8001304:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001308:	4618      	mov	r0, r3
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40023800 	.word	0x40023800
 8001310:	080040b8 	.word	0x080040b8

08001314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001318:	f7ff ffdc 	bl	80012d4 <HAL_RCC_GetHCLKFreq>
 800131c:	4601      	mov	r1, r0
 800131e:	4b05      	ldr	r3, [pc, #20]	; (8001334 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	0b5b      	lsrs	r3, r3, #13
 8001324:	f003 0307 	and.w	r3, r3, #7
 8001328:	4a03      	ldr	r2, [pc, #12]	; (8001338 <HAL_RCC_GetPCLK2Freq+0x24>)
 800132a:	5cd3      	ldrb	r3, [r2, r3]
 800132c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001330:	4618      	mov	r0, r3
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40023800 	.word	0x40023800
 8001338:	080040b8 	.word	0x080040b8

0800133c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e040      	b.n	80013d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001352:	2b00      	cmp	r3, #0
 8001354:	d106      	bne.n	8001364 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff fb0e 	bl	8000980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2224      	movs	r2, #36	; 0x24
 8001368:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f022 0201 	bic.w	r2, r2, #1
 8001378:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f000 f8be 	bl	80014fc <UART_SetConfig>
 8001380:	4603      	mov	r3, r0
 8001382:	2b01      	cmp	r3, #1
 8001384:	d101      	bne.n	800138a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e022      	b.n	80013d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138e:	2b00      	cmp	r3, #0
 8001390:	d002      	beq.n	8001398 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 fb5c 	bl	8001a50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	685a      	ldr	r2, [r3, #4]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80013a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80013b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f042 0201 	orr.w	r2, r2, #1
 80013c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f000 fbe3 	bl	8001b94 <UART_CheckIdleState>
 80013ce:	4603      	mov	r3, r0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	; 0x28
 80013dc:	af02      	add	r7, sp, #8
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	4613      	mov	r3, r2
 80013e6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013ec:	2b20      	cmp	r3, #32
 80013ee:	d17f      	bne.n	80014f0 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d002      	beq.n	80013fc <HAL_UART_Transmit+0x24>
 80013f6:	88fb      	ldrh	r3, [r7, #6]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d101      	bne.n	8001400 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e078      	b.n	80014f2 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001406:	2b01      	cmp	r3, #1
 8001408:	d101      	bne.n	800140e <HAL_UART_Transmit+0x36>
 800140a:	2302      	movs	r3, #2
 800140c:	e071      	b.n	80014f2 <HAL_UART_Transmit+0x11a>
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2201      	movs	r2, #1
 8001412:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2200      	movs	r2, #0
 800141a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2221      	movs	r2, #33	; 0x21
 8001420:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001422:	f7ff fbb7 	bl	8000b94 <HAL_GetTick>
 8001426:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	88fa      	ldrh	r2, [r7, #6]
 800142c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	88fa      	ldrh	r2, [r7, #6]
 8001434:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001440:	d108      	bne.n	8001454 <HAL_UART_Transmit+0x7c>
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d104      	bne.n	8001454 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	61bb      	str	r3, [r7, #24]
 8001452:	e003      	b.n	800145c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001458:	2300      	movs	r3, #0
 800145a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2200      	movs	r2, #0
 8001460:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8001464:	e02c      	b.n	80014c0 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	2200      	movs	r2, #0
 800146e:	2180      	movs	r1, #128	; 0x80
 8001470:	68f8      	ldr	r0, [r7, #12]
 8001472:	f000 fbd4 	bl	8001c1e <UART_WaitOnFlagUntilTimeout>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e038      	b.n	80014f2 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d10b      	bne.n	800149e <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	461a      	mov	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001494:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	3302      	adds	r3, #2
 800149a:	61bb      	str	r3, [r7, #24]
 800149c:	e007      	b.n	80014ae <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	781a      	ldrb	r2, [r3, #0]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	3301      	adds	r3, #1
 80014ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	3b01      	subs	r3, #1
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1cc      	bne.n	8001466 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	2200      	movs	r2, #0
 80014d4:	2140      	movs	r1, #64	; 0x40
 80014d6:	68f8      	ldr	r0, [r7, #12]
 80014d8:	f000 fba1 	bl	8001c1e <UART_WaitOnFlagUntilTimeout>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e005      	b.n	80014f2 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2220      	movs	r2, #32
 80014ea:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80014ec:	2300      	movs	r3, #0
 80014ee:	e000      	b.n	80014f2 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80014f0:	2302      	movs	r3, #2
  }
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3720      	adds	r7, #32
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b088      	sub	sp, #32
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8001504:	2300      	movs	r3, #0
 8001506:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001508:	2300      	movs	r3, #0
 800150a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	431a      	orrs	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	431a      	orrs	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	69db      	ldr	r3, [r3, #28]
 8001520:	4313      	orrs	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	4bb1      	ldr	r3, [pc, #708]	; (80017f0 <UART_SetConfig+0x2f4>)
 800152c:	4013      	ands	r3, r2
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	6812      	ldr	r2, [r2, #0]
 8001532:	6939      	ldr	r1, [r7, #16]
 8001534:	430b      	orrs	r3, r1
 8001536:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	68da      	ldr	r2, [r3, #12]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	430a      	orrs	r2, r1
 800154c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4313      	orrs	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	430a      	orrs	r2, r1
 8001570:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a9f      	ldr	r2, [pc, #636]	; (80017f4 <UART_SetConfig+0x2f8>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d121      	bne.n	80015c0 <UART_SetConfig+0xc4>
 800157c:	4b9e      	ldr	r3, [pc, #632]	; (80017f8 <UART_SetConfig+0x2fc>)
 800157e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001582:	f003 0303 	and.w	r3, r3, #3
 8001586:	2b03      	cmp	r3, #3
 8001588:	d816      	bhi.n	80015b8 <UART_SetConfig+0xbc>
 800158a:	a201      	add	r2, pc, #4	; (adr r2, 8001590 <UART_SetConfig+0x94>)
 800158c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001590:	080015a1 	.word	0x080015a1
 8001594:	080015ad 	.word	0x080015ad
 8001598:	080015a7 	.word	0x080015a7
 800159c:	080015b3 	.word	0x080015b3
 80015a0:	2301      	movs	r3, #1
 80015a2:	77fb      	strb	r3, [r7, #31]
 80015a4:	e151      	b.n	800184a <UART_SetConfig+0x34e>
 80015a6:	2302      	movs	r3, #2
 80015a8:	77fb      	strb	r3, [r7, #31]
 80015aa:	e14e      	b.n	800184a <UART_SetConfig+0x34e>
 80015ac:	2304      	movs	r3, #4
 80015ae:	77fb      	strb	r3, [r7, #31]
 80015b0:	e14b      	b.n	800184a <UART_SetConfig+0x34e>
 80015b2:	2308      	movs	r3, #8
 80015b4:	77fb      	strb	r3, [r7, #31]
 80015b6:	e148      	b.n	800184a <UART_SetConfig+0x34e>
 80015b8:	2310      	movs	r3, #16
 80015ba:	77fb      	strb	r3, [r7, #31]
 80015bc:	bf00      	nop
 80015be:	e144      	b.n	800184a <UART_SetConfig+0x34e>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a8d      	ldr	r2, [pc, #564]	; (80017fc <UART_SetConfig+0x300>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d134      	bne.n	8001634 <UART_SetConfig+0x138>
 80015ca:	4b8b      	ldr	r3, [pc, #556]	; (80017f8 <UART_SetConfig+0x2fc>)
 80015cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015d0:	f003 030c 	and.w	r3, r3, #12
 80015d4:	2b0c      	cmp	r3, #12
 80015d6:	d829      	bhi.n	800162c <UART_SetConfig+0x130>
 80015d8:	a201      	add	r2, pc, #4	; (adr r2, 80015e0 <UART_SetConfig+0xe4>)
 80015da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015de:	bf00      	nop
 80015e0:	08001615 	.word	0x08001615
 80015e4:	0800162d 	.word	0x0800162d
 80015e8:	0800162d 	.word	0x0800162d
 80015ec:	0800162d 	.word	0x0800162d
 80015f0:	08001621 	.word	0x08001621
 80015f4:	0800162d 	.word	0x0800162d
 80015f8:	0800162d 	.word	0x0800162d
 80015fc:	0800162d 	.word	0x0800162d
 8001600:	0800161b 	.word	0x0800161b
 8001604:	0800162d 	.word	0x0800162d
 8001608:	0800162d 	.word	0x0800162d
 800160c:	0800162d 	.word	0x0800162d
 8001610:	08001627 	.word	0x08001627
 8001614:	2300      	movs	r3, #0
 8001616:	77fb      	strb	r3, [r7, #31]
 8001618:	e117      	b.n	800184a <UART_SetConfig+0x34e>
 800161a:	2302      	movs	r3, #2
 800161c:	77fb      	strb	r3, [r7, #31]
 800161e:	e114      	b.n	800184a <UART_SetConfig+0x34e>
 8001620:	2304      	movs	r3, #4
 8001622:	77fb      	strb	r3, [r7, #31]
 8001624:	e111      	b.n	800184a <UART_SetConfig+0x34e>
 8001626:	2308      	movs	r3, #8
 8001628:	77fb      	strb	r3, [r7, #31]
 800162a:	e10e      	b.n	800184a <UART_SetConfig+0x34e>
 800162c:	2310      	movs	r3, #16
 800162e:	77fb      	strb	r3, [r7, #31]
 8001630:	bf00      	nop
 8001632:	e10a      	b.n	800184a <UART_SetConfig+0x34e>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a71      	ldr	r2, [pc, #452]	; (8001800 <UART_SetConfig+0x304>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d120      	bne.n	8001680 <UART_SetConfig+0x184>
 800163e:	4b6e      	ldr	r3, [pc, #440]	; (80017f8 <UART_SetConfig+0x2fc>)
 8001640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001644:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001648:	2b10      	cmp	r3, #16
 800164a:	d00f      	beq.n	800166c <UART_SetConfig+0x170>
 800164c:	2b10      	cmp	r3, #16
 800164e:	d802      	bhi.n	8001656 <UART_SetConfig+0x15a>
 8001650:	2b00      	cmp	r3, #0
 8001652:	d005      	beq.n	8001660 <UART_SetConfig+0x164>
 8001654:	e010      	b.n	8001678 <UART_SetConfig+0x17c>
 8001656:	2b20      	cmp	r3, #32
 8001658:	d005      	beq.n	8001666 <UART_SetConfig+0x16a>
 800165a:	2b30      	cmp	r3, #48	; 0x30
 800165c:	d009      	beq.n	8001672 <UART_SetConfig+0x176>
 800165e:	e00b      	b.n	8001678 <UART_SetConfig+0x17c>
 8001660:	2300      	movs	r3, #0
 8001662:	77fb      	strb	r3, [r7, #31]
 8001664:	e0f1      	b.n	800184a <UART_SetConfig+0x34e>
 8001666:	2302      	movs	r3, #2
 8001668:	77fb      	strb	r3, [r7, #31]
 800166a:	e0ee      	b.n	800184a <UART_SetConfig+0x34e>
 800166c:	2304      	movs	r3, #4
 800166e:	77fb      	strb	r3, [r7, #31]
 8001670:	e0eb      	b.n	800184a <UART_SetConfig+0x34e>
 8001672:	2308      	movs	r3, #8
 8001674:	77fb      	strb	r3, [r7, #31]
 8001676:	e0e8      	b.n	800184a <UART_SetConfig+0x34e>
 8001678:	2310      	movs	r3, #16
 800167a:	77fb      	strb	r3, [r7, #31]
 800167c:	bf00      	nop
 800167e:	e0e4      	b.n	800184a <UART_SetConfig+0x34e>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a5f      	ldr	r2, [pc, #380]	; (8001804 <UART_SetConfig+0x308>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d120      	bne.n	80016cc <UART_SetConfig+0x1d0>
 800168a:	4b5b      	ldr	r3, [pc, #364]	; (80017f8 <UART_SetConfig+0x2fc>)
 800168c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001690:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001694:	2b40      	cmp	r3, #64	; 0x40
 8001696:	d00f      	beq.n	80016b8 <UART_SetConfig+0x1bc>
 8001698:	2b40      	cmp	r3, #64	; 0x40
 800169a:	d802      	bhi.n	80016a2 <UART_SetConfig+0x1a6>
 800169c:	2b00      	cmp	r3, #0
 800169e:	d005      	beq.n	80016ac <UART_SetConfig+0x1b0>
 80016a0:	e010      	b.n	80016c4 <UART_SetConfig+0x1c8>
 80016a2:	2b80      	cmp	r3, #128	; 0x80
 80016a4:	d005      	beq.n	80016b2 <UART_SetConfig+0x1b6>
 80016a6:	2bc0      	cmp	r3, #192	; 0xc0
 80016a8:	d009      	beq.n	80016be <UART_SetConfig+0x1c2>
 80016aa:	e00b      	b.n	80016c4 <UART_SetConfig+0x1c8>
 80016ac:	2300      	movs	r3, #0
 80016ae:	77fb      	strb	r3, [r7, #31]
 80016b0:	e0cb      	b.n	800184a <UART_SetConfig+0x34e>
 80016b2:	2302      	movs	r3, #2
 80016b4:	77fb      	strb	r3, [r7, #31]
 80016b6:	e0c8      	b.n	800184a <UART_SetConfig+0x34e>
 80016b8:	2304      	movs	r3, #4
 80016ba:	77fb      	strb	r3, [r7, #31]
 80016bc:	e0c5      	b.n	800184a <UART_SetConfig+0x34e>
 80016be:	2308      	movs	r3, #8
 80016c0:	77fb      	strb	r3, [r7, #31]
 80016c2:	e0c2      	b.n	800184a <UART_SetConfig+0x34e>
 80016c4:	2310      	movs	r3, #16
 80016c6:	77fb      	strb	r3, [r7, #31]
 80016c8:	bf00      	nop
 80016ca:	e0be      	b.n	800184a <UART_SetConfig+0x34e>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a4d      	ldr	r2, [pc, #308]	; (8001808 <UART_SetConfig+0x30c>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d124      	bne.n	8001720 <UART_SetConfig+0x224>
 80016d6:	4b48      	ldr	r3, [pc, #288]	; (80017f8 <UART_SetConfig+0x2fc>)
 80016d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016e4:	d012      	beq.n	800170c <UART_SetConfig+0x210>
 80016e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016ea:	d802      	bhi.n	80016f2 <UART_SetConfig+0x1f6>
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d007      	beq.n	8001700 <UART_SetConfig+0x204>
 80016f0:	e012      	b.n	8001718 <UART_SetConfig+0x21c>
 80016f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016f6:	d006      	beq.n	8001706 <UART_SetConfig+0x20a>
 80016f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80016fc:	d009      	beq.n	8001712 <UART_SetConfig+0x216>
 80016fe:	e00b      	b.n	8001718 <UART_SetConfig+0x21c>
 8001700:	2300      	movs	r3, #0
 8001702:	77fb      	strb	r3, [r7, #31]
 8001704:	e0a1      	b.n	800184a <UART_SetConfig+0x34e>
 8001706:	2302      	movs	r3, #2
 8001708:	77fb      	strb	r3, [r7, #31]
 800170a:	e09e      	b.n	800184a <UART_SetConfig+0x34e>
 800170c:	2304      	movs	r3, #4
 800170e:	77fb      	strb	r3, [r7, #31]
 8001710:	e09b      	b.n	800184a <UART_SetConfig+0x34e>
 8001712:	2308      	movs	r3, #8
 8001714:	77fb      	strb	r3, [r7, #31]
 8001716:	e098      	b.n	800184a <UART_SetConfig+0x34e>
 8001718:	2310      	movs	r3, #16
 800171a:	77fb      	strb	r3, [r7, #31]
 800171c:	bf00      	nop
 800171e:	e094      	b.n	800184a <UART_SetConfig+0x34e>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a39      	ldr	r2, [pc, #228]	; (800180c <UART_SetConfig+0x310>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d124      	bne.n	8001774 <UART_SetConfig+0x278>
 800172a:	4b33      	ldr	r3, [pc, #204]	; (80017f8 <UART_SetConfig+0x2fc>)
 800172c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001730:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001738:	d012      	beq.n	8001760 <UART_SetConfig+0x264>
 800173a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800173e:	d802      	bhi.n	8001746 <UART_SetConfig+0x24a>
 8001740:	2b00      	cmp	r3, #0
 8001742:	d007      	beq.n	8001754 <UART_SetConfig+0x258>
 8001744:	e012      	b.n	800176c <UART_SetConfig+0x270>
 8001746:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800174a:	d006      	beq.n	800175a <UART_SetConfig+0x25e>
 800174c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001750:	d009      	beq.n	8001766 <UART_SetConfig+0x26a>
 8001752:	e00b      	b.n	800176c <UART_SetConfig+0x270>
 8001754:	2301      	movs	r3, #1
 8001756:	77fb      	strb	r3, [r7, #31]
 8001758:	e077      	b.n	800184a <UART_SetConfig+0x34e>
 800175a:	2302      	movs	r3, #2
 800175c:	77fb      	strb	r3, [r7, #31]
 800175e:	e074      	b.n	800184a <UART_SetConfig+0x34e>
 8001760:	2304      	movs	r3, #4
 8001762:	77fb      	strb	r3, [r7, #31]
 8001764:	e071      	b.n	800184a <UART_SetConfig+0x34e>
 8001766:	2308      	movs	r3, #8
 8001768:	77fb      	strb	r3, [r7, #31]
 800176a:	e06e      	b.n	800184a <UART_SetConfig+0x34e>
 800176c:	2310      	movs	r3, #16
 800176e:	77fb      	strb	r3, [r7, #31]
 8001770:	bf00      	nop
 8001772:	e06a      	b.n	800184a <UART_SetConfig+0x34e>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a25      	ldr	r2, [pc, #148]	; (8001810 <UART_SetConfig+0x314>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d124      	bne.n	80017c8 <UART_SetConfig+0x2cc>
 800177e:	4b1e      	ldr	r3, [pc, #120]	; (80017f8 <UART_SetConfig+0x2fc>)
 8001780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001784:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800178c:	d012      	beq.n	80017b4 <UART_SetConfig+0x2b8>
 800178e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001792:	d802      	bhi.n	800179a <UART_SetConfig+0x29e>
 8001794:	2b00      	cmp	r3, #0
 8001796:	d007      	beq.n	80017a8 <UART_SetConfig+0x2ac>
 8001798:	e012      	b.n	80017c0 <UART_SetConfig+0x2c4>
 800179a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800179e:	d006      	beq.n	80017ae <UART_SetConfig+0x2b2>
 80017a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80017a4:	d009      	beq.n	80017ba <UART_SetConfig+0x2be>
 80017a6:	e00b      	b.n	80017c0 <UART_SetConfig+0x2c4>
 80017a8:	2300      	movs	r3, #0
 80017aa:	77fb      	strb	r3, [r7, #31]
 80017ac:	e04d      	b.n	800184a <UART_SetConfig+0x34e>
 80017ae:	2302      	movs	r3, #2
 80017b0:	77fb      	strb	r3, [r7, #31]
 80017b2:	e04a      	b.n	800184a <UART_SetConfig+0x34e>
 80017b4:	2304      	movs	r3, #4
 80017b6:	77fb      	strb	r3, [r7, #31]
 80017b8:	e047      	b.n	800184a <UART_SetConfig+0x34e>
 80017ba:	2308      	movs	r3, #8
 80017bc:	77fb      	strb	r3, [r7, #31]
 80017be:	e044      	b.n	800184a <UART_SetConfig+0x34e>
 80017c0:	2310      	movs	r3, #16
 80017c2:	77fb      	strb	r3, [r7, #31]
 80017c4:	bf00      	nop
 80017c6:	e040      	b.n	800184a <UART_SetConfig+0x34e>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a11      	ldr	r2, [pc, #68]	; (8001814 <UART_SetConfig+0x318>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d139      	bne.n	8001846 <UART_SetConfig+0x34a>
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <UART_SetConfig+0x2fc>)
 80017d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017e0:	d027      	beq.n	8001832 <UART_SetConfig+0x336>
 80017e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017e6:	d817      	bhi.n	8001818 <UART_SetConfig+0x31c>
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d01c      	beq.n	8001826 <UART_SetConfig+0x32a>
 80017ec:	e027      	b.n	800183e <UART_SetConfig+0x342>
 80017ee:	bf00      	nop
 80017f0:	efff69f3 	.word	0xefff69f3
 80017f4:	40011000 	.word	0x40011000
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40004400 	.word	0x40004400
 8001800:	40004800 	.word	0x40004800
 8001804:	40004c00 	.word	0x40004c00
 8001808:	40005000 	.word	0x40005000
 800180c:	40011400 	.word	0x40011400
 8001810:	40007800 	.word	0x40007800
 8001814:	40007c00 	.word	0x40007c00
 8001818:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800181c:	d006      	beq.n	800182c <UART_SetConfig+0x330>
 800181e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001822:	d009      	beq.n	8001838 <UART_SetConfig+0x33c>
 8001824:	e00b      	b.n	800183e <UART_SetConfig+0x342>
 8001826:	2300      	movs	r3, #0
 8001828:	77fb      	strb	r3, [r7, #31]
 800182a:	e00e      	b.n	800184a <UART_SetConfig+0x34e>
 800182c:	2302      	movs	r3, #2
 800182e:	77fb      	strb	r3, [r7, #31]
 8001830:	e00b      	b.n	800184a <UART_SetConfig+0x34e>
 8001832:	2304      	movs	r3, #4
 8001834:	77fb      	strb	r3, [r7, #31]
 8001836:	e008      	b.n	800184a <UART_SetConfig+0x34e>
 8001838:	2308      	movs	r3, #8
 800183a:	77fb      	strb	r3, [r7, #31]
 800183c:	e005      	b.n	800184a <UART_SetConfig+0x34e>
 800183e:	2310      	movs	r3, #16
 8001840:	77fb      	strb	r3, [r7, #31]
 8001842:	bf00      	nop
 8001844:	e001      	b.n	800184a <UART_SetConfig+0x34e>
 8001846:	2310      	movs	r3, #16
 8001848:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001852:	d17f      	bne.n	8001954 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8001854:	7ffb      	ldrb	r3, [r7, #31]
 8001856:	2b08      	cmp	r3, #8
 8001858:	d85c      	bhi.n	8001914 <UART_SetConfig+0x418>
 800185a:	a201      	add	r2, pc, #4	; (adr r2, 8001860 <UART_SetConfig+0x364>)
 800185c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001860:	08001885 	.word	0x08001885
 8001864:	080018a5 	.word	0x080018a5
 8001868:	080018c5 	.word	0x080018c5
 800186c:	08001915 	.word	0x08001915
 8001870:	080018dd 	.word	0x080018dd
 8001874:	08001915 	.word	0x08001915
 8001878:	08001915 	.word	0x08001915
 800187c:	08001915 	.word	0x08001915
 8001880:	080018fd 	.word	0x080018fd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001884:	f7ff fd32 	bl	80012ec <HAL_RCC_GetPCLK1Freq>
 8001888:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	005a      	lsls	r2, r3, #1
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	085b      	lsrs	r3, r3, #1
 8001894:	441a      	add	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	fbb2 f3f3 	udiv	r3, r2, r3
 800189e:	b29b      	uxth	r3, r3
 80018a0:	61bb      	str	r3, [r7, #24]
        break;
 80018a2:	e03a      	b.n	800191a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80018a4:	f7ff fd36 	bl	8001314 <HAL_RCC_GetPCLK2Freq>
 80018a8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	005a      	lsls	r2, r3, #1
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	085b      	lsrs	r3, r3, #1
 80018b4:	441a      	add	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80018be:	b29b      	uxth	r3, r3
 80018c0:	61bb      	str	r3, [r7, #24]
        break;
 80018c2:	e02a      	b.n	800191a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	085a      	lsrs	r2, r3, #1
 80018ca:	4b5f      	ldr	r3, [pc, #380]	; (8001a48 <UART_SetConfig+0x54c>)
 80018cc:	4413      	add	r3, r2
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	6852      	ldr	r2, [r2, #4]
 80018d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	61bb      	str	r3, [r7, #24]
        break;
 80018da:	e01e      	b.n	800191a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80018dc:	f7ff fc22 	bl	8001124 <HAL_RCC_GetSysClockFreq>
 80018e0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	005a      	lsls	r2, r3, #1
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	085b      	lsrs	r3, r3, #1
 80018ec:	441a      	add	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	61bb      	str	r3, [r7, #24]
        break;
 80018fa:	e00e      	b.n	800191a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	085b      	lsrs	r3, r3, #1
 8001902:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	fbb2 f3f3 	udiv	r3, r2, r3
 800190e:	b29b      	uxth	r3, r3
 8001910:	61bb      	str	r3, [r7, #24]
        break;
 8001912:	e002      	b.n	800191a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	75fb      	strb	r3, [r7, #23]
        break;
 8001918:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	2b0f      	cmp	r3, #15
 800191e:	d916      	bls.n	800194e <UART_SetConfig+0x452>
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001926:	d212      	bcs.n	800194e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	b29b      	uxth	r3, r3
 800192c:	f023 030f 	bic.w	r3, r3, #15
 8001930:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	085b      	lsrs	r3, r3, #1
 8001936:	b29b      	uxth	r3, r3
 8001938:	f003 0307 	and.w	r3, r3, #7
 800193c:	b29a      	uxth	r2, r3
 800193e:	897b      	ldrh	r3, [r7, #10]
 8001940:	4313      	orrs	r3, r2
 8001942:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	897a      	ldrh	r2, [r7, #10]
 800194a:	60da      	str	r2, [r3, #12]
 800194c:	e070      	b.n	8001a30 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	75fb      	strb	r3, [r7, #23]
 8001952:	e06d      	b.n	8001a30 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8001954:	7ffb      	ldrb	r3, [r7, #31]
 8001956:	2b08      	cmp	r3, #8
 8001958:	d859      	bhi.n	8001a0e <UART_SetConfig+0x512>
 800195a:	a201      	add	r2, pc, #4	; (adr r2, 8001960 <UART_SetConfig+0x464>)
 800195c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001960:	08001985 	.word	0x08001985
 8001964:	080019a3 	.word	0x080019a3
 8001968:	080019c1 	.word	0x080019c1
 800196c:	08001a0f 	.word	0x08001a0f
 8001970:	080019d9 	.word	0x080019d9
 8001974:	08001a0f 	.word	0x08001a0f
 8001978:	08001a0f 	.word	0x08001a0f
 800197c:	08001a0f 	.word	0x08001a0f
 8001980:	080019f7 	.word	0x080019f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001984:	f7ff fcb2 	bl	80012ec <HAL_RCC_GetPCLK1Freq>
 8001988:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	085a      	lsrs	r2, r3, #1
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	441a      	add	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	fbb2 f3f3 	udiv	r3, r2, r3
 800199c:	b29b      	uxth	r3, r3
 800199e:	61bb      	str	r3, [r7, #24]
        break;
 80019a0:	e038      	b.n	8001a14 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80019a2:	f7ff fcb7 	bl	8001314 <HAL_RCC_GetPCLK2Freq>
 80019a6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	085a      	lsrs	r2, r3, #1
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	441a      	add	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	61bb      	str	r3, [r7, #24]
        break;
 80019be:	e029      	b.n	8001a14 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	085a      	lsrs	r2, r3, #1
 80019c6:	4b21      	ldr	r3, [pc, #132]	; (8001a4c <UART_SetConfig+0x550>)
 80019c8:	4413      	add	r3, r2
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	6852      	ldr	r2, [r2, #4]
 80019ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	61bb      	str	r3, [r7, #24]
        break;
 80019d6:	e01d      	b.n	8001a14 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80019d8:	f7ff fba4 	bl	8001124 <HAL_RCC_GetSysClockFreq>
 80019dc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	085a      	lsrs	r2, r3, #1
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	441a      	add	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	61bb      	str	r3, [r7, #24]
        break;
 80019f4:	e00e      	b.n	8001a14 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	085b      	lsrs	r3, r3, #1
 80019fc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	61bb      	str	r3, [r7, #24]
        break;
 8001a0c:	e002      	b.n	8001a14 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	75fb      	strb	r3, [r7, #23]
        break;
 8001a12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	2b0f      	cmp	r3, #15
 8001a18:	d908      	bls.n	8001a2c <UART_SetConfig+0x530>
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a20:	d204      	bcs.n	8001a2c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	e001      	b.n	8001a30 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8001a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3720      	adds	r7, #32
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	01e84800 	.word	0x01e84800
 8001a4c:	00f42400 	.word	0x00f42400

08001a50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d00a      	beq.n	8001a7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00a      	beq.n	8001a9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d00a      	beq.n	8001abe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	f003 0308 	and.w	r3, r3, #8
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00a      	beq.n	8001ae0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	430a      	orrs	r2, r1
 8001ade:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	f003 0310 	and.w	r3, r3, #16
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d00a      	beq.n	8001b02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	430a      	orrs	r2, r1
 8001b00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b06:	f003 0320 	and.w	r3, r3, #32
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00a      	beq.n	8001b24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	430a      	orrs	r2, r1
 8001b22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d01a      	beq.n	8001b66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b4e:	d10a      	bne.n	8001b66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00a      	beq.n	8001b88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	430a      	orrs	r2, r1
 8001b86:	605a      	str	r2, [r3, #4]
  }
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af02      	add	r7, sp, #8
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8001ba2:	f7fe fff7 	bl	8000b94 <HAL_GetTick>
 8001ba6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	2b08      	cmp	r3, #8
 8001bb4:	d10e      	bne.n	8001bd4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001bb6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f000 f82a 	bl	8001c1e <UART_WaitOnFlagUntilTimeout>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e020      	b.n	8001c16 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0304 	and.w	r3, r3, #4
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	d10e      	bne.n	8001c00 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001be2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f814 	bl	8001c1e <UART_WaitOnFlagUntilTimeout>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e00a      	b.n	8001c16 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2220      	movs	r2, #32
 8001c04:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2220      	movs	r2, #32
 8001c0a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b084      	sub	sp, #16
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	60f8      	str	r0, [r7, #12]
 8001c26:	60b9      	str	r1, [r7, #8]
 8001c28:	603b      	str	r3, [r7, #0]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c2e:	e05d      	b.n	8001cec <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c36:	d059      	beq.n	8001cec <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c38:	f7fe ffac 	bl	8000b94 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d302      	bcc.n	8001c4e <UART_WaitOnFlagUntilTimeout+0x30>
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d11b      	bne.n	8001c86 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001c5c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0201 	bic.w	r2, r2, #1
 8001c6c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2220      	movs	r2, #32
 8001c72:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2220      	movs	r2, #32
 8001c78:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e042      	b.n	8001d0c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d02b      	beq.n	8001cec <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ca2:	d123      	bne.n	8001cec <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cac:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001cbc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0201 	bic.w	r2, r2, #1
 8001ccc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2220      	movs	r2, #32
 8001cd2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2220      	movs	r2, #32
 8001cde:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e00f      	b.n	8001d0c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	69da      	ldr	r2, [r3, #28]
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	bf0c      	ite	eq
 8001cfc:	2301      	moveq	r3, #1
 8001cfe:	2300      	movne	r3, #0
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	461a      	mov	r2, r3
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d092      	beq.n	8001c30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <__errno>:
 8001d14:	4b01      	ldr	r3, [pc, #4]	; (8001d1c <__errno+0x8>)
 8001d16:	6818      	ldr	r0, [r3, #0]
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	200000cc 	.word	0x200000cc

08001d20 <__libc_init_array>:
 8001d20:	b570      	push	{r4, r5, r6, lr}
 8001d22:	4e0d      	ldr	r6, [pc, #52]	; (8001d58 <__libc_init_array+0x38>)
 8001d24:	4c0d      	ldr	r4, [pc, #52]	; (8001d5c <__libc_init_array+0x3c>)
 8001d26:	1ba4      	subs	r4, r4, r6
 8001d28:	10a4      	asrs	r4, r4, #2
 8001d2a:	2500      	movs	r5, #0
 8001d2c:	42a5      	cmp	r5, r4
 8001d2e:	d109      	bne.n	8001d44 <__libc_init_array+0x24>
 8001d30:	4e0b      	ldr	r6, [pc, #44]	; (8001d60 <__libc_init_array+0x40>)
 8001d32:	4c0c      	ldr	r4, [pc, #48]	; (8001d64 <__libc_init_array+0x44>)
 8001d34:	f002 f972 	bl	800401c <_init>
 8001d38:	1ba4      	subs	r4, r4, r6
 8001d3a:	10a4      	asrs	r4, r4, #2
 8001d3c:	2500      	movs	r5, #0
 8001d3e:	42a5      	cmp	r5, r4
 8001d40:	d105      	bne.n	8001d4e <__libc_init_array+0x2e>
 8001d42:	bd70      	pop	{r4, r5, r6, pc}
 8001d44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d48:	4798      	blx	r3
 8001d4a:	3501      	adds	r5, #1
 8001d4c:	e7ee      	b.n	8001d2c <__libc_init_array+0xc>
 8001d4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d52:	4798      	blx	r3
 8001d54:	3501      	adds	r5, #1
 8001d56:	e7f2      	b.n	8001d3e <__libc_init_array+0x1e>
 8001d58:	08004598 	.word	0x08004598
 8001d5c:	08004598 	.word	0x08004598
 8001d60:	08004598 	.word	0x08004598
 8001d64:	0800459c 	.word	0x0800459c

08001d68 <memset>:
 8001d68:	4402      	add	r2, r0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d100      	bne.n	8001d72 <memset+0xa>
 8001d70:	4770      	bx	lr
 8001d72:	f803 1b01 	strb.w	r1, [r3], #1
 8001d76:	e7f9      	b.n	8001d6c <memset+0x4>

08001d78 <__cvt>:
 8001d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d7a:	ed2d 8b02 	vpush	{d8}
 8001d7e:	eeb0 8b40 	vmov.f64	d8, d0
 8001d82:	b085      	sub	sp, #20
 8001d84:	4617      	mov	r7, r2
 8001d86:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8001d88:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8001d8a:	ee18 2a90 	vmov	r2, s17
 8001d8e:	f025 0520 	bic.w	r5, r5, #32
 8001d92:	2a00      	cmp	r2, #0
 8001d94:	bfb6      	itet	lt
 8001d96:	222d      	movlt	r2, #45	; 0x2d
 8001d98:	2200      	movge	r2, #0
 8001d9a:	eeb1 8b40 	vneglt.f64	d8, d0
 8001d9e:	2d46      	cmp	r5, #70	; 0x46
 8001da0:	460c      	mov	r4, r1
 8001da2:	701a      	strb	r2, [r3, #0]
 8001da4:	d004      	beq.n	8001db0 <__cvt+0x38>
 8001da6:	2d45      	cmp	r5, #69	; 0x45
 8001da8:	d100      	bne.n	8001dac <__cvt+0x34>
 8001daa:	3401      	adds	r4, #1
 8001dac:	2102      	movs	r1, #2
 8001dae:	e000      	b.n	8001db2 <__cvt+0x3a>
 8001db0:	2103      	movs	r1, #3
 8001db2:	ab03      	add	r3, sp, #12
 8001db4:	9301      	str	r3, [sp, #4]
 8001db6:	ab02      	add	r3, sp, #8
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	4622      	mov	r2, r4
 8001dbc:	4633      	mov	r3, r6
 8001dbe:	eeb0 0b48 	vmov.f64	d0, d8
 8001dc2:	f000 fcc1 	bl	8002748 <_dtoa_r>
 8001dc6:	2d47      	cmp	r5, #71	; 0x47
 8001dc8:	d101      	bne.n	8001dce <__cvt+0x56>
 8001dca:	07fb      	lsls	r3, r7, #31
 8001dcc:	d51e      	bpl.n	8001e0c <__cvt+0x94>
 8001dce:	2d46      	cmp	r5, #70	; 0x46
 8001dd0:	eb00 0304 	add.w	r3, r0, r4
 8001dd4:	d10c      	bne.n	8001df0 <__cvt+0x78>
 8001dd6:	7802      	ldrb	r2, [r0, #0]
 8001dd8:	2a30      	cmp	r2, #48	; 0x30
 8001dda:	d107      	bne.n	8001dec <__cvt+0x74>
 8001ddc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8001de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de4:	bf1c      	itt	ne
 8001de6:	f1c4 0401 	rsbne	r4, r4, #1
 8001dea:	6034      	strne	r4, [r6, #0]
 8001dec:	6832      	ldr	r2, [r6, #0]
 8001dee:	4413      	add	r3, r2
 8001df0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8001df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df8:	d007      	beq.n	8001e0a <__cvt+0x92>
 8001dfa:	2130      	movs	r1, #48	; 0x30
 8001dfc:	9a03      	ldr	r2, [sp, #12]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d204      	bcs.n	8001e0c <__cvt+0x94>
 8001e02:	1c54      	adds	r4, r2, #1
 8001e04:	9403      	str	r4, [sp, #12]
 8001e06:	7011      	strb	r1, [r2, #0]
 8001e08:	e7f8      	b.n	8001dfc <__cvt+0x84>
 8001e0a:	9303      	str	r3, [sp, #12]
 8001e0c:	9b03      	ldr	r3, [sp, #12]
 8001e0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001e10:	1a1b      	subs	r3, r3, r0
 8001e12:	6013      	str	r3, [r2, #0]
 8001e14:	b005      	add	sp, #20
 8001e16:	ecbd 8b02 	vpop	{d8}
 8001e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e1c <__exponent>:
 8001e1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001e1e:	2900      	cmp	r1, #0
 8001e20:	4604      	mov	r4, r0
 8001e22:	bfba      	itte	lt
 8001e24:	4249      	neglt	r1, r1
 8001e26:	232d      	movlt	r3, #45	; 0x2d
 8001e28:	232b      	movge	r3, #43	; 0x2b
 8001e2a:	2909      	cmp	r1, #9
 8001e2c:	f804 2b02 	strb.w	r2, [r4], #2
 8001e30:	7043      	strb	r3, [r0, #1]
 8001e32:	dd20      	ble.n	8001e76 <__exponent+0x5a>
 8001e34:	f10d 0307 	add.w	r3, sp, #7
 8001e38:	461f      	mov	r7, r3
 8001e3a:	260a      	movs	r6, #10
 8001e3c:	fb91 f5f6 	sdiv	r5, r1, r6
 8001e40:	fb06 1115 	mls	r1, r6, r5, r1
 8001e44:	3130      	adds	r1, #48	; 0x30
 8001e46:	2d09      	cmp	r5, #9
 8001e48:	f803 1c01 	strb.w	r1, [r3, #-1]
 8001e4c:	f103 32ff 	add.w	r2, r3, #4294967295
 8001e50:	4629      	mov	r1, r5
 8001e52:	dc09      	bgt.n	8001e68 <__exponent+0x4c>
 8001e54:	3130      	adds	r1, #48	; 0x30
 8001e56:	3b02      	subs	r3, #2
 8001e58:	f802 1c01 	strb.w	r1, [r2, #-1]
 8001e5c:	42bb      	cmp	r3, r7
 8001e5e:	4622      	mov	r2, r4
 8001e60:	d304      	bcc.n	8001e6c <__exponent+0x50>
 8001e62:	1a10      	subs	r0, r2, r0
 8001e64:	b003      	add	sp, #12
 8001e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e68:	4613      	mov	r3, r2
 8001e6a:	e7e7      	b.n	8001e3c <__exponent+0x20>
 8001e6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001e70:	f804 2b01 	strb.w	r2, [r4], #1
 8001e74:	e7f2      	b.n	8001e5c <__exponent+0x40>
 8001e76:	2330      	movs	r3, #48	; 0x30
 8001e78:	4419      	add	r1, r3
 8001e7a:	7083      	strb	r3, [r0, #2]
 8001e7c:	1d02      	adds	r2, r0, #4
 8001e7e:	70c1      	strb	r1, [r0, #3]
 8001e80:	e7ef      	b.n	8001e62 <__exponent+0x46>
 8001e82:	0000      	movs	r0, r0
 8001e84:	0000      	movs	r0, r0
	...

08001e88 <_printf_float>:
 8001e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e8c:	b08d      	sub	sp, #52	; 0x34
 8001e8e:	460c      	mov	r4, r1
 8001e90:	4616      	mov	r6, r2
 8001e92:	461f      	mov	r7, r3
 8001e94:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8001e98:	4605      	mov	r5, r0
 8001e9a:	f001 f9a1 	bl	80031e0 <_localeconv_r>
 8001e9e:	f8d0 b000 	ldr.w	fp, [r0]
 8001ea2:	4658      	mov	r0, fp
 8001ea4:	f7fe f9cc 	bl	8000240 <strlen>
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	930a      	str	r3, [sp, #40]	; 0x28
 8001eac:	f8d8 3000 	ldr.w	r3, [r8]
 8001eb0:	9005      	str	r0, [sp, #20]
 8001eb2:	3307      	adds	r3, #7
 8001eb4:	f023 0307 	bic.w	r3, r3, #7
 8001eb8:	f103 0108 	add.w	r1, r3, #8
 8001ebc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8001ec0:	6822      	ldr	r2, [r4, #0]
 8001ec2:	f8c8 1000 	str.w	r1, [r8]
 8001ec6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001eca:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8001ece:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8002158 <_printf_float+0x2d0>
 8001ed2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8001ed6:	eeb0 6bc0 	vabs.f64	d6, d0
 8001eda:	eeb4 6b47 	vcmp.f64	d6, d7
 8001ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee2:	dd24      	ble.n	8001f2e <_printf_float+0xa6>
 8001ee4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8001ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eec:	d502      	bpl.n	8001ef4 <_printf_float+0x6c>
 8001eee:	232d      	movs	r3, #45	; 0x2d
 8001ef0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001ef4:	499a      	ldr	r1, [pc, #616]	; (8002160 <_printf_float+0x2d8>)
 8001ef6:	4b9b      	ldr	r3, [pc, #620]	; (8002164 <_printf_float+0x2dc>)
 8001ef8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8001efc:	bf8c      	ite	hi
 8001efe:	4688      	movhi	r8, r1
 8001f00:	4698      	movls	r8, r3
 8001f02:	f022 0204 	bic.w	r2, r2, #4
 8001f06:	2303      	movs	r3, #3
 8001f08:	6123      	str	r3, [r4, #16]
 8001f0a:	6022      	str	r2, [r4, #0]
 8001f0c:	f04f 0a00 	mov.w	sl, #0
 8001f10:	9700      	str	r7, [sp, #0]
 8001f12:	4633      	mov	r3, r6
 8001f14:	aa0b      	add	r2, sp, #44	; 0x2c
 8001f16:	4621      	mov	r1, r4
 8001f18:	4628      	mov	r0, r5
 8001f1a:	f000 f9e1 	bl	80022e0 <_printf_common>
 8001f1e:	3001      	adds	r0, #1
 8001f20:	f040 8089 	bne.w	8002036 <_printf_float+0x1ae>
 8001f24:	f04f 30ff 	mov.w	r0, #4294967295
 8001f28:	b00d      	add	sp, #52	; 0x34
 8001f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f2e:	eeb4 0b40 	vcmp.f64	d0, d0
 8001f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f36:	d702      	bvc.n	8001f3e <_printf_float+0xb6>
 8001f38:	498b      	ldr	r1, [pc, #556]	; (8002168 <_printf_float+0x2e0>)
 8001f3a:	4b8c      	ldr	r3, [pc, #560]	; (800216c <_printf_float+0x2e4>)
 8001f3c:	e7dc      	b.n	8001ef8 <_printf_float+0x70>
 8001f3e:	6861      	ldr	r1, [r4, #4]
 8001f40:	1c4b      	adds	r3, r1, #1
 8001f42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f46:	ab0a      	add	r3, sp, #40	; 0x28
 8001f48:	a809      	add	r0, sp, #36	; 0x24
 8001f4a:	d13b      	bne.n	8001fc4 <_printf_float+0x13c>
 8001f4c:	2106      	movs	r1, #6
 8001f4e:	6061      	str	r1, [r4, #4]
 8001f50:	f04f 0c00 	mov.w	ip, #0
 8001f54:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8001f58:	e9cd 0900 	strd	r0, r9, [sp]
 8001f5c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8001f60:	6022      	str	r2, [r4, #0]
 8001f62:	6861      	ldr	r1, [r4, #4]
 8001f64:	4628      	mov	r0, r5
 8001f66:	f7ff ff07 	bl	8001d78 <__cvt>
 8001f6a:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8001f6e:	2b47      	cmp	r3, #71	; 0x47
 8001f70:	4680      	mov	r8, r0
 8001f72:	d109      	bne.n	8001f88 <_printf_float+0x100>
 8001f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f76:	1cd8      	adds	r0, r3, #3
 8001f78:	db02      	blt.n	8001f80 <_printf_float+0xf8>
 8001f7a:	6862      	ldr	r2, [r4, #4]
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	dd47      	ble.n	8002010 <_printf_float+0x188>
 8001f80:	f1a9 0902 	sub.w	r9, r9, #2
 8001f84:	fa5f f989 	uxtb.w	r9, r9
 8001f88:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8001f8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001f8e:	d824      	bhi.n	8001fda <_printf_float+0x152>
 8001f90:	3901      	subs	r1, #1
 8001f92:	464a      	mov	r2, r9
 8001f94:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8001f98:	9109      	str	r1, [sp, #36]	; 0x24
 8001f9a:	f7ff ff3f 	bl	8001e1c <__exponent>
 8001f9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001fa0:	1813      	adds	r3, r2, r0
 8001fa2:	2a01      	cmp	r2, #1
 8001fa4:	4682      	mov	sl, r0
 8001fa6:	6123      	str	r3, [r4, #16]
 8001fa8:	dc02      	bgt.n	8001fb0 <_printf_float+0x128>
 8001faa:	6822      	ldr	r2, [r4, #0]
 8001fac:	07d1      	lsls	r1, r2, #31
 8001fae:	d501      	bpl.n	8001fb4 <_printf_float+0x12c>
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	6123      	str	r3, [r4, #16]
 8001fb4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0a9      	beq.n	8001f10 <_printf_float+0x88>
 8001fbc:	232d      	movs	r3, #45	; 0x2d
 8001fbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001fc2:	e7a5      	b.n	8001f10 <_printf_float+0x88>
 8001fc4:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8001fc8:	f000 8178 	beq.w	80022bc <_printf_float+0x434>
 8001fcc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8001fd0:	d1be      	bne.n	8001f50 <_printf_float+0xc8>
 8001fd2:	2900      	cmp	r1, #0
 8001fd4:	d1bc      	bne.n	8001f50 <_printf_float+0xc8>
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	e7b9      	b.n	8001f4e <_printf_float+0xc6>
 8001fda:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8001fde:	d119      	bne.n	8002014 <_printf_float+0x18c>
 8001fe0:	2900      	cmp	r1, #0
 8001fe2:	6863      	ldr	r3, [r4, #4]
 8001fe4:	dd0c      	ble.n	8002000 <_printf_float+0x178>
 8001fe6:	6121      	str	r1, [r4, #16]
 8001fe8:	b913      	cbnz	r3, 8001ff0 <_printf_float+0x168>
 8001fea:	6822      	ldr	r2, [r4, #0]
 8001fec:	07d2      	lsls	r2, r2, #31
 8001fee:	d502      	bpl.n	8001ff6 <_printf_float+0x16e>
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	440b      	add	r3, r1
 8001ff4:	6123      	str	r3, [r4, #16]
 8001ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ff8:	65a3      	str	r3, [r4, #88]	; 0x58
 8001ffa:	f04f 0a00 	mov.w	sl, #0
 8001ffe:	e7d9      	b.n	8001fb4 <_printf_float+0x12c>
 8002000:	b913      	cbnz	r3, 8002008 <_printf_float+0x180>
 8002002:	6822      	ldr	r2, [r4, #0]
 8002004:	07d0      	lsls	r0, r2, #31
 8002006:	d501      	bpl.n	800200c <_printf_float+0x184>
 8002008:	3302      	adds	r3, #2
 800200a:	e7f3      	b.n	8001ff4 <_printf_float+0x16c>
 800200c:	2301      	movs	r3, #1
 800200e:	e7f1      	b.n	8001ff4 <_printf_float+0x16c>
 8002010:	f04f 0967 	mov.w	r9, #103	; 0x67
 8002014:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8002018:	4293      	cmp	r3, r2
 800201a:	db05      	blt.n	8002028 <_printf_float+0x1a0>
 800201c:	6822      	ldr	r2, [r4, #0]
 800201e:	6123      	str	r3, [r4, #16]
 8002020:	07d1      	lsls	r1, r2, #31
 8002022:	d5e8      	bpl.n	8001ff6 <_printf_float+0x16e>
 8002024:	3301      	adds	r3, #1
 8002026:	e7e5      	b.n	8001ff4 <_printf_float+0x16c>
 8002028:	2b00      	cmp	r3, #0
 800202a:	bfd4      	ite	le
 800202c:	f1c3 0302 	rsble	r3, r3, #2
 8002030:	2301      	movgt	r3, #1
 8002032:	4413      	add	r3, r2
 8002034:	e7de      	b.n	8001ff4 <_printf_float+0x16c>
 8002036:	6823      	ldr	r3, [r4, #0]
 8002038:	055a      	lsls	r2, r3, #21
 800203a:	d407      	bmi.n	800204c <_printf_float+0x1c4>
 800203c:	6923      	ldr	r3, [r4, #16]
 800203e:	4642      	mov	r2, r8
 8002040:	4631      	mov	r1, r6
 8002042:	4628      	mov	r0, r5
 8002044:	47b8      	blx	r7
 8002046:	3001      	adds	r0, #1
 8002048:	d12a      	bne.n	80020a0 <_printf_float+0x218>
 800204a:	e76b      	b.n	8001f24 <_printf_float+0x9c>
 800204c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002050:	f240 80de 	bls.w	8002210 <_printf_float+0x388>
 8002054:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8002058:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800205c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002060:	d133      	bne.n	80020ca <_printf_float+0x242>
 8002062:	2301      	movs	r3, #1
 8002064:	4a42      	ldr	r2, [pc, #264]	; (8002170 <_printf_float+0x2e8>)
 8002066:	4631      	mov	r1, r6
 8002068:	4628      	mov	r0, r5
 800206a:	47b8      	blx	r7
 800206c:	3001      	adds	r0, #1
 800206e:	f43f af59 	beq.w	8001f24 <_printf_float+0x9c>
 8002072:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002076:	429a      	cmp	r2, r3
 8002078:	db02      	blt.n	8002080 <_printf_float+0x1f8>
 800207a:	6823      	ldr	r3, [r4, #0]
 800207c:	07d8      	lsls	r0, r3, #31
 800207e:	d50f      	bpl.n	80020a0 <_printf_float+0x218>
 8002080:	9b05      	ldr	r3, [sp, #20]
 8002082:	465a      	mov	r2, fp
 8002084:	4631      	mov	r1, r6
 8002086:	4628      	mov	r0, r5
 8002088:	47b8      	blx	r7
 800208a:	3001      	adds	r0, #1
 800208c:	f43f af4a 	beq.w	8001f24 <_printf_float+0x9c>
 8002090:	f04f 0800 	mov.w	r8, #0
 8002094:	f104 091a 	add.w	r9, r4, #26
 8002098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800209a:	3b01      	subs	r3, #1
 800209c:	4543      	cmp	r3, r8
 800209e:	dc09      	bgt.n	80020b4 <_printf_float+0x22c>
 80020a0:	6823      	ldr	r3, [r4, #0]
 80020a2:	079b      	lsls	r3, r3, #30
 80020a4:	f100 8105 	bmi.w	80022b2 <_printf_float+0x42a>
 80020a8:	68e0      	ldr	r0, [r4, #12]
 80020aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80020ac:	4298      	cmp	r0, r3
 80020ae:	bfb8      	it	lt
 80020b0:	4618      	movlt	r0, r3
 80020b2:	e739      	b.n	8001f28 <_printf_float+0xa0>
 80020b4:	2301      	movs	r3, #1
 80020b6:	464a      	mov	r2, r9
 80020b8:	4631      	mov	r1, r6
 80020ba:	4628      	mov	r0, r5
 80020bc:	47b8      	blx	r7
 80020be:	3001      	adds	r0, #1
 80020c0:	f43f af30 	beq.w	8001f24 <_printf_float+0x9c>
 80020c4:	f108 0801 	add.w	r8, r8, #1
 80020c8:	e7e6      	b.n	8002098 <_printf_float+0x210>
 80020ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	dc2b      	bgt.n	8002128 <_printf_float+0x2a0>
 80020d0:	2301      	movs	r3, #1
 80020d2:	4a27      	ldr	r2, [pc, #156]	; (8002170 <_printf_float+0x2e8>)
 80020d4:	4631      	mov	r1, r6
 80020d6:	4628      	mov	r0, r5
 80020d8:	47b8      	blx	r7
 80020da:	3001      	adds	r0, #1
 80020dc:	f43f af22 	beq.w	8001f24 <_printf_float+0x9c>
 80020e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020e2:	b923      	cbnz	r3, 80020ee <_printf_float+0x266>
 80020e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80020e6:	b913      	cbnz	r3, 80020ee <_printf_float+0x266>
 80020e8:	6823      	ldr	r3, [r4, #0]
 80020ea:	07d9      	lsls	r1, r3, #31
 80020ec:	d5d8      	bpl.n	80020a0 <_printf_float+0x218>
 80020ee:	9b05      	ldr	r3, [sp, #20]
 80020f0:	465a      	mov	r2, fp
 80020f2:	4631      	mov	r1, r6
 80020f4:	4628      	mov	r0, r5
 80020f6:	47b8      	blx	r7
 80020f8:	3001      	adds	r0, #1
 80020fa:	f43f af13 	beq.w	8001f24 <_printf_float+0x9c>
 80020fe:	f04f 0900 	mov.w	r9, #0
 8002102:	f104 0a1a 	add.w	sl, r4, #26
 8002106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002108:	425b      	negs	r3, r3
 800210a:	454b      	cmp	r3, r9
 800210c:	dc01      	bgt.n	8002112 <_printf_float+0x28a>
 800210e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002110:	e795      	b.n	800203e <_printf_float+0x1b6>
 8002112:	2301      	movs	r3, #1
 8002114:	4652      	mov	r2, sl
 8002116:	4631      	mov	r1, r6
 8002118:	4628      	mov	r0, r5
 800211a:	47b8      	blx	r7
 800211c:	3001      	adds	r0, #1
 800211e:	f43f af01 	beq.w	8001f24 <_printf_float+0x9c>
 8002122:	f109 0901 	add.w	r9, r9, #1
 8002126:	e7ee      	b.n	8002106 <_printf_float+0x27e>
 8002128:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800212a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800212c:	429a      	cmp	r2, r3
 800212e:	bfa8      	it	ge
 8002130:	461a      	movge	r2, r3
 8002132:	2a00      	cmp	r2, #0
 8002134:	4691      	mov	r9, r2
 8002136:	dd07      	ble.n	8002148 <_printf_float+0x2c0>
 8002138:	4613      	mov	r3, r2
 800213a:	4631      	mov	r1, r6
 800213c:	4642      	mov	r2, r8
 800213e:	4628      	mov	r0, r5
 8002140:	47b8      	blx	r7
 8002142:	3001      	adds	r0, #1
 8002144:	f43f aeee 	beq.w	8001f24 <_printf_float+0x9c>
 8002148:	f104 031a 	add.w	r3, r4, #26
 800214c:	f04f 0a00 	mov.w	sl, #0
 8002150:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002154:	9307      	str	r3, [sp, #28]
 8002156:	e017      	b.n	8002188 <_printf_float+0x300>
 8002158:	ffffffff 	.word	0xffffffff
 800215c:	7fefffff 	.word	0x7fefffff
 8002160:	080040c4 	.word	0x080040c4
 8002164:	080040c0 	.word	0x080040c0
 8002168:	080040cc 	.word	0x080040cc
 800216c:	080040c8 	.word	0x080040c8
 8002170:	080040d0 	.word	0x080040d0
 8002174:	2301      	movs	r3, #1
 8002176:	9a07      	ldr	r2, [sp, #28]
 8002178:	4631      	mov	r1, r6
 800217a:	4628      	mov	r0, r5
 800217c:	47b8      	blx	r7
 800217e:	3001      	adds	r0, #1
 8002180:	f43f aed0 	beq.w	8001f24 <_printf_float+0x9c>
 8002184:	f10a 0a01 	add.w	sl, sl, #1
 8002188:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800218a:	9306      	str	r3, [sp, #24]
 800218c:	eba3 0309 	sub.w	r3, r3, r9
 8002190:	4553      	cmp	r3, sl
 8002192:	dcef      	bgt.n	8002174 <_printf_float+0x2ec>
 8002194:	9b06      	ldr	r3, [sp, #24]
 8002196:	4498      	add	r8, r3
 8002198:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800219c:	429a      	cmp	r2, r3
 800219e:	db15      	blt.n	80021cc <_printf_float+0x344>
 80021a0:	6823      	ldr	r3, [r4, #0]
 80021a2:	07da      	lsls	r2, r3, #31
 80021a4:	d412      	bmi.n	80021cc <_printf_float+0x344>
 80021a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80021a8:	9a06      	ldr	r2, [sp, #24]
 80021aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80021ac:	1a9a      	subs	r2, r3, r2
 80021ae:	eba3 0a01 	sub.w	sl, r3, r1
 80021b2:	4592      	cmp	sl, r2
 80021b4:	bfa8      	it	ge
 80021b6:	4692      	movge	sl, r2
 80021b8:	f1ba 0f00 	cmp.w	sl, #0
 80021bc:	dc0e      	bgt.n	80021dc <_printf_float+0x354>
 80021be:	f04f 0800 	mov.w	r8, #0
 80021c2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80021c6:	f104 091a 	add.w	r9, r4, #26
 80021ca:	e019      	b.n	8002200 <_printf_float+0x378>
 80021cc:	9b05      	ldr	r3, [sp, #20]
 80021ce:	465a      	mov	r2, fp
 80021d0:	4631      	mov	r1, r6
 80021d2:	4628      	mov	r0, r5
 80021d4:	47b8      	blx	r7
 80021d6:	3001      	adds	r0, #1
 80021d8:	d1e5      	bne.n	80021a6 <_printf_float+0x31e>
 80021da:	e6a3      	b.n	8001f24 <_printf_float+0x9c>
 80021dc:	4653      	mov	r3, sl
 80021de:	4642      	mov	r2, r8
 80021e0:	4631      	mov	r1, r6
 80021e2:	4628      	mov	r0, r5
 80021e4:	47b8      	blx	r7
 80021e6:	3001      	adds	r0, #1
 80021e8:	d1e9      	bne.n	80021be <_printf_float+0x336>
 80021ea:	e69b      	b.n	8001f24 <_printf_float+0x9c>
 80021ec:	2301      	movs	r3, #1
 80021ee:	464a      	mov	r2, r9
 80021f0:	4631      	mov	r1, r6
 80021f2:	4628      	mov	r0, r5
 80021f4:	47b8      	blx	r7
 80021f6:	3001      	adds	r0, #1
 80021f8:	f43f ae94 	beq.w	8001f24 <_printf_float+0x9c>
 80021fc:	f108 0801 	add.w	r8, r8, #1
 8002200:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002204:	1a9b      	subs	r3, r3, r2
 8002206:	eba3 030a 	sub.w	r3, r3, sl
 800220a:	4543      	cmp	r3, r8
 800220c:	dcee      	bgt.n	80021ec <_printf_float+0x364>
 800220e:	e747      	b.n	80020a0 <_printf_float+0x218>
 8002210:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002212:	2a01      	cmp	r2, #1
 8002214:	dc01      	bgt.n	800221a <_printf_float+0x392>
 8002216:	07db      	lsls	r3, r3, #31
 8002218:	d539      	bpl.n	800228e <_printf_float+0x406>
 800221a:	2301      	movs	r3, #1
 800221c:	4642      	mov	r2, r8
 800221e:	4631      	mov	r1, r6
 8002220:	4628      	mov	r0, r5
 8002222:	47b8      	blx	r7
 8002224:	3001      	adds	r0, #1
 8002226:	f43f ae7d 	beq.w	8001f24 <_printf_float+0x9c>
 800222a:	9b05      	ldr	r3, [sp, #20]
 800222c:	465a      	mov	r2, fp
 800222e:	4631      	mov	r1, r6
 8002230:	4628      	mov	r0, r5
 8002232:	47b8      	blx	r7
 8002234:	3001      	adds	r0, #1
 8002236:	f108 0801 	add.w	r8, r8, #1
 800223a:	f43f ae73 	beq.w	8001f24 <_printf_float+0x9c>
 800223e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8002242:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002244:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8002248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800224c:	f103 33ff 	add.w	r3, r3, #4294967295
 8002250:	d018      	beq.n	8002284 <_printf_float+0x3fc>
 8002252:	4642      	mov	r2, r8
 8002254:	4631      	mov	r1, r6
 8002256:	4628      	mov	r0, r5
 8002258:	47b8      	blx	r7
 800225a:	3001      	adds	r0, #1
 800225c:	d10e      	bne.n	800227c <_printf_float+0x3f4>
 800225e:	e661      	b.n	8001f24 <_printf_float+0x9c>
 8002260:	2301      	movs	r3, #1
 8002262:	464a      	mov	r2, r9
 8002264:	4631      	mov	r1, r6
 8002266:	4628      	mov	r0, r5
 8002268:	47b8      	blx	r7
 800226a:	3001      	adds	r0, #1
 800226c:	f43f ae5a 	beq.w	8001f24 <_printf_float+0x9c>
 8002270:	f108 0801 	add.w	r8, r8, #1
 8002274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002276:	3b01      	subs	r3, #1
 8002278:	4543      	cmp	r3, r8
 800227a:	dcf1      	bgt.n	8002260 <_printf_float+0x3d8>
 800227c:	4653      	mov	r3, sl
 800227e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002282:	e6dd      	b.n	8002040 <_printf_float+0x1b8>
 8002284:	f04f 0800 	mov.w	r8, #0
 8002288:	f104 091a 	add.w	r9, r4, #26
 800228c:	e7f2      	b.n	8002274 <_printf_float+0x3ec>
 800228e:	2301      	movs	r3, #1
 8002290:	e7df      	b.n	8002252 <_printf_float+0x3ca>
 8002292:	2301      	movs	r3, #1
 8002294:	464a      	mov	r2, r9
 8002296:	4631      	mov	r1, r6
 8002298:	4628      	mov	r0, r5
 800229a:	47b8      	blx	r7
 800229c:	3001      	adds	r0, #1
 800229e:	f43f ae41 	beq.w	8001f24 <_printf_float+0x9c>
 80022a2:	f108 0801 	add.w	r8, r8, #1
 80022a6:	68e3      	ldr	r3, [r4, #12]
 80022a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80022aa:	1a9b      	subs	r3, r3, r2
 80022ac:	4543      	cmp	r3, r8
 80022ae:	dcf0      	bgt.n	8002292 <_printf_float+0x40a>
 80022b0:	e6fa      	b.n	80020a8 <_printf_float+0x220>
 80022b2:	f04f 0800 	mov.w	r8, #0
 80022b6:	f104 0919 	add.w	r9, r4, #25
 80022ba:	e7f4      	b.n	80022a6 <_printf_float+0x41e>
 80022bc:	2900      	cmp	r1, #0
 80022be:	f43f ae8a 	beq.w	8001fd6 <_printf_float+0x14e>
 80022c2:	f04f 0c00 	mov.w	ip, #0
 80022c6:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80022ca:	e9cd 0900 	strd	r0, r9, [sp]
 80022ce:	6022      	str	r2, [r4, #0]
 80022d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80022d4:	4628      	mov	r0, r5
 80022d6:	f7ff fd4f 	bl	8001d78 <__cvt>
 80022da:	4680      	mov	r8, r0
 80022dc:	e64a      	b.n	8001f74 <_printf_float+0xec>
 80022de:	bf00      	nop

080022e0 <_printf_common>:
 80022e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022e4:	4691      	mov	r9, r2
 80022e6:	461f      	mov	r7, r3
 80022e8:	688a      	ldr	r2, [r1, #8]
 80022ea:	690b      	ldr	r3, [r1, #16]
 80022ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80022f0:	4293      	cmp	r3, r2
 80022f2:	bfb8      	it	lt
 80022f4:	4613      	movlt	r3, r2
 80022f6:	f8c9 3000 	str.w	r3, [r9]
 80022fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80022fe:	4606      	mov	r6, r0
 8002300:	460c      	mov	r4, r1
 8002302:	b112      	cbz	r2, 800230a <_printf_common+0x2a>
 8002304:	3301      	adds	r3, #1
 8002306:	f8c9 3000 	str.w	r3, [r9]
 800230a:	6823      	ldr	r3, [r4, #0]
 800230c:	0699      	lsls	r1, r3, #26
 800230e:	bf42      	ittt	mi
 8002310:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002314:	3302      	addmi	r3, #2
 8002316:	f8c9 3000 	strmi.w	r3, [r9]
 800231a:	6825      	ldr	r5, [r4, #0]
 800231c:	f015 0506 	ands.w	r5, r5, #6
 8002320:	d107      	bne.n	8002332 <_printf_common+0x52>
 8002322:	f104 0a19 	add.w	sl, r4, #25
 8002326:	68e3      	ldr	r3, [r4, #12]
 8002328:	f8d9 2000 	ldr.w	r2, [r9]
 800232c:	1a9b      	subs	r3, r3, r2
 800232e:	42ab      	cmp	r3, r5
 8002330:	dc28      	bgt.n	8002384 <_printf_common+0xa4>
 8002332:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002336:	6822      	ldr	r2, [r4, #0]
 8002338:	3300      	adds	r3, #0
 800233a:	bf18      	it	ne
 800233c:	2301      	movne	r3, #1
 800233e:	0692      	lsls	r2, r2, #26
 8002340:	d42d      	bmi.n	800239e <_printf_common+0xbe>
 8002342:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002346:	4639      	mov	r1, r7
 8002348:	4630      	mov	r0, r6
 800234a:	47c0      	blx	r8
 800234c:	3001      	adds	r0, #1
 800234e:	d020      	beq.n	8002392 <_printf_common+0xb2>
 8002350:	6823      	ldr	r3, [r4, #0]
 8002352:	68e5      	ldr	r5, [r4, #12]
 8002354:	f8d9 2000 	ldr.w	r2, [r9]
 8002358:	f003 0306 	and.w	r3, r3, #6
 800235c:	2b04      	cmp	r3, #4
 800235e:	bf08      	it	eq
 8002360:	1aad      	subeq	r5, r5, r2
 8002362:	68a3      	ldr	r3, [r4, #8]
 8002364:	6922      	ldr	r2, [r4, #16]
 8002366:	bf0c      	ite	eq
 8002368:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800236c:	2500      	movne	r5, #0
 800236e:	4293      	cmp	r3, r2
 8002370:	bfc4      	itt	gt
 8002372:	1a9b      	subgt	r3, r3, r2
 8002374:	18ed      	addgt	r5, r5, r3
 8002376:	f04f 0900 	mov.w	r9, #0
 800237a:	341a      	adds	r4, #26
 800237c:	454d      	cmp	r5, r9
 800237e:	d11a      	bne.n	80023b6 <_printf_common+0xd6>
 8002380:	2000      	movs	r0, #0
 8002382:	e008      	b.n	8002396 <_printf_common+0xb6>
 8002384:	2301      	movs	r3, #1
 8002386:	4652      	mov	r2, sl
 8002388:	4639      	mov	r1, r7
 800238a:	4630      	mov	r0, r6
 800238c:	47c0      	blx	r8
 800238e:	3001      	adds	r0, #1
 8002390:	d103      	bne.n	800239a <_printf_common+0xba>
 8002392:	f04f 30ff 	mov.w	r0, #4294967295
 8002396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800239a:	3501      	adds	r5, #1
 800239c:	e7c3      	b.n	8002326 <_printf_common+0x46>
 800239e:	18e1      	adds	r1, r4, r3
 80023a0:	1c5a      	adds	r2, r3, #1
 80023a2:	2030      	movs	r0, #48	; 0x30
 80023a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80023a8:	4422      	add	r2, r4
 80023aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80023ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80023b2:	3302      	adds	r3, #2
 80023b4:	e7c5      	b.n	8002342 <_printf_common+0x62>
 80023b6:	2301      	movs	r3, #1
 80023b8:	4622      	mov	r2, r4
 80023ba:	4639      	mov	r1, r7
 80023bc:	4630      	mov	r0, r6
 80023be:	47c0      	blx	r8
 80023c0:	3001      	adds	r0, #1
 80023c2:	d0e6      	beq.n	8002392 <_printf_common+0xb2>
 80023c4:	f109 0901 	add.w	r9, r9, #1
 80023c8:	e7d8      	b.n	800237c <_printf_common+0x9c>
	...

080023cc <_printf_i>:
 80023cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80023d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80023d4:	460c      	mov	r4, r1
 80023d6:	7e09      	ldrb	r1, [r1, #24]
 80023d8:	b085      	sub	sp, #20
 80023da:	296e      	cmp	r1, #110	; 0x6e
 80023dc:	4617      	mov	r7, r2
 80023de:	4606      	mov	r6, r0
 80023e0:	4698      	mov	r8, r3
 80023e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80023e4:	f000 80b3 	beq.w	800254e <_printf_i+0x182>
 80023e8:	d822      	bhi.n	8002430 <_printf_i+0x64>
 80023ea:	2963      	cmp	r1, #99	; 0x63
 80023ec:	d036      	beq.n	800245c <_printf_i+0x90>
 80023ee:	d80a      	bhi.n	8002406 <_printf_i+0x3a>
 80023f0:	2900      	cmp	r1, #0
 80023f2:	f000 80b9 	beq.w	8002568 <_printf_i+0x19c>
 80023f6:	2958      	cmp	r1, #88	; 0x58
 80023f8:	f000 8083 	beq.w	8002502 <_printf_i+0x136>
 80023fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002400:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002404:	e032      	b.n	800246c <_printf_i+0xa0>
 8002406:	2964      	cmp	r1, #100	; 0x64
 8002408:	d001      	beq.n	800240e <_printf_i+0x42>
 800240a:	2969      	cmp	r1, #105	; 0x69
 800240c:	d1f6      	bne.n	80023fc <_printf_i+0x30>
 800240e:	6820      	ldr	r0, [r4, #0]
 8002410:	6813      	ldr	r3, [r2, #0]
 8002412:	0605      	lsls	r5, r0, #24
 8002414:	f103 0104 	add.w	r1, r3, #4
 8002418:	d52a      	bpl.n	8002470 <_printf_i+0xa4>
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6011      	str	r1, [r2, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	da03      	bge.n	800242a <_printf_i+0x5e>
 8002422:	222d      	movs	r2, #45	; 0x2d
 8002424:	425b      	negs	r3, r3
 8002426:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800242a:	486f      	ldr	r0, [pc, #444]	; (80025e8 <_printf_i+0x21c>)
 800242c:	220a      	movs	r2, #10
 800242e:	e039      	b.n	80024a4 <_printf_i+0xd8>
 8002430:	2973      	cmp	r1, #115	; 0x73
 8002432:	f000 809d 	beq.w	8002570 <_printf_i+0x1a4>
 8002436:	d808      	bhi.n	800244a <_printf_i+0x7e>
 8002438:	296f      	cmp	r1, #111	; 0x6f
 800243a:	d020      	beq.n	800247e <_printf_i+0xb2>
 800243c:	2970      	cmp	r1, #112	; 0x70
 800243e:	d1dd      	bne.n	80023fc <_printf_i+0x30>
 8002440:	6823      	ldr	r3, [r4, #0]
 8002442:	f043 0320 	orr.w	r3, r3, #32
 8002446:	6023      	str	r3, [r4, #0]
 8002448:	e003      	b.n	8002452 <_printf_i+0x86>
 800244a:	2975      	cmp	r1, #117	; 0x75
 800244c:	d017      	beq.n	800247e <_printf_i+0xb2>
 800244e:	2978      	cmp	r1, #120	; 0x78
 8002450:	d1d4      	bne.n	80023fc <_printf_i+0x30>
 8002452:	2378      	movs	r3, #120	; 0x78
 8002454:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002458:	4864      	ldr	r0, [pc, #400]	; (80025ec <_printf_i+0x220>)
 800245a:	e055      	b.n	8002508 <_printf_i+0x13c>
 800245c:	6813      	ldr	r3, [r2, #0]
 800245e:	1d19      	adds	r1, r3, #4
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6011      	str	r1, [r2, #0]
 8002464:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002468:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800246c:	2301      	movs	r3, #1
 800246e:	e08c      	b.n	800258a <_printf_i+0x1be>
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6011      	str	r1, [r2, #0]
 8002474:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002478:	bf18      	it	ne
 800247a:	b21b      	sxthne	r3, r3
 800247c:	e7cf      	b.n	800241e <_printf_i+0x52>
 800247e:	6813      	ldr	r3, [r2, #0]
 8002480:	6825      	ldr	r5, [r4, #0]
 8002482:	1d18      	adds	r0, r3, #4
 8002484:	6010      	str	r0, [r2, #0]
 8002486:	0628      	lsls	r0, r5, #24
 8002488:	d501      	bpl.n	800248e <_printf_i+0xc2>
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	e002      	b.n	8002494 <_printf_i+0xc8>
 800248e:	0668      	lsls	r0, r5, #25
 8002490:	d5fb      	bpl.n	800248a <_printf_i+0xbe>
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	4854      	ldr	r0, [pc, #336]	; (80025e8 <_printf_i+0x21c>)
 8002496:	296f      	cmp	r1, #111	; 0x6f
 8002498:	bf14      	ite	ne
 800249a:	220a      	movne	r2, #10
 800249c:	2208      	moveq	r2, #8
 800249e:	2100      	movs	r1, #0
 80024a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80024a4:	6865      	ldr	r5, [r4, #4]
 80024a6:	60a5      	str	r5, [r4, #8]
 80024a8:	2d00      	cmp	r5, #0
 80024aa:	f2c0 8095 	blt.w	80025d8 <_printf_i+0x20c>
 80024ae:	6821      	ldr	r1, [r4, #0]
 80024b0:	f021 0104 	bic.w	r1, r1, #4
 80024b4:	6021      	str	r1, [r4, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d13d      	bne.n	8002536 <_printf_i+0x16a>
 80024ba:	2d00      	cmp	r5, #0
 80024bc:	f040 808e 	bne.w	80025dc <_printf_i+0x210>
 80024c0:	4665      	mov	r5, ip
 80024c2:	2a08      	cmp	r2, #8
 80024c4:	d10b      	bne.n	80024de <_printf_i+0x112>
 80024c6:	6823      	ldr	r3, [r4, #0]
 80024c8:	07db      	lsls	r3, r3, #31
 80024ca:	d508      	bpl.n	80024de <_printf_i+0x112>
 80024cc:	6923      	ldr	r3, [r4, #16]
 80024ce:	6862      	ldr	r2, [r4, #4]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	bfde      	ittt	le
 80024d4:	2330      	movle	r3, #48	; 0x30
 80024d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80024da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80024de:	ebac 0305 	sub.w	r3, ip, r5
 80024e2:	6123      	str	r3, [r4, #16]
 80024e4:	f8cd 8000 	str.w	r8, [sp]
 80024e8:	463b      	mov	r3, r7
 80024ea:	aa03      	add	r2, sp, #12
 80024ec:	4621      	mov	r1, r4
 80024ee:	4630      	mov	r0, r6
 80024f0:	f7ff fef6 	bl	80022e0 <_printf_common>
 80024f4:	3001      	adds	r0, #1
 80024f6:	d14d      	bne.n	8002594 <_printf_i+0x1c8>
 80024f8:	f04f 30ff 	mov.w	r0, #4294967295
 80024fc:	b005      	add	sp, #20
 80024fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002502:	4839      	ldr	r0, [pc, #228]	; (80025e8 <_printf_i+0x21c>)
 8002504:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002508:	6813      	ldr	r3, [r2, #0]
 800250a:	6821      	ldr	r1, [r4, #0]
 800250c:	1d1d      	adds	r5, r3, #4
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6015      	str	r5, [r2, #0]
 8002512:	060a      	lsls	r2, r1, #24
 8002514:	d50b      	bpl.n	800252e <_printf_i+0x162>
 8002516:	07ca      	lsls	r2, r1, #31
 8002518:	bf44      	itt	mi
 800251a:	f041 0120 	orrmi.w	r1, r1, #32
 800251e:	6021      	strmi	r1, [r4, #0]
 8002520:	b91b      	cbnz	r3, 800252a <_printf_i+0x15e>
 8002522:	6822      	ldr	r2, [r4, #0]
 8002524:	f022 0220 	bic.w	r2, r2, #32
 8002528:	6022      	str	r2, [r4, #0]
 800252a:	2210      	movs	r2, #16
 800252c:	e7b7      	b.n	800249e <_printf_i+0xd2>
 800252e:	064d      	lsls	r5, r1, #25
 8002530:	bf48      	it	mi
 8002532:	b29b      	uxthmi	r3, r3
 8002534:	e7ef      	b.n	8002516 <_printf_i+0x14a>
 8002536:	4665      	mov	r5, ip
 8002538:	fbb3 f1f2 	udiv	r1, r3, r2
 800253c:	fb02 3311 	mls	r3, r2, r1, r3
 8002540:	5cc3      	ldrb	r3, [r0, r3]
 8002542:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002546:	460b      	mov	r3, r1
 8002548:	2900      	cmp	r1, #0
 800254a:	d1f5      	bne.n	8002538 <_printf_i+0x16c>
 800254c:	e7b9      	b.n	80024c2 <_printf_i+0xf6>
 800254e:	6813      	ldr	r3, [r2, #0]
 8002550:	6825      	ldr	r5, [r4, #0]
 8002552:	6961      	ldr	r1, [r4, #20]
 8002554:	1d18      	adds	r0, r3, #4
 8002556:	6010      	str	r0, [r2, #0]
 8002558:	0628      	lsls	r0, r5, #24
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	d501      	bpl.n	8002562 <_printf_i+0x196>
 800255e:	6019      	str	r1, [r3, #0]
 8002560:	e002      	b.n	8002568 <_printf_i+0x19c>
 8002562:	066a      	lsls	r2, r5, #25
 8002564:	d5fb      	bpl.n	800255e <_printf_i+0x192>
 8002566:	8019      	strh	r1, [r3, #0]
 8002568:	2300      	movs	r3, #0
 800256a:	6123      	str	r3, [r4, #16]
 800256c:	4665      	mov	r5, ip
 800256e:	e7b9      	b.n	80024e4 <_printf_i+0x118>
 8002570:	6813      	ldr	r3, [r2, #0]
 8002572:	1d19      	adds	r1, r3, #4
 8002574:	6011      	str	r1, [r2, #0]
 8002576:	681d      	ldr	r5, [r3, #0]
 8002578:	6862      	ldr	r2, [r4, #4]
 800257a:	2100      	movs	r1, #0
 800257c:	4628      	mov	r0, r5
 800257e:	f7fd fe67 	bl	8000250 <memchr>
 8002582:	b108      	cbz	r0, 8002588 <_printf_i+0x1bc>
 8002584:	1b40      	subs	r0, r0, r5
 8002586:	6060      	str	r0, [r4, #4]
 8002588:	6863      	ldr	r3, [r4, #4]
 800258a:	6123      	str	r3, [r4, #16]
 800258c:	2300      	movs	r3, #0
 800258e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002592:	e7a7      	b.n	80024e4 <_printf_i+0x118>
 8002594:	6923      	ldr	r3, [r4, #16]
 8002596:	462a      	mov	r2, r5
 8002598:	4639      	mov	r1, r7
 800259a:	4630      	mov	r0, r6
 800259c:	47c0      	blx	r8
 800259e:	3001      	adds	r0, #1
 80025a0:	d0aa      	beq.n	80024f8 <_printf_i+0x12c>
 80025a2:	6823      	ldr	r3, [r4, #0]
 80025a4:	079b      	lsls	r3, r3, #30
 80025a6:	d413      	bmi.n	80025d0 <_printf_i+0x204>
 80025a8:	68e0      	ldr	r0, [r4, #12]
 80025aa:	9b03      	ldr	r3, [sp, #12]
 80025ac:	4298      	cmp	r0, r3
 80025ae:	bfb8      	it	lt
 80025b0:	4618      	movlt	r0, r3
 80025b2:	e7a3      	b.n	80024fc <_printf_i+0x130>
 80025b4:	2301      	movs	r3, #1
 80025b6:	464a      	mov	r2, r9
 80025b8:	4639      	mov	r1, r7
 80025ba:	4630      	mov	r0, r6
 80025bc:	47c0      	blx	r8
 80025be:	3001      	adds	r0, #1
 80025c0:	d09a      	beq.n	80024f8 <_printf_i+0x12c>
 80025c2:	3501      	adds	r5, #1
 80025c4:	68e3      	ldr	r3, [r4, #12]
 80025c6:	9a03      	ldr	r2, [sp, #12]
 80025c8:	1a9b      	subs	r3, r3, r2
 80025ca:	42ab      	cmp	r3, r5
 80025cc:	dcf2      	bgt.n	80025b4 <_printf_i+0x1e8>
 80025ce:	e7eb      	b.n	80025a8 <_printf_i+0x1dc>
 80025d0:	2500      	movs	r5, #0
 80025d2:	f104 0919 	add.w	r9, r4, #25
 80025d6:	e7f5      	b.n	80025c4 <_printf_i+0x1f8>
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1ac      	bne.n	8002536 <_printf_i+0x16a>
 80025dc:	7803      	ldrb	r3, [r0, #0]
 80025de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80025e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80025e6:	e76c      	b.n	80024c2 <_printf_i+0xf6>
 80025e8:	080040d2 	.word	0x080040d2
 80025ec:	080040e3 	.word	0x080040e3

080025f0 <_vsiprintf_r>:
 80025f0:	b500      	push	{lr}
 80025f2:	b09b      	sub	sp, #108	; 0x6c
 80025f4:	9100      	str	r1, [sp, #0]
 80025f6:	9104      	str	r1, [sp, #16]
 80025f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80025fc:	9105      	str	r1, [sp, #20]
 80025fe:	9102      	str	r1, [sp, #8]
 8002600:	4905      	ldr	r1, [pc, #20]	; (8002618 <_vsiprintf_r+0x28>)
 8002602:	9103      	str	r1, [sp, #12]
 8002604:	4669      	mov	r1, sp
 8002606:	f001 f9f7 	bl	80039f8 <_svfiprintf_r>
 800260a:	9b00      	ldr	r3, [sp, #0]
 800260c:	2200      	movs	r2, #0
 800260e:	701a      	strb	r2, [r3, #0]
 8002610:	b01b      	add	sp, #108	; 0x6c
 8002612:	f85d fb04 	ldr.w	pc, [sp], #4
 8002616:	bf00      	nop
 8002618:	ffff0208 	.word	0xffff0208

0800261c <vsiprintf>:
 800261c:	4613      	mov	r3, r2
 800261e:	460a      	mov	r2, r1
 8002620:	4601      	mov	r1, r0
 8002622:	4802      	ldr	r0, [pc, #8]	; (800262c <vsiprintf+0x10>)
 8002624:	6800      	ldr	r0, [r0, #0]
 8002626:	f7ff bfe3 	b.w	80025f0 <_vsiprintf_r>
 800262a:	bf00      	nop
 800262c:	200000cc 	.word	0x200000cc

08002630 <quorem>:
 8002630:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002634:	6903      	ldr	r3, [r0, #16]
 8002636:	690c      	ldr	r4, [r1, #16]
 8002638:	42a3      	cmp	r3, r4
 800263a:	4680      	mov	r8, r0
 800263c:	f2c0 8082 	blt.w	8002744 <quorem+0x114>
 8002640:	3c01      	subs	r4, #1
 8002642:	f101 0714 	add.w	r7, r1, #20
 8002646:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800264a:	f100 0614 	add.w	r6, r0, #20
 800264e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8002652:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002656:	eb06 030c 	add.w	r3, r6, ip
 800265a:	3501      	adds	r5, #1
 800265c:	eb07 090c 	add.w	r9, r7, ip
 8002660:	9301      	str	r3, [sp, #4]
 8002662:	fbb0 f5f5 	udiv	r5, r0, r5
 8002666:	b395      	cbz	r5, 80026ce <quorem+0x9e>
 8002668:	f04f 0a00 	mov.w	sl, #0
 800266c:	4638      	mov	r0, r7
 800266e:	46b6      	mov	lr, r6
 8002670:	46d3      	mov	fp, sl
 8002672:	f850 2b04 	ldr.w	r2, [r0], #4
 8002676:	b293      	uxth	r3, r2
 8002678:	fb05 a303 	mla	r3, r5, r3, sl
 800267c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002680:	b29b      	uxth	r3, r3
 8002682:	ebab 0303 	sub.w	r3, fp, r3
 8002686:	0c12      	lsrs	r2, r2, #16
 8002688:	f8de b000 	ldr.w	fp, [lr]
 800268c:	fb05 a202 	mla	r2, r5, r2, sl
 8002690:	fa13 f38b 	uxtah	r3, r3, fp
 8002694:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8002698:	fa1f fb82 	uxth.w	fp, r2
 800269c:	f8de 2000 	ldr.w	r2, [lr]
 80026a0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80026a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80026ae:	4581      	cmp	r9, r0
 80026b0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80026b4:	f84e 3b04 	str.w	r3, [lr], #4
 80026b8:	d2db      	bcs.n	8002672 <quorem+0x42>
 80026ba:	f856 300c 	ldr.w	r3, [r6, ip]
 80026be:	b933      	cbnz	r3, 80026ce <quorem+0x9e>
 80026c0:	9b01      	ldr	r3, [sp, #4]
 80026c2:	3b04      	subs	r3, #4
 80026c4:	429e      	cmp	r6, r3
 80026c6:	461a      	mov	r2, r3
 80026c8:	d330      	bcc.n	800272c <quorem+0xfc>
 80026ca:	f8c8 4010 	str.w	r4, [r8, #16]
 80026ce:	4640      	mov	r0, r8
 80026d0:	f000 ffbc 	bl	800364c <__mcmp>
 80026d4:	2800      	cmp	r0, #0
 80026d6:	db25      	blt.n	8002724 <quorem+0xf4>
 80026d8:	3501      	adds	r5, #1
 80026da:	4630      	mov	r0, r6
 80026dc:	f04f 0c00 	mov.w	ip, #0
 80026e0:	f857 2b04 	ldr.w	r2, [r7], #4
 80026e4:	f8d0 e000 	ldr.w	lr, [r0]
 80026e8:	b293      	uxth	r3, r2
 80026ea:	ebac 0303 	sub.w	r3, ip, r3
 80026ee:	0c12      	lsrs	r2, r2, #16
 80026f0:	fa13 f38e 	uxtah	r3, r3, lr
 80026f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80026f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002702:	45b9      	cmp	r9, r7
 8002704:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002708:	f840 3b04 	str.w	r3, [r0], #4
 800270c:	d2e8      	bcs.n	80026e0 <quorem+0xb0>
 800270e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8002712:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8002716:	b92a      	cbnz	r2, 8002724 <quorem+0xf4>
 8002718:	3b04      	subs	r3, #4
 800271a:	429e      	cmp	r6, r3
 800271c:	461a      	mov	r2, r3
 800271e:	d30b      	bcc.n	8002738 <quorem+0x108>
 8002720:	f8c8 4010 	str.w	r4, [r8, #16]
 8002724:	4628      	mov	r0, r5
 8002726:	b003      	add	sp, #12
 8002728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800272c:	6812      	ldr	r2, [r2, #0]
 800272e:	3b04      	subs	r3, #4
 8002730:	2a00      	cmp	r2, #0
 8002732:	d1ca      	bne.n	80026ca <quorem+0x9a>
 8002734:	3c01      	subs	r4, #1
 8002736:	e7c5      	b.n	80026c4 <quorem+0x94>
 8002738:	6812      	ldr	r2, [r2, #0]
 800273a:	3b04      	subs	r3, #4
 800273c:	2a00      	cmp	r2, #0
 800273e:	d1ef      	bne.n	8002720 <quorem+0xf0>
 8002740:	3c01      	subs	r4, #1
 8002742:	e7ea      	b.n	800271a <quorem+0xea>
 8002744:	2000      	movs	r0, #0
 8002746:	e7ee      	b.n	8002726 <quorem+0xf6>

08002748 <_dtoa_r>:
 8002748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800274c:	ec57 6b10 	vmov	r6, r7, d0
 8002750:	b095      	sub	sp, #84	; 0x54
 8002752:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8002754:	9108      	str	r1, [sp, #32]
 8002756:	4604      	mov	r4, r0
 8002758:	920a      	str	r2, [sp, #40]	; 0x28
 800275a:	9311      	str	r3, [sp, #68]	; 0x44
 800275c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8002760:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8002764:	b93d      	cbnz	r5, 8002776 <_dtoa_r+0x2e>
 8002766:	2010      	movs	r0, #16
 8002768:	f000 fd48 	bl	80031fc <malloc>
 800276c:	6260      	str	r0, [r4, #36]	; 0x24
 800276e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8002772:	6005      	str	r5, [r0, #0]
 8002774:	60c5      	str	r5, [r0, #12]
 8002776:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002778:	6819      	ldr	r1, [r3, #0]
 800277a:	b151      	cbz	r1, 8002792 <_dtoa_r+0x4a>
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	604a      	str	r2, [r1, #4]
 8002780:	2301      	movs	r3, #1
 8002782:	4093      	lsls	r3, r2
 8002784:	608b      	str	r3, [r1, #8]
 8002786:	4620      	mov	r0, r4
 8002788:	f000 fd7f 	bl	800328a <_Bfree>
 800278c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	1e3b      	subs	r3, r7, #0
 8002794:	bfb9      	ittee	lt
 8002796:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800279a:	9303      	strlt	r3, [sp, #12]
 800279c:	2300      	movge	r3, #0
 800279e:	f8c8 3000 	strge.w	r3, [r8]
 80027a2:	9d03      	ldr	r5, [sp, #12]
 80027a4:	4bac      	ldr	r3, [pc, #688]	; (8002a58 <_dtoa_r+0x310>)
 80027a6:	bfbc      	itt	lt
 80027a8:	2201      	movlt	r2, #1
 80027aa:	f8c8 2000 	strlt.w	r2, [r8]
 80027ae:	43ab      	bics	r3, r5
 80027b0:	d11b      	bne.n	80027ea <_dtoa_r+0xa2>
 80027b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80027b4:	f242 730f 	movw	r3, #9999	; 0x270f
 80027b8:	6013      	str	r3, [r2, #0]
 80027ba:	9b02      	ldr	r3, [sp, #8]
 80027bc:	b923      	cbnz	r3, 80027c8 <_dtoa_r+0x80>
 80027be:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80027c2:	2d00      	cmp	r5, #0
 80027c4:	f000 84dd 	beq.w	8003182 <_dtoa_r+0xa3a>
 80027c8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80027ca:	b953      	cbnz	r3, 80027e2 <_dtoa_r+0x9a>
 80027cc:	4ba3      	ldr	r3, [pc, #652]	; (8002a5c <_dtoa_r+0x314>)
 80027ce:	e020      	b.n	8002812 <_dtoa_r+0xca>
 80027d0:	4ba3      	ldr	r3, [pc, #652]	; (8002a60 <_dtoa_r+0x318>)
 80027d2:	9304      	str	r3, [sp, #16]
 80027d4:	3308      	adds	r3, #8
 80027d6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	9804      	ldr	r0, [sp, #16]
 80027dc:	b015      	add	sp, #84	; 0x54
 80027de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027e2:	4b9e      	ldr	r3, [pc, #632]	; (8002a5c <_dtoa_r+0x314>)
 80027e4:	9304      	str	r3, [sp, #16]
 80027e6:	3303      	adds	r3, #3
 80027e8:	e7f5      	b.n	80027d6 <_dtoa_r+0x8e>
 80027ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80027ee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80027f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f6:	ed8d 7b04 	vstr	d7, [sp, #16]
 80027fa:	d10c      	bne.n	8002816 <_dtoa_r+0xce>
 80027fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80027fe:	2301      	movs	r3, #1
 8002800:	6013      	str	r3, [r2, #0]
 8002802:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 84b9 	beq.w	800317c <_dtoa_r+0xa34>
 800280a:	4b96      	ldr	r3, [pc, #600]	; (8002a64 <_dtoa_r+0x31c>)
 800280c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	3b01      	subs	r3, #1
 8002812:	9304      	str	r3, [sp, #16]
 8002814:	e7e1      	b.n	80027da <_dtoa_r+0x92>
 8002816:	a913      	add	r1, sp, #76	; 0x4c
 8002818:	aa12      	add	r2, sp, #72	; 0x48
 800281a:	ed9d 0b04 	vldr	d0, [sp, #16]
 800281e:	4620      	mov	r0, r4
 8002820:	f000 ff8b 	bl	800373a <__d2b>
 8002824:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8002828:	9001      	str	r0, [sp, #4]
 800282a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800282c:	2e00      	cmp	r6, #0
 800282e:	d046      	beq.n	80028be <_dtoa_r+0x176>
 8002830:	9805      	ldr	r0, [sp, #20]
 8002832:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8002836:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800283a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800283e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002842:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8002846:	2700      	movs	r7, #0
 8002848:	ee07 aa90 	vmov	s15, sl
 800284c:	ec43 2b16 	vmov	d6, r2, r3
 8002850:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8002854:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8002a40 <_dtoa_r+0x2f8>
 8002858:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800285c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002860:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8002a48 <_dtoa_r+0x300>
 8002864:	eea7 6b04 	vfma.f64	d6, d7, d4
 8002868:	eeb0 7b46 	vmov.f64	d7, d6
 800286c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8002a50 <_dtoa_r+0x308>
 8002870:	eea5 7b06 	vfma.f64	d7, d5, d6
 8002874:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8002878:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800287c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002880:	ee16 ba90 	vmov	fp, s13
 8002884:	d508      	bpl.n	8002898 <_dtoa_r+0x150>
 8002886:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800288a:	eeb4 6b47 	vcmp.f64	d6, d7
 800288e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002892:	bf18      	it	ne
 8002894:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8002898:	f1bb 0f16 	cmp.w	fp, #22
 800289c:	d834      	bhi.n	8002908 <_dtoa_r+0x1c0>
 800289e:	4b72      	ldr	r3, [pc, #456]	; (8002a68 <_dtoa_r+0x320>)
 80028a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80028a4:	ed93 7b00 	vldr	d7, [r3]
 80028a8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80028ac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80028b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b4:	dd01      	ble.n	80028ba <_dtoa_r+0x172>
 80028b6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80028ba:	2300      	movs	r3, #0
 80028bc:	e025      	b.n	800290a <_dtoa_r+0x1c2>
 80028be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80028c0:	eb01 0a03 	add.w	sl, r1, r3
 80028c4:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 80028c8:	2b20      	cmp	r3, #32
 80028ca:	dd17      	ble.n	80028fc <_dtoa_r+0x1b4>
 80028cc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80028d0:	9a02      	ldr	r2, [sp, #8]
 80028d2:	409d      	lsls	r5, r3
 80028d4:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 80028d8:	fa22 f303 	lsr.w	r3, r2, r3
 80028dc:	432b      	orrs	r3, r5
 80028de:	ee07 3a90 	vmov	s15, r3
 80028e2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80028e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80028ea:	ed8d 7b04 	vstr	d7, [sp, #16]
 80028ee:	9805      	ldr	r0, [sp, #20]
 80028f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80028f4:	2701      	movs	r7, #1
 80028f6:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 80028fa:	e7a5      	b.n	8002848 <_dtoa_r+0x100>
 80028fc:	9a02      	ldr	r2, [sp, #8]
 80028fe:	f1c3 0320 	rsb	r3, r3, #32
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	e7ea      	b.n	80028de <_dtoa_r+0x196>
 8002908:	2301      	movs	r3, #1
 800290a:	eba1 0a0a 	sub.w	sl, r1, sl
 800290e:	9310      	str	r3, [sp, #64]	; 0x40
 8002910:	f1ba 0301 	subs.w	r3, sl, #1
 8002914:	9307      	str	r3, [sp, #28]
 8002916:	bf43      	ittte	mi
 8002918:	2300      	movmi	r3, #0
 800291a:	f1ca 0a01 	rsbmi	sl, sl, #1
 800291e:	9307      	strmi	r3, [sp, #28]
 8002920:	f04f 0a00 	movpl.w	sl, #0
 8002924:	f1bb 0f00 	cmp.w	fp, #0
 8002928:	db19      	blt.n	800295e <_dtoa_r+0x216>
 800292a:	9b07      	ldr	r3, [sp, #28]
 800292c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8002930:	445b      	add	r3, fp
 8002932:	9307      	str	r3, [sp, #28]
 8002934:	f04f 0800 	mov.w	r8, #0
 8002938:	9b08      	ldr	r3, [sp, #32]
 800293a:	2b09      	cmp	r3, #9
 800293c:	d866      	bhi.n	8002a0c <_dtoa_r+0x2c4>
 800293e:	2b05      	cmp	r3, #5
 8002940:	bfc4      	itt	gt
 8002942:	3b04      	subgt	r3, #4
 8002944:	9308      	strgt	r3, [sp, #32]
 8002946:	9b08      	ldr	r3, [sp, #32]
 8002948:	f1a3 0302 	sub.w	r3, r3, #2
 800294c:	bfcc      	ite	gt
 800294e:	2500      	movgt	r5, #0
 8002950:	2501      	movle	r5, #1
 8002952:	2b03      	cmp	r3, #3
 8002954:	d866      	bhi.n	8002a24 <_dtoa_r+0x2dc>
 8002956:	e8df f003 	tbb	[pc, r3]
 800295a:	5755      	.short	0x5755
 800295c:	4909      	.short	0x4909
 800295e:	2300      	movs	r3, #0
 8002960:	ebaa 0a0b 	sub.w	sl, sl, fp
 8002964:	f1cb 0800 	rsb	r8, fp, #0
 8002968:	930b      	str	r3, [sp, #44]	; 0x2c
 800296a:	e7e5      	b.n	8002938 <_dtoa_r+0x1f0>
 800296c:	2301      	movs	r3, #1
 800296e:	9309      	str	r3, [sp, #36]	; 0x24
 8002970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002972:	2b00      	cmp	r3, #0
 8002974:	dd59      	ble.n	8002a2a <_dtoa_r+0x2e2>
 8002976:	9306      	str	r3, [sp, #24]
 8002978:	4699      	mov	r9, r3
 800297a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800297c:	2200      	movs	r2, #0
 800297e:	6072      	str	r2, [r6, #4]
 8002980:	2204      	movs	r2, #4
 8002982:	f102 0014 	add.w	r0, r2, #20
 8002986:	4298      	cmp	r0, r3
 8002988:	6871      	ldr	r1, [r6, #4]
 800298a:	d953      	bls.n	8002a34 <_dtoa_r+0x2ec>
 800298c:	4620      	mov	r0, r4
 800298e:	f000 fc48 	bl	8003222 <_Balloc>
 8002992:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002994:	6030      	str	r0, [r6, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	9304      	str	r3, [sp, #16]
 800299a:	f1b9 0f0e 	cmp.w	r9, #14
 800299e:	f200 80c2 	bhi.w	8002b26 <_dtoa_r+0x3de>
 80029a2:	2d00      	cmp	r5, #0
 80029a4:	f000 80bf 	beq.w	8002b26 <_dtoa_r+0x3de>
 80029a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80029ac:	f1bb 0f00 	cmp.w	fp, #0
 80029b0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80029b4:	f340 80e6 	ble.w	8002b84 <_dtoa_r+0x43c>
 80029b8:	4a2b      	ldr	r2, [pc, #172]	; (8002a68 <_dtoa_r+0x320>)
 80029ba:	f00b 030f 	and.w	r3, fp, #15
 80029be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80029c2:	ed93 7b00 	vldr	d7, [r3]
 80029c6:	ea4f 132b 	mov.w	r3, fp, asr #4
 80029ca:	06da      	lsls	r2, r3, #27
 80029cc:	f140 80d8 	bpl.w	8002b80 <_dtoa_r+0x438>
 80029d0:	4a26      	ldr	r2, [pc, #152]	; (8002a6c <_dtoa_r+0x324>)
 80029d2:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 80029d6:	ed92 6b08 	vldr	d6, [r2, #32]
 80029da:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80029de:	ed8d 6b02 	vstr	d6, [sp, #8]
 80029e2:	f003 030f 	and.w	r3, r3, #15
 80029e6:	2203      	movs	r2, #3
 80029e8:	4920      	ldr	r1, [pc, #128]	; (8002a6c <_dtoa_r+0x324>)
 80029ea:	e04a      	b.n	8002a82 <_dtoa_r+0x33a>
 80029ec:	2301      	movs	r3, #1
 80029ee:	9309      	str	r3, [sp, #36]	; 0x24
 80029f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80029f2:	445b      	add	r3, fp
 80029f4:	f103 0901 	add.w	r9, r3, #1
 80029f8:	9306      	str	r3, [sp, #24]
 80029fa:	464b      	mov	r3, r9
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	bfb8      	it	lt
 8002a00:	2301      	movlt	r3, #1
 8002a02:	e7ba      	b.n	800297a <_dtoa_r+0x232>
 8002a04:	2300      	movs	r3, #0
 8002a06:	e7b2      	b.n	800296e <_dtoa_r+0x226>
 8002a08:	2300      	movs	r3, #0
 8002a0a:	e7f0      	b.n	80029ee <_dtoa_r+0x2a6>
 8002a0c:	2501      	movs	r5, #1
 8002a0e:	2300      	movs	r3, #0
 8002a10:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8002a14:	f04f 33ff 	mov.w	r3, #4294967295
 8002a18:	9306      	str	r3, [sp, #24]
 8002a1a:	4699      	mov	r9, r3
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2312      	movs	r3, #18
 8002a20:	920a      	str	r2, [sp, #40]	; 0x28
 8002a22:	e7aa      	b.n	800297a <_dtoa_r+0x232>
 8002a24:	2301      	movs	r3, #1
 8002a26:	9309      	str	r3, [sp, #36]	; 0x24
 8002a28:	e7f4      	b.n	8002a14 <_dtoa_r+0x2cc>
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	9306      	str	r3, [sp, #24]
 8002a2e:	4699      	mov	r9, r3
 8002a30:	461a      	mov	r2, r3
 8002a32:	e7f5      	b.n	8002a20 <_dtoa_r+0x2d8>
 8002a34:	3101      	adds	r1, #1
 8002a36:	6071      	str	r1, [r6, #4]
 8002a38:	0052      	lsls	r2, r2, #1
 8002a3a:	e7a2      	b.n	8002982 <_dtoa_r+0x23a>
 8002a3c:	f3af 8000 	nop.w
 8002a40:	636f4361 	.word	0x636f4361
 8002a44:	3fd287a7 	.word	0x3fd287a7
 8002a48:	8b60c8b3 	.word	0x8b60c8b3
 8002a4c:	3fc68a28 	.word	0x3fc68a28
 8002a50:	509f79fb 	.word	0x509f79fb
 8002a54:	3fd34413 	.word	0x3fd34413
 8002a58:	7ff00000 	.word	0x7ff00000
 8002a5c:	080040fd 	.word	0x080040fd
 8002a60:	080040f4 	.word	0x080040f4
 8002a64:	080040d1 	.word	0x080040d1
 8002a68:	08004130 	.word	0x08004130
 8002a6c:	08004108 	.word	0x08004108
 8002a70:	07de      	lsls	r6, r3, #31
 8002a72:	d504      	bpl.n	8002a7e <_dtoa_r+0x336>
 8002a74:	ed91 6b00 	vldr	d6, [r1]
 8002a78:	3201      	adds	r2, #1
 8002a7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002a7e:	105b      	asrs	r3, r3, #1
 8002a80:	3108      	adds	r1, #8
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f4      	bne.n	8002a70 <_dtoa_r+0x328>
 8002a86:	ed9d 6b02 	vldr	d6, [sp, #8]
 8002a8a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8002a8e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002a92:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 80a7 	beq.w	8002be8 <_dtoa_r+0x4a0>
 8002a9a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002a9e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002aa2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aaa:	f140 809d 	bpl.w	8002be8 <_dtoa_r+0x4a0>
 8002aae:	f1b9 0f00 	cmp.w	r9, #0
 8002ab2:	f000 8099 	beq.w	8002be8 <_dtoa_r+0x4a0>
 8002ab6:	9b06      	ldr	r3, [sp, #24]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	dd30      	ble.n	8002b1e <_dtoa_r+0x3d6>
 8002abc:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8002ac0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002ac4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002ac8:	9d06      	ldr	r5, [sp, #24]
 8002aca:	f10b 33ff 	add.w	r3, fp, #4294967295
 8002ace:	3201      	adds	r2, #1
 8002ad0:	ed9d 6b02 	vldr	d6, [sp, #8]
 8002ad4:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8002ad8:	ee07 2a90 	vmov	s15, r2
 8002adc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002ae0:	eea7 5b06 	vfma.f64	d5, d7, d6
 8002ae4:	ed8d 5b02 	vstr	d5, [sp, #8]
 8002ae8:	9a03      	ldr	r2, [sp, #12]
 8002aea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002aee:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8002af2:	2d00      	cmp	r5, #0
 8002af4:	d17b      	bne.n	8002bee <_dtoa_r+0x4a6>
 8002af6:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8002afa:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002afe:	ec41 0b17 	vmov	d7, r0, r1
 8002b02:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b0a:	f300 8253 	bgt.w	8002fb4 <_dtoa_r+0x86c>
 8002b0e:	eeb1 7b47 	vneg.f64	d7, d7
 8002b12:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1a:	f100 8249 	bmi.w	8002fb0 <_dtoa_r+0x868>
 8002b1e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8002b22:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002b26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f2c0 8119 	blt.w	8002d60 <_dtoa_r+0x618>
 8002b2e:	f1bb 0f0e 	cmp.w	fp, #14
 8002b32:	f300 8115 	bgt.w	8002d60 <_dtoa_r+0x618>
 8002b36:	4bc3      	ldr	r3, [pc, #780]	; (8002e44 <_dtoa_r+0x6fc>)
 8002b38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8002b3c:	ed93 6b00 	vldr	d6, [r3]
 8002b40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f280 80ba 	bge.w	8002cbc <_dtoa_r+0x574>
 8002b48:	f1b9 0f00 	cmp.w	r9, #0
 8002b4c:	f300 80b6 	bgt.w	8002cbc <_dtoa_r+0x574>
 8002b50:	f040 822d 	bne.w	8002fae <_dtoa_r+0x866>
 8002b54:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8002b58:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002b5c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002b60:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b68:	464d      	mov	r5, r9
 8002b6a:	464f      	mov	r7, r9
 8002b6c:	f280 8204 	bge.w	8002f78 <_dtoa_r+0x830>
 8002b70:	9b04      	ldr	r3, [sp, #16]
 8002b72:	9a04      	ldr	r2, [sp, #16]
 8002b74:	1c5e      	adds	r6, r3, #1
 8002b76:	2331      	movs	r3, #49	; 0x31
 8002b78:	7013      	strb	r3, [r2, #0]
 8002b7a:	f10b 0b01 	add.w	fp, fp, #1
 8002b7e:	e1ff      	b.n	8002f80 <_dtoa_r+0x838>
 8002b80:	2202      	movs	r2, #2
 8002b82:	e731      	b.n	80029e8 <_dtoa_r+0x2a0>
 8002b84:	d02e      	beq.n	8002be4 <_dtoa_r+0x49c>
 8002b86:	f1cb 0300 	rsb	r3, fp, #0
 8002b8a:	4aae      	ldr	r2, [pc, #696]	; (8002e44 <_dtoa_r+0x6fc>)
 8002b8c:	f003 010f 	and.w	r1, r3, #15
 8002b90:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002b94:	ed92 7b00 	vldr	d7, [r2]
 8002b98:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8002b9c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002ba0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8002ba4:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8002ba8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8002bac:	49a6      	ldr	r1, [pc, #664]	; (8002e48 <_dtoa_r+0x700>)
 8002bae:	111b      	asrs	r3, r3, #4
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	b93b      	cbnz	r3, 8002bc6 <_dtoa_r+0x47e>
 8002bb6:	2800      	cmp	r0, #0
 8002bb8:	f43f af6b 	beq.w	8002a92 <_dtoa_r+0x34a>
 8002bbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002bc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002bc4:	e765      	b.n	8002a92 <_dtoa_r+0x34a>
 8002bc6:	07dd      	lsls	r5, r3, #31
 8002bc8:	d509      	bpl.n	8002bde <_dtoa_r+0x496>
 8002bca:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8002bce:	ed91 7b00 	vldr	d7, [r1]
 8002bd2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002bd6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8002bda:	3201      	adds	r2, #1
 8002bdc:	2001      	movs	r0, #1
 8002bde:	105b      	asrs	r3, r3, #1
 8002be0:	3108      	adds	r1, #8
 8002be2:	e7e7      	b.n	8002bb4 <_dtoa_r+0x46c>
 8002be4:	2202      	movs	r2, #2
 8002be6:	e754      	b.n	8002a92 <_dtoa_r+0x34a>
 8002be8:	465b      	mov	r3, fp
 8002bea:	464d      	mov	r5, r9
 8002bec:	e770      	b.n	8002ad0 <_dtoa_r+0x388>
 8002bee:	4a95      	ldr	r2, [pc, #596]	; (8002e44 <_dtoa_r+0x6fc>)
 8002bf0:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8002bf4:	ed12 4b02 	vldr	d4, [r2, #-8]
 8002bf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002bfa:	ec41 0b17 	vmov	d7, r0, r1
 8002bfe:	b35a      	cbz	r2, 8002c58 <_dtoa_r+0x510>
 8002c00:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8002c04:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8002c08:	9e04      	ldr	r6, [sp, #16]
 8002c0a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8002c0e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8002c12:	ee35 7b47 	vsub.f64	d7, d5, d7
 8002c16:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8002c1a:	ee14 2a90 	vmov	r2, s9
 8002c1e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8002c22:	3230      	adds	r2, #48	; 0x30
 8002c24:	ee36 6b45 	vsub.f64	d6, d6, d5
 8002c28:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c30:	f806 2b01 	strb.w	r2, [r6], #1
 8002c34:	d43b      	bmi.n	8002cae <_dtoa_r+0x566>
 8002c36:	ee32 5b46 	vsub.f64	d5, d2, d6
 8002c3a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8002c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c42:	d472      	bmi.n	8002d2a <_dtoa_r+0x5e2>
 8002c44:	9a04      	ldr	r2, [sp, #16]
 8002c46:	1ab2      	subs	r2, r6, r2
 8002c48:	4295      	cmp	r5, r2
 8002c4a:	f77f af68 	ble.w	8002b1e <_dtoa_r+0x3d6>
 8002c4e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8002c52:	ee26 6b03 	vmul.f64	d6, d6, d3
 8002c56:	e7de      	b.n	8002c16 <_dtoa_r+0x4ce>
 8002c58:	9a04      	ldr	r2, [sp, #16]
 8002c5a:	ee24 7b07 	vmul.f64	d7, d4, d7
 8002c5e:	1956      	adds	r6, r2, r5
 8002c60:	4611      	mov	r1, r2
 8002c62:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8002c66:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8002c6a:	ee14 2a90 	vmov	r2, s9
 8002c6e:	3230      	adds	r2, #48	; 0x30
 8002c70:	f801 2b01 	strb.w	r2, [r1], #1
 8002c74:	42b1      	cmp	r1, r6
 8002c76:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8002c7a:	ee36 6b45 	vsub.f64	d6, d6, d5
 8002c7e:	d11a      	bne.n	8002cb6 <_dtoa_r+0x56e>
 8002c80:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8002c84:	ee37 4b05 	vadd.f64	d4, d7, d5
 8002c88:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8002c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c90:	dc4b      	bgt.n	8002d2a <_dtoa_r+0x5e2>
 8002c92:	ee35 7b47 	vsub.f64	d7, d5, d7
 8002c96:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c9e:	f57f af3e 	bpl.w	8002b1e <_dtoa_r+0x3d6>
 8002ca2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8002ca6:	2a30      	cmp	r2, #48	; 0x30
 8002ca8:	f106 31ff 	add.w	r1, r6, #4294967295
 8002cac:	d001      	beq.n	8002cb2 <_dtoa_r+0x56a>
 8002cae:	469b      	mov	fp, r3
 8002cb0:	e02a      	b.n	8002d08 <_dtoa_r+0x5c0>
 8002cb2:	460e      	mov	r6, r1
 8002cb4:	e7f5      	b.n	8002ca2 <_dtoa_r+0x55a>
 8002cb6:	ee26 6b03 	vmul.f64	d6, d6, d3
 8002cba:	e7d4      	b.n	8002c66 <_dtoa_r+0x51e>
 8002cbc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002cc0:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8002cc4:	9e04      	ldr	r6, [sp, #16]
 8002cc6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8002cca:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8002cce:	ee15 3a10 	vmov	r3, s10
 8002cd2:	3330      	adds	r3, #48	; 0x30
 8002cd4:	f806 3b01 	strb.w	r3, [r6], #1
 8002cd8:	9b04      	ldr	r3, [sp, #16]
 8002cda:	1af3      	subs	r3, r6, r3
 8002cdc:	4599      	cmp	r9, r3
 8002cde:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8002ce2:	eea3 7b46 	vfms.f64	d7, d3, d6
 8002ce6:	d133      	bne.n	8002d50 <_dtoa_r+0x608>
 8002ce8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002cec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf4:	dc18      	bgt.n	8002d28 <_dtoa_r+0x5e0>
 8002cf6:	eeb4 7b46 	vcmp.f64	d7, d6
 8002cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cfe:	d103      	bne.n	8002d08 <_dtoa_r+0x5c0>
 8002d00:	ee15 3a10 	vmov	r3, s10
 8002d04:	07db      	lsls	r3, r3, #31
 8002d06:	d40f      	bmi.n	8002d28 <_dtoa_r+0x5e0>
 8002d08:	9901      	ldr	r1, [sp, #4]
 8002d0a:	4620      	mov	r0, r4
 8002d0c:	f000 fabd 	bl	800328a <_Bfree>
 8002d10:	2300      	movs	r3, #0
 8002d12:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002d14:	7033      	strb	r3, [r6, #0]
 8002d16:	f10b 0301 	add.w	r3, fp, #1
 8002d1a:	6013      	str	r3, [r2, #0]
 8002d1c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f43f ad5b 	beq.w	80027da <_dtoa_r+0x92>
 8002d24:	601e      	str	r6, [r3, #0]
 8002d26:	e558      	b.n	80027da <_dtoa_r+0x92>
 8002d28:	465b      	mov	r3, fp
 8002d2a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8002d2e:	2939      	cmp	r1, #57	; 0x39
 8002d30:	f106 32ff 	add.w	r2, r6, #4294967295
 8002d34:	d106      	bne.n	8002d44 <_dtoa_r+0x5fc>
 8002d36:	9904      	ldr	r1, [sp, #16]
 8002d38:	4291      	cmp	r1, r2
 8002d3a:	d107      	bne.n	8002d4c <_dtoa_r+0x604>
 8002d3c:	2230      	movs	r2, #48	; 0x30
 8002d3e:	700a      	strb	r2, [r1, #0]
 8002d40:	3301      	adds	r3, #1
 8002d42:	460a      	mov	r2, r1
 8002d44:	7811      	ldrb	r1, [r2, #0]
 8002d46:	3101      	adds	r1, #1
 8002d48:	7011      	strb	r1, [r2, #0]
 8002d4a:	e7b0      	b.n	8002cae <_dtoa_r+0x566>
 8002d4c:	4616      	mov	r6, r2
 8002d4e:	e7ec      	b.n	8002d2a <_dtoa_r+0x5e2>
 8002d50:	ee27 7b04 	vmul.f64	d7, d7, d4
 8002d54:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8002d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d5c:	d1b3      	bne.n	8002cc6 <_dtoa_r+0x57e>
 8002d5e:	e7d3      	b.n	8002d08 <_dtoa_r+0x5c0>
 8002d60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d62:	2a00      	cmp	r2, #0
 8002d64:	f000 808d 	beq.w	8002e82 <_dtoa_r+0x73a>
 8002d68:	9a08      	ldr	r2, [sp, #32]
 8002d6a:	2a01      	cmp	r2, #1
 8002d6c:	dc72      	bgt.n	8002e54 <_dtoa_r+0x70c>
 8002d6e:	2f00      	cmp	r7, #0
 8002d70:	d06c      	beq.n	8002e4c <_dtoa_r+0x704>
 8002d72:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8002d76:	4645      	mov	r5, r8
 8002d78:	4656      	mov	r6, sl
 8002d7a:	9a07      	ldr	r2, [sp, #28]
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	441a      	add	r2, r3
 8002d80:	4620      	mov	r0, r4
 8002d82:	449a      	add	sl, r3
 8002d84:	9207      	str	r2, [sp, #28]
 8002d86:	f000 fb20 	bl	80033ca <__i2b>
 8002d8a:	4607      	mov	r7, r0
 8002d8c:	2e00      	cmp	r6, #0
 8002d8e:	dd0b      	ble.n	8002da8 <_dtoa_r+0x660>
 8002d90:	9b07      	ldr	r3, [sp, #28]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	dd08      	ble.n	8002da8 <_dtoa_r+0x660>
 8002d96:	42b3      	cmp	r3, r6
 8002d98:	9a07      	ldr	r2, [sp, #28]
 8002d9a:	bfa8      	it	ge
 8002d9c:	4633      	movge	r3, r6
 8002d9e:	ebaa 0a03 	sub.w	sl, sl, r3
 8002da2:	1af6      	subs	r6, r6, r3
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	9307      	str	r3, [sp, #28]
 8002da8:	f1b8 0f00 	cmp.w	r8, #0
 8002dac:	d01d      	beq.n	8002dea <_dtoa_r+0x6a2>
 8002dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d06a      	beq.n	8002e8a <_dtoa_r+0x742>
 8002db4:	b18d      	cbz	r5, 8002dda <_dtoa_r+0x692>
 8002db6:	4639      	mov	r1, r7
 8002db8:	462a      	mov	r2, r5
 8002dba:	4620      	mov	r0, r4
 8002dbc:	f000 fba4 	bl	8003508 <__pow5mult>
 8002dc0:	9a01      	ldr	r2, [sp, #4]
 8002dc2:	4601      	mov	r1, r0
 8002dc4:	4607      	mov	r7, r0
 8002dc6:	4620      	mov	r0, r4
 8002dc8:	f000 fb08 	bl	80033dc <__multiply>
 8002dcc:	9901      	ldr	r1, [sp, #4]
 8002dce:	900c      	str	r0, [sp, #48]	; 0x30
 8002dd0:	4620      	mov	r0, r4
 8002dd2:	f000 fa5a 	bl	800328a <_Bfree>
 8002dd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002dd8:	9301      	str	r3, [sp, #4]
 8002dda:	ebb8 0205 	subs.w	r2, r8, r5
 8002dde:	d004      	beq.n	8002dea <_dtoa_r+0x6a2>
 8002de0:	9901      	ldr	r1, [sp, #4]
 8002de2:	4620      	mov	r0, r4
 8002de4:	f000 fb90 	bl	8003508 <__pow5mult>
 8002de8:	9001      	str	r0, [sp, #4]
 8002dea:	2101      	movs	r1, #1
 8002dec:	4620      	mov	r0, r4
 8002dee:	f000 faec 	bl	80033ca <__i2b>
 8002df2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002df4:	4605      	mov	r5, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 81ca 	beq.w	8003190 <_dtoa_r+0xa48>
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4601      	mov	r1, r0
 8002e00:	4620      	mov	r0, r4
 8002e02:	f000 fb81 	bl	8003508 <__pow5mult>
 8002e06:	9b08      	ldr	r3, [sp, #32]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	4605      	mov	r5, r0
 8002e0c:	dc44      	bgt.n	8002e98 <_dtoa_r+0x750>
 8002e0e:	9b02      	ldr	r3, [sp, #8]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d13c      	bne.n	8002e8e <_dtoa_r+0x746>
 8002e14:	9b03      	ldr	r3, [sp, #12]
 8002e16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d137      	bne.n	8002e8e <_dtoa_r+0x746>
 8002e1e:	9b03      	ldr	r3, [sp, #12]
 8002e20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e24:	0d1b      	lsrs	r3, r3, #20
 8002e26:	051b      	lsls	r3, r3, #20
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d033      	beq.n	8002e94 <_dtoa_r+0x74c>
 8002e2c:	9b07      	ldr	r3, [sp, #28]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	f10a 0a01 	add.w	sl, sl, #1
 8002e34:	9307      	str	r3, [sp, #28]
 8002e36:	f04f 0801 	mov.w	r8, #1
 8002e3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002e3c:	bb73      	cbnz	r3, 8002e9c <_dtoa_r+0x754>
 8002e3e:	2001      	movs	r0, #1
 8002e40:	e034      	b.n	8002eac <_dtoa_r+0x764>
 8002e42:	bf00      	nop
 8002e44:	08004130 	.word	0x08004130
 8002e48:	08004108 	.word	0x08004108
 8002e4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002e4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8002e52:	e790      	b.n	8002d76 <_dtoa_r+0x62e>
 8002e54:	f109 35ff 	add.w	r5, r9, #4294967295
 8002e58:	45a8      	cmp	r8, r5
 8002e5a:	bfbf      	itttt	lt
 8002e5c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8002e5e:	eba5 0808 	sublt.w	r8, r5, r8
 8002e62:	4443      	addlt	r3, r8
 8002e64:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8002e66:	bfb6      	itet	lt
 8002e68:	46a8      	movlt	r8, r5
 8002e6a:	eba8 0505 	subge.w	r5, r8, r5
 8002e6e:	2500      	movlt	r5, #0
 8002e70:	f1b9 0f00 	cmp.w	r9, #0
 8002e74:	bfb9      	ittee	lt
 8002e76:	ebaa 0609 	sublt.w	r6, sl, r9
 8002e7a:	2300      	movlt	r3, #0
 8002e7c:	4656      	movge	r6, sl
 8002e7e:	464b      	movge	r3, r9
 8002e80:	e77b      	b.n	8002d7a <_dtoa_r+0x632>
 8002e82:	4645      	mov	r5, r8
 8002e84:	4656      	mov	r6, sl
 8002e86:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002e88:	e780      	b.n	8002d8c <_dtoa_r+0x644>
 8002e8a:	4642      	mov	r2, r8
 8002e8c:	e7a8      	b.n	8002de0 <_dtoa_r+0x698>
 8002e8e:	f04f 0800 	mov.w	r8, #0
 8002e92:	e7d2      	b.n	8002e3a <_dtoa_r+0x6f2>
 8002e94:	4698      	mov	r8, r3
 8002e96:	e7d0      	b.n	8002e3a <_dtoa_r+0x6f2>
 8002e98:	f04f 0800 	mov.w	r8, #0
 8002e9c:	692b      	ldr	r3, [r5, #16]
 8002e9e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8002ea2:	6918      	ldr	r0, [r3, #16]
 8002ea4:	f000 fa43 	bl	800332e <__hi0bits>
 8002ea8:	f1c0 0020 	rsb	r0, r0, #32
 8002eac:	9b07      	ldr	r3, [sp, #28]
 8002eae:	4418      	add	r0, r3
 8002eb0:	f010 001f 	ands.w	r0, r0, #31
 8002eb4:	d047      	beq.n	8002f46 <_dtoa_r+0x7fe>
 8002eb6:	f1c0 0320 	rsb	r3, r0, #32
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	dd3b      	ble.n	8002f36 <_dtoa_r+0x7ee>
 8002ebe:	9b07      	ldr	r3, [sp, #28]
 8002ec0:	f1c0 001c 	rsb	r0, r0, #28
 8002ec4:	4482      	add	sl, r0
 8002ec6:	4406      	add	r6, r0
 8002ec8:	4403      	add	r3, r0
 8002eca:	9307      	str	r3, [sp, #28]
 8002ecc:	f1ba 0f00 	cmp.w	sl, #0
 8002ed0:	dd05      	ble.n	8002ede <_dtoa_r+0x796>
 8002ed2:	4652      	mov	r2, sl
 8002ed4:	9901      	ldr	r1, [sp, #4]
 8002ed6:	4620      	mov	r0, r4
 8002ed8:	f000 fb64 	bl	80035a4 <__lshift>
 8002edc:	9001      	str	r0, [sp, #4]
 8002ede:	9b07      	ldr	r3, [sp, #28]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	dd05      	ble.n	8002ef0 <_dtoa_r+0x7a8>
 8002ee4:	4629      	mov	r1, r5
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	4620      	mov	r0, r4
 8002eea:	f000 fb5b 	bl	80035a4 <__lshift>
 8002eee:	4605      	mov	r5, r0
 8002ef0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002ef2:	b353      	cbz	r3, 8002f4a <_dtoa_r+0x802>
 8002ef4:	4629      	mov	r1, r5
 8002ef6:	9801      	ldr	r0, [sp, #4]
 8002ef8:	f000 fba8 	bl	800364c <__mcmp>
 8002efc:	2800      	cmp	r0, #0
 8002efe:	da24      	bge.n	8002f4a <_dtoa_r+0x802>
 8002f00:	2300      	movs	r3, #0
 8002f02:	220a      	movs	r2, #10
 8002f04:	9901      	ldr	r1, [sp, #4]
 8002f06:	4620      	mov	r0, r4
 8002f08:	f000 f9d6 	bl	80032b8 <__multadd>
 8002f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f0e:	9001      	str	r0, [sp, #4]
 8002f10:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 8142 	beq.w	800319e <_dtoa_r+0xa56>
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	4639      	mov	r1, r7
 8002f1e:	220a      	movs	r2, #10
 8002f20:	4620      	mov	r0, r4
 8002f22:	f000 f9c9 	bl	80032b8 <__multadd>
 8002f26:	9b06      	ldr	r3, [sp, #24]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	4607      	mov	r7, r0
 8002f2c:	dc4b      	bgt.n	8002fc6 <_dtoa_r+0x87e>
 8002f2e:	9b08      	ldr	r3, [sp, #32]
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	dd48      	ble.n	8002fc6 <_dtoa_r+0x87e>
 8002f34:	e011      	b.n	8002f5a <_dtoa_r+0x812>
 8002f36:	d0c9      	beq.n	8002ecc <_dtoa_r+0x784>
 8002f38:	9a07      	ldr	r2, [sp, #28]
 8002f3a:	331c      	adds	r3, #28
 8002f3c:	441a      	add	r2, r3
 8002f3e:	449a      	add	sl, r3
 8002f40:	441e      	add	r6, r3
 8002f42:	4613      	mov	r3, r2
 8002f44:	e7c1      	b.n	8002eca <_dtoa_r+0x782>
 8002f46:	4603      	mov	r3, r0
 8002f48:	e7f6      	b.n	8002f38 <_dtoa_r+0x7f0>
 8002f4a:	f1b9 0f00 	cmp.w	r9, #0
 8002f4e:	dc34      	bgt.n	8002fba <_dtoa_r+0x872>
 8002f50:	9b08      	ldr	r3, [sp, #32]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	dd31      	ble.n	8002fba <_dtoa_r+0x872>
 8002f56:	f8cd 9018 	str.w	r9, [sp, #24]
 8002f5a:	9b06      	ldr	r3, [sp, #24]
 8002f5c:	b963      	cbnz	r3, 8002f78 <_dtoa_r+0x830>
 8002f5e:	4629      	mov	r1, r5
 8002f60:	2205      	movs	r2, #5
 8002f62:	4620      	mov	r0, r4
 8002f64:	f000 f9a8 	bl	80032b8 <__multadd>
 8002f68:	4601      	mov	r1, r0
 8002f6a:	4605      	mov	r5, r0
 8002f6c:	9801      	ldr	r0, [sp, #4]
 8002f6e:	f000 fb6d 	bl	800364c <__mcmp>
 8002f72:	2800      	cmp	r0, #0
 8002f74:	f73f adfc 	bgt.w	8002b70 <_dtoa_r+0x428>
 8002f78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f7a:	9e04      	ldr	r6, [sp, #16]
 8002f7c:	ea6f 0b03 	mvn.w	fp, r3
 8002f80:	f04f 0900 	mov.w	r9, #0
 8002f84:	4629      	mov	r1, r5
 8002f86:	4620      	mov	r0, r4
 8002f88:	f000 f97f 	bl	800328a <_Bfree>
 8002f8c:	2f00      	cmp	r7, #0
 8002f8e:	f43f aebb 	beq.w	8002d08 <_dtoa_r+0x5c0>
 8002f92:	f1b9 0f00 	cmp.w	r9, #0
 8002f96:	d005      	beq.n	8002fa4 <_dtoa_r+0x85c>
 8002f98:	45b9      	cmp	r9, r7
 8002f9a:	d003      	beq.n	8002fa4 <_dtoa_r+0x85c>
 8002f9c:	4649      	mov	r1, r9
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	f000 f973 	bl	800328a <_Bfree>
 8002fa4:	4639      	mov	r1, r7
 8002fa6:	4620      	mov	r0, r4
 8002fa8:	f000 f96f 	bl	800328a <_Bfree>
 8002fac:	e6ac      	b.n	8002d08 <_dtoa_r+0x5c0>
 8002fae:	2500      	movs	r5, #0
 8002fb0:	462f      	mov	r7, r5
 8002fb2:	e7e1      	b.n	8002f78 <_dtoa_r+0x830>
 8002fb4:	469b      	mov	fp, r3
 8002fb6:	462f      	mov	r7, r5
 8002fb8:	e5da      	b.n	8002b70 <_dtoa_r+0x428>
 8002fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fbc:	f8cd 9018 	str.w	r9, [sp, #24]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 80f3 	beq.w	80031ac <_dtoa_r+0xa64>
 8002fc6:	2e00      	cmp	r6, #0
 8002fc8:	dd05      	ble.n	8002fd6 <_dtoa_r+0x88e>
 8002fca:	4639      	mov	r1, r7
 8002fcc:	4632      	mov	r2, r6
 8002fce:	4620      	mov	r0, r4
 8002fd0:	f000 fae8 	bl	80035a4 <__lshift>
 8002fd4:	4607      	mov	r7, r0
 8002fd6:	f1b8 0f00 	cmp.w	r8, #0
 8002fda:	d04c      	beq.n	8003076 <_dtoa_r+0x92e>
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	4620      	mov	r0, r4
 8002fe0:	f000 f91f 	bl	8003222 <_Balloc>
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	3202      	adds	r2, #2
 8002fe8:	4606      	mov	r6, r0
 8002fea:	0092      	lsls	r2, r2, #2
 8002fec:	f107 010c 	add.w	r1, r7, #12
 8002ff0:	300c      	adds	r0, #12
 8002ff2:	f000 f90b 	bl	800320c <memcpy>
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	4631      	mov	r1, r6
 8002ffa:	4620      	mov	r0, r4
 8002ffc:	f000 fad2 	bl	80035a4 <__lshift>
 8003000:	9b02      	ldr	r3, [sp, #8]
 8003002:	f8dd a010 	ldr.w	sl, [sp, #16]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	46b9      	mov	r9, r7
 800300c:	9307      	str	r3, [sp, #28]
 800300e:	4607      	mov	r7, r0
 8003010:	4629      	mov	r1, r5
 8003012:	9801      	ldr	r0, [sp, #4]
 8003014:	f7ff fb0c 	bl	8002630 <quorem>
 8003018:	4649      	mov	r1, r9
 800301a:	4606      	mov	r6, r0
 800301c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003020:	9801      	ldr	r0, [sp, #4]
 8003022:	f000 fb13 	bl	800364c <__mcmp>
 8003026:	463a      	mov	r2, r7
 8003028:	9002      	str	r0, [sp, #8]
 800302a:	4629      	mov	r1, r5
 800302c:	4620      	mov	r0, r4
 800302e:	f000 fb27 	bl	8003680 <__mdiff>
 8003032:	68c3      	ldr	r3, [r0, #12]
 8003034:	4602      	mov	r2, r0
 8003036:	bb03      	cbnz	r3, 800307a <_dtoa_r+0x932>
 8003038:	4601      	mov	r1, r0
 800303a:	9009      	str	r0, [sp, #36]	; 0x24
 800303c:	9801      	ldr	r0, [sp, #4]
 800303e:	f000 fb05 	bl	800364c <__mcmp>
 8003042:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003044:	4603      	mov	r3, r0
 8003046:	4611      	mov	r1, r2
 8003048:	4620      	mov	r0, r4
 800304a:	9309      	str	r3, [sp, #36]	; 0x24
 800304c:	f000 f91d 	bl	800328a <_Bfree>
 8003050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003052:	b9a3      	cbnz	r3, 800307e <_dtoa_r+0x936>
 8003054:	9a08      	ldr	r2, [sp, #32]
 8003056:	b992      	cbnz	r2, 800307e <_dtoa_r+0x936>
 8003058:	9a07      	ldr	r2, [sp, #28]
 800305a:	b982      	cbnz	r2, 800307e <_dtoa_r+0x936>
 800305c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003060:	d029      	beq.n	80030b6 <_dtoa_r+0x96e>
 8003062:	9b02      	ldr	r3, [sp, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	dd01      	ble.n	800306c <_dtoa_r+0x924>
 8003068:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800306c:	f10a 0601 	add.w	r6, sl, #1
 8003070:	f88a 8000 	strb.w	r8, [sl]
 8003074:	e786      	b.n	8002f84 <_dtoa_r+0x83c>
 8003076:	4638      	mov	r0, r7
 8003078:	e7c2      	b.n	8003000 <_dtoa_r+0x8b8>
 800307a:	2301      	movs	r3, #1
 800307c:	e7e3      	b.n	8003046 <_dtoa_r+0x8fe>
 800307e:	9a02      	ldr	r2, [sp, #8]
 8003080:	2a00      	cmp	r2, #0
 8003082:	db04      	blt.n	800308e <_dtoa_r+0x946>
 8003084:	d124      	bne.n	80030d0 <_dtoa_r+0x988>
 8003086:	9a08      	ldr	r2, [sp, #32]
 8003088:	bb12      	cbnz	r2, 80030d0 <_dtoa_r+0x988>
 800308a:	9a07      	ldr	r2, [sp, #28]
 800308c:	bb02      	cbnz	r2, 80030d0 <_dtoa_r+0x988>
 800308e:	2b00      	cmp	r3, #0
 8003090:	ddec      	ble.n	800306c <_dtoa_r+0x924>
 8003092:	2201      	movs	r2, #1
 8003094:	9901      	ldr	r1, [sp, #4]
 8003096:	4620      	mov	r0, r4
 8003098:	f000 fa84 	bl	80035a4 <__lshift>
 800309c:	4629      	mov	r1, r5
 800309e:	9001      	str	r0, [sp, #4]
 80030a0:	f000 fad4 	bl	800364c <__mcmp>
 80030a4:	2800      	cmp	r0, #0
 80030a6:	dc03      	bgt.n	80030b0 <_dtoa_r+0x968>
 80030a8:	d1e0      	bne.n	800306c <_dtoa_r+0x924>
 80030aa:	f018 0f01 	tst.w	r8, #1
 80030ae:	d0dd      	beq.n	800306c <_dtoa_r+0x924>
 80030b0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80030b4:	d1d8      	bne.n	8003068 <_dtoa_r+0x920>
 80030b6:	2339      	movs	r3, #57	; 0x39
 80030b8:	f10a 0601 	add.w	r6, sl, #1
 80030bc:	f88a 3000 	strb.w	r3, [sl]
 80030c0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80030c4:	2b39      	cmp	r3, #57	; 0x39
 80030c6:	f106 32ff 	add.w	r2, r6, #4294967295
 80030ca:	d04c      	beq.n	8003166 <_dtoa_r+0xa1e>
 80030cc:	3301      	adds	r3, #1
 80030ce:	e051      	b.n	8003174 <_dtoa_r+0xa2c>
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f10a 0601 	add.w	r6, sl, #1
 80030d6:	dd05      	ble.n	80030e4 <_dtoa_r+0x99c>
 80030d8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80030dc:	d0eb      	beq.n	80030b6 <_dtoa_r+0x96e>
 80030de:	f108 0801 	add.w	r8, r8, #1
 80030e2:	e7c5      	b.n	8003070 <_dtoa_r+0x928>
 80030e4:	9b04      	ldr	r3, [sp, #16]
 80030e6:	9a06      	ldr	r2, [sp, #24]
 80030e8:	f806 8c01 	strb.w	r8, [r6, #-1]
 80030ec:	1af3      	subs	r3, r6, r3
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d021      	beq.n	8003136 <_dtoa_r+0x9ee>
 80030f2:	2300      	movs	r3, #0
 80030f4:	220a      	movs	r2, #10
 80030f6:	9901      	ldr	r1, [sp, #4]
 80030f8:	4620      	mov	r0, r4
 80030fa:	f000 f8dd 	bl	80032b8 <__multadd>
 80030fe:	45b9      	cmp	r9, r7
 8003100:	9001      	str	r0, [sp, #4]
 8003102:	f04f 0300 	mov.w	r3, #0
 8003106:	f04f 020a 	mov.w	r2, #10
 800310a:	4649      	mov	r1, r9
 800310c:	4620      	mov	r0, r4
 800310e:	d105      	bne.n	800311c <_dtoa_r+0x9d4>
 8003110:	f000 f8d2 	bl	80032b8 <__multadd>
 8003114:	4681      	mov	r9, r0
 8003116:	4607      	mov	r7, r0
 8003118:	46b2      	mov	sl, r6
 800311a:	e779      	b.n	8003010 <_dtoa_r+0x8c8>
 800311c:	f000 f8cc 	bl	80032b8 <__multadd>
 8003120:	4639      	mov	r1, r7
 8003122:	4681      	mov	r9, r0
 8003124:	2300      	movs	r3, #0
 8003126:	220a      	movs	r2, #10
 8003128:	4620      	mov	r0, r4
 800312a:	f000 f8c5 	bl	80032b8 <__multadd>
 800312e:	4607      	mov	r7, r0
 8003130:	e7f2      	b.n	8003118 <_dtoa_r+0x9d0>
 8003132:	f04f 0900 	mov.w	r9, #0
 8003136:	2201      	movs	r2, #1
 8003138:	9901      	ldr	r1, [sp, #4]
 800313a:	4620      	mov	r0, r4
 800313c:	f000 fa32 	bl	80035a4 <__lshift>
 8003140:	4629      	mov	r1, r5
 8003142:	9001      	str	r0, [sp, #4]
 8003144:	f000 fa82 	bl	800364c <__mcmp>
 8003148:	2800      	cmp	r0, #0
 800314a:	dcb9      	bgt.n	80030c0 <_dtoa_r+0x978>
 800314c:	d102      	bne.n	8003154 <_dtoa_r+0xa0c>
 800314e:	f018 0f01 	tst.w	r8, #1
 8003152:	d1b5      	bne.n	80030c0 <_dtoa_r+0x978>
 8003154:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8003158:	2b30      	cmp	r3, #48	; 0x30
 800315a:	f106 32ff 	add.w	r2, r6, #4294967295
 800315e:	f47f af11 	bne.w	8002f84 <_dtoa_r+0x83c>
 8003162:	4616      	mov	r6, r2
 8003164:	e7f6      	b.n	8003154 <_dtoa_r+0xa0c>
 8003166:	9b04      	ldr	r3, [sp, #16]
 8003168:	4293      	cmp	r3, r2
 800316a:	d105      	bne.n	8003178 <_dtoa_r+0xa30>
 800316c:	9a04      	ldr	r2, [sp, #16]
 800316e:	f10b 0b01 	add.w	fp, fp, #1
 8003172:	2331      	movs	r3, #49	; 0x31
 8003174:	7013      	strb	r3, [r2, #0]
 8003176:	e705      	b.n	8002f84 <_dtoa_r+0x83c>
 8003178:	4616      	mov	r6, r2
 800317a:	e7a1      	b.n	80030c0 <_dtoa_r+0x978>
 800317c:	4b16      	ldr	r3, [pc, #88]	; (80031d8 <_dtoa_r+0xa90>)
 800317e:	f7ff bb48 	b.w	8002812 <_dtoa_r+0xca>
 8003182:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003184:	2b00      	cmp	r3, #0
 8003186:	f47f ab23 	bne.w	80027d0 <_dtoa_r+0x88>
 800318a:	4b14      	ldr	r3, [pc, #80]	; (80031dc <_dtoa_r+0xa94>)
 800318c:	f7ff bb41 	b.w	8002812 <_dtoa_r+0xca>
 8003190:	9b08      	ldr	r3, [sp, #32]
 8003192:	2b01      	cmp	r3, #1
 8003194:	f77f ae3b 	ble.w	8002e0e <_dtoa_r+0x6c6>
 8003198:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800319c:	e64f      	b.n	8002e3e <_dtoa_r+0x6f6>
 800319e:	9b06      	ldr	r3, [sp, #24]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	dc03      	bgt.n	80031ac <_dtoa_r+0xa64>
 80031a4:	9b08      	ldr	r3, [sp, #32]
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	f73f aed7 	bgt.w	8002f5a <_dtoa_r+0x812>
 80031ac:	9e04      	ldr	r6, [sp, #16]
 80031ae:	9801      	ldr	r0, [sp, #4]
 80031b0:	4629      	mov	r1, r5
 80031b2:	f7ff fa3d 	bl	8002630 <quorem>
 80031b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80031ba:	f806 8b01 	strb.w	r8, [r6], #1
 80031be:	9b04      	ldr	r3, [sp, #16]
 80031c0:	9a06      	ldr	r2, [sp, #24]
 80031c2:	1af3      	subs	r3, r6, r3
 80031c4:	429a      	cmp	r2, r3
 80031c6:	ddb4      	ble.n	8003132 <_dtoa_r+0x9ea>
 80031c8:	2300      	movs	r3, #0
 80031ca:	220a      	movs	r2, #10
 80031cc:	9901      	ldr	r1, [sp, #4]
 80031ce:	4620      	mov	r0, r4
 80031d0:	f000 f872 	bl	80032b8 <__multadd>
 80031d4:	9001      	str	r0, [sp, #4]
 80031d6:	e7ea      	b.n	80031ae <_dtoa_r+0xa66>
 80031d8:	080040d0 	.word	0x080040d0
 80031dc:	080040f4 	.word	0x080040f4

080031e0 <_localeconv_r>:
 80031e0:	4b04      	ldr	r3, [pc, #16]	; (80031f4 <_localeconv_r+0x14>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6a18      	ldr	r0, [r3, #32]
 80031e6:	4b04      	ldr	r3, [pc, #16]	; (80031f8 <_localeconv_r+0x18>)
 80031e8:	2800      	cmp	r0, #0
 80031ea:	bf08      	it	eq
 80031ec:	4618      	moveq	r0, r3
 80031ee:	30f0      	adds	r0, #240	; 0xf0
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	200000cc 	.word	0x200000cc
 80031f8:	20000130 	.word	0x20000130

080031fc <malloc>:
 80031fc:	4b02      	ldr	r3, [pc, #8]	; (8003208 <malloc+0xc>)
 80031fe:	4601      	mov	r1, r0
 8003200:	6818      	ldr	r0, [r3, #0]
 8003202:	f000 bb45 	b.w	8003890 <_malloc_r>
 8003206:	bf00      	nop
 8003208:	200000cc 	.word	0x200000cc

0800320c <memcpy>:
 800320c:	b510      	push	{r4, lr}
 800320e:	1e43      	subs	r3, r0, #1
 8003210:	440a      	add	r2, r1
 8003212:	4291      	cmp	r1, r2
 8003214:	d100      	bne.n	8003218 <memcpy+0xc>
 8003216:	bd10      	pop	{r4, pc}
 8003218:	f811 4b01 	ldrb.w	r4, [r1], #1
 800321c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003220:	e7f7      	b.n	8003212 <memcpy+0x6>

08003222 <_Balloc>:
 8003222:	b570      	push	{r4, r5, r6, lr}
 8003224:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003226:	4604      	mov	r4, r0
 8003228:	460e      	mov	r6, r1
 800322a:	b93d      	cbnz	r5, 800323c <_Balloc+0x1a>
 800322c:	2010      	movs	r0, #16
 800322e:	f7ff ffe5 	bl	80031fc <malloc>
 8003232:	6260      	str	r0, [r4, #36]	; 0x24
 8003234:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003238:	6005      	str	r5, [r0, #0]
 800323a:	60c5      	str	r5, [r0, #12]
 800323c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800323e:	68eb      	ldr	r3, [r5, #12]
 8003240:	b183      	cbz	r3, 8003264 <_Balloc+0x42>
 8003242:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800324a:	b9b8      	cbnz	r0, 800327c <_Balloc+0x5a>
 800324c:	2101      	movs	r1, #1
 800324e:	fa01 f506 	lsl.w	r5, r1, r6
 8003252:	1d6a      	adds	r2, r5, #5
 8003254:	0092      	lsls	r2, r2, #2
 8003256:	4620      	mov	r0, r4
 8003258:	f000 fabe 	bl	80037d8 <_calloc_r>
 800325c:	b160      	cbz	r0, 8003278 <_Balloc+0x56>
 800325e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8003262:	e00e      	b.n	8003282 <_Balloc+0x60>
 8003264:	2221      	movs	r2, #33	; 0x21
 8003266:	2104      	movs	r1, #4
 8003268:	4620      	mov	r0, r4
 800326a:	f000 fab5 	bl	80037d8 <_calloc_r>
 800326e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003270:	60e8      	str	r0, [r5, #12]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1e4      	bne.n	8003242 <_Balloc+0x20>
 8003278:	2000      	movs	r0, #0
 800327a:	bd70      	pop	{r4, r5, r6, pc}
 800327c:	6802      	ldr	r2, [r0, #0]
 800327e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8003282:	2300      	movs	r3, #0
 8003284:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003288:	e7f7      	b.n	800327a <_Balloc+0x58>

0800328a <_Bfree>:
 800328a:	b570      	push	{r4, r5, r6, lr}
 800328c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800328e:	4606      	mov	r6, r0
 8003290:	460d      	mov	r5, r1
 8003292:	b93c      	cbnz	r4, 80032a4 <_Bfree+0x1a>
 8003294:	2010      	movs	r0, #16
 8003296:	f7ff ffb1 	bl	80031fc <malloc>
 800329a:	6270      	str	r0, [r6, #36]	; 0x24
 800329c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80032a0:	6004      	str	r4, [r0, #0]
 80032a2:	60c4      	str	r4, [r0, #12]
 80032a4:	b13d      	cbz	r5, 80032b6 <_Bfree+0x2c>
 80032a6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80032a8:	686a      	ldr	r2, [r5, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80032b0:	6029      	str	r1, [r5, #0]
 80032b2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80032b6:	bd70      	pop	{r4, r5, r6, pc}

080032b8 <__multadd>:
 80032b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032bc:	690d      	ldr	r5, [r1, #16]
 80032be:	461f      	mov	r7, r3
 80032c0:	4606      	mov	r6, r0
 80032c2:	460c      	mov	r4, r1
 80032c4:	f101 0c14 	add.w	ip, r1, #20
 80032c8:	2300      	movs	r3, #0
 80032ca:	f8dc 0000 	ldr.w	r0, [ip]
 80032ce:	b281      	uxth	r1, r0
 80032d0:	fb02 7101 	mla	r1, r2, r1, r7
 80032d4:	0c0f      	lsrs	r7, r1, #16
 80032d6:	0c00      	lsrs	r0, r0, #16
 80032d8:	fb02 7000 	mla	r0, r2, r0, r7
 80032dc:	b289      	uxth	r1, r1
 80032de:	3301      	adds	r3, #1
 80032e0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80032e4:	429d      	cmp	r5, r3
 80032e6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80032ea:	f84c 1b04 	str.w	r1, [ip], #4
 80032ee:	dcec      	bgt.n	80032ca <__multadd+0x12>
 80032f0:	b1d7      	cbz	r7, 8003328 <__multadd+0x70>
 80032f2:	68a3      	ldr	r3, [r4, #8]
 80032f4:	42ab      	cmp	r3, r5
 80032f6:	dc12      	bgt.n	800331e <__multadd+0x66>
 80032f8:	6861      	ldr	r1, [r4, #4]
 80032fa:	4630      	mov	r0, r6
 80032fc:	3101      	adds	r1, #1
 80032fe:	f7ff ff90 	bl	8003222 <_Balloc>
 8003302:	6922      	ldr	r2, [r4, #16]
 8003304:	3202      	adds	r2, #2
 8003306:	f104 010c 	add.w	r1, r4, #12
 800330a:	4680      	mov	r8, r0
 800330c:	0092      	lsls	r2, r2, #2
 800330e:	300c      	adds	r0, #12
 8003310:	f7ff ff7c 	bl	800320c <memcpy>
 8003314:	4621      	mov	r1, r4
 8003316:	4630      	mov	r0, r6
 8003318:	f7ff ffb7 	bl	800328a <_Bfree>
 800331c:	4644      	mov	r4, r8
 800331e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003322:	3501      	adds	r5, #1
 8003324:	615f      	str	r7, [r3, #20]
 8003326:	6125      	str	r5, [r4, #16]
 8003328:	4620      	mov	r0, r4
 800332a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800332e <__hi0bits>:
 800332e:	0c02      	lsrs	r2, r0, #16
 8003330:	0412      	lsls	r2, r2, #16
 8003332:	4603      	mov	r3, r0
 8003334:	b9b2      	cbnz	r2, 8003364 <__hi0bits+0x36>
 8003336:	0403      	lsls	r3, r0, #16
 8003338:	2010      	movs	r0, #16
 800333a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800333e:	bf04      	itt	eq
 8003340:	021b      	lsleq	r3, r3, #8
 8003342:	3008      	addeq	r0, #8
 8003344:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003348:	bf04      	itt	eq
 800334a:	011b      	lsleq	r3, r3, #4
 800334c:	3004      	addeq	r0, #4
 800334e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8003352:	bf04      	itt	eq
 8003354:	009b      	lsleq	r3, r3, #2
 8003356:	3002      	addeq	r0, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	db06      	blt.n	800336a <__hi0bits+0x3c>
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	d503      	bpl.n	8003368 <__hi0bits+0x3a>
 8003360:	3001      	adds	r0, #1
 8003362:	4770      	bx	lr
 8003364:	2000      	movs	r0, #0
 8003366:	e7e8      	b.n	800333a <__hi0bits+0xc>
 8003368:	2020      	movs	r0, #32
 800336a:	4770      	bx	lr

0800336c <__lo0bits>:
 800336c:	6803      	ldr	r3, [r0, #0]
 800336e:	f013 0207 	ands.w	r2, r3, #7
 8003372:	4601      	mov	r1, r0
 8003374:	d00b      	beq.n	800338e <__lo0bits+0x22>
 8003376:	07da      	lsls	r2, r3, #31
 8003378:	d423      	bmi.n	80033c2 <__lo0bits+0x56>
 800337a:	0798      	lsls	r0, r3, #30
 800337c:	bf49      	itett	mi
 800337e:	085b      	lsrmi	r3, r3, #1
 8003380:	089b      	lsrpl	r3, r3, #2
 8003382:	2001      	movmi	r0, #1
 8003384:	600b      	strmi	r3, [r1, #0]
 8003386:	bf5c      	itt	pl
 8003388:	600b      	strpl	r3, [r1, #0]
 800338a:	2002      	movpl	r0, #2
 800338c:	4770      	bx	lr
 800338e:	b298      	uxth	r0, r3
 8003390:	b9a8      	cbnz	r0, 80033be <__lo0bits+0x52>
 8003392:	0c1b      	lsrs	r3, r3, #16
 8003394:	2010      	movs	r0, #16
 8003396:	f013 0fff 	tst.w	r3, #255	; 0xff
 800339a:	bf04      	itt	eq
 800339c:	0a1b      	lsreq	r3, r3, #8
 800339e:	3008      	addeq	r0, #8
 80033a0:	071a      	lsls	r2, r3, #28
 80033a2:	bf04      	itt	eq
 80033a4:	091b      	lsreq	r3, r3, #4
 80033a6:	3004      	addeq	r0, #4
 80033a8:	079a      	lsls	r2, r3, #30
 80033aa:	bf04      	itt	eq
 80033ac:	089b      	lsreq	r3, r3, #2
 80033ae:	3002      	addeq	r0, #2
 80033b0:	07da      	lsls	r2, r3, #31
 80033b2:	d402      	bmi.n	80033ba <__lo0bits+0x4e>
 80033b4:	085b      	lsrs	r3, r3, #1
 80033b6:	d006      	beq.n	80033c6 <__lo0bits+0x5a>
 80033b8:	3001      	adds	r0, #1
 80033ba:	600b      	str	r3, [r1, #0]
 80033bc:	4770      	bx	lr
 80033be:	4610      	mov	r0, r2
 80033c0:	e7e9      	b.n	8003396 <__lo0bits+0x2a>
 80033c2:	2000      	movs	r0, #0
 80033c4:	4770      	bx	lr
 80033c6:	2020      	movs	r0, #32
 80033c8:	4770      	bx	lr

080033ca <__i2b>:
 80033ca:	b510      	push	{r4, lr}
 80033cc:	460c      	mov	r4, r1
 80033ce:	2101      	movs	r1, #1
 80033d0:	f7ff ff27 	bl	8003222 <_Balloc>
 80033d4:	2201      	movs	r2, #1
 80033d6:	6144      	str	r4, [r0, #20]
 80033d8:	6102      	str	r2, [r0, #16]
 80033da:	bd10      	pop	{r4, pc}

080033dc <__multiply>:
 80033dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033e0:	4614      	mov	r4, r2
 80033e2:	690a      	ldr	r2, [r1, #16]
 80033e4:	6923      	ldr	r3, [r4, #16]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	bfb8      	it	lt
 80033ea:	460b      	movlt	r3, r1
 80033ec:	4688      	mov	r8, r1
 80033ee:	bfbc      	itt	lt
 80033f0:	46a0      	movlt	r8, r4
 80033f2:	461c      	movlt	r4, r3
 80033f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80033f8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80033fc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8003400:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003404:	eb07 0609 	add.w	r6, r7, r9
 8003408:	42b3      	cmp	r3, r6
 800340a:	bfb8      	it	lt
 800340c:	3101      	addlt	r1, #1
 800340e:	f7ff ff08 	bl	8003222 <_Balloc>
 8003412:	f100 0514 	add.w	r5, r0, #20
 8003416:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800341a:	462b      	mov	r3, r5
 800341c:	2200      	movs	r2, #0
 800341e:	4573      	cmp	r3, lr
 8003420:	d316      	bcc.n	8003450 <__multiply+0x74>
 8003422:	f104 0214 	add.w	r2, r4, #20
 8003426:	f108 0114 	add.w	r1, r8, #20
 800342a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800342e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	9b00      	ldr	r3, [sp, #0]
 8003436:	9201      	str	r2, [sp, #4]
 8003438:	4293      	cmp	r3, r2
 800343a:	d80c      	bhi.n	8003456 <__multiply+0x7a>
 800343c:	2e00      	cmp	r6, #0
 800343e:	dd03      	ble.n	8003448 <__multiply+0x6c>
 8003440:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8003444:	2b00      	cmp	r3, #0
 8003446:	d05d      	beq.n	8003504 <__multiply+0x128>
 8003448:	6106      	str	r6, [r0, #16]
 800344a:	b003      	add	sp, #12
 800344c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003450:	f843 2b04 	str.w	r2, [r3], #4
 8003454:	e7e3      	b.n	800341e <__multiply+0x42>
 8003456:	f8b2 b000 	ldrh.w	fp, [r2]
 800345a:	f1bb 0f00 	cmp.w	fp, #0
 800345e:	d023      	beq.n	80034a8 <__multiply+0xcc>
 8003460:	4689      	mov	r9, r1
 8003462:	46ac      	mov	ip, r5
 8003464:	f04f 0800 	mov.w	r8, #0
 8003468:	f859 4b04 	ldr.w	r4, [r9], #4
 800346c:	f8dc a000 	ldr.w	sl, [ip]
 8003470:	b2a3      	uxth	r3, r4
 8003472:	fa1f fa8a 	uxth.w	sl, sl
 8003476:	fb0b a303 	mla	r3, fp, r3, sl
 800347a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800347e:	f8dc 4000 	ldr.w	r4, [ip]
 8003482:	4443      	add	r3, r8
 8003484:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8003488:	fb0b 840a 	mla	r4, fp, sl, r8
 800348c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8003490:	46e2      	mov	sl, ip
 8003492:	b29b      	uxth	r3, r3
 8003494:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003498:	454f      	cmp	r7, r9
 800349a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800349e:	f84a 3b04 	str.w	r3, [sl], #4
 80034a2:	d82b      	bhi.n	80034fc <__multiply+0x120>
 80034a4:	f8cc 8004 	str.w	r8, [ip, #4]
 80034a8:	9b01      	ldr	r3, [sp, #4]
 80034aa:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80034ae:	3204      	adds	r2, #4
 80034b0:	f1ba 0f00 	cmp.w	sl, #0
 80034b4:	d020      	beq.n	80034f8 <__multiply+0x11c>
 80034b6:	682b      	ldr	r3, [r5, #0]
 80034b8:	4689      	mov	r9, r1
 80034ba:	46a8      	mov	r8, r5
 80034bc:	f04f 0b00 	mov.w	fp, #0
 80034c0:	f8b9 c000 	ldrh.w	ip, [r9]
 80034c4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80034c8:	fb0a 440c 	mla	r4, sl, ip, r4
 80034cc:	445c      	add	r4, fp
 80034ce:	46c4      	mov	ip, r8
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80034d6:	f84c 3b04 	str.w	r3, [ip], #4
 80034da:	f859 3b04 	ldr.w	r3, [r9], #4
 80034de:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80034e2:	0c1b      	lsrs	r3, r3, #16
 80034e4:	fb0a b303 	mla	r3, sl, r3, fp
 80034e8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80034ec:	454f      	cmp	r7, r9
 80034ee:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80034f2:	d805      	bhi.n	8003500 <__multiply+0x124>
 80034f4:	f8c8 3004 	str.w	r3, [r8, #4]
 80034f8:	3504      	adds	r5, #4
 80034fa:	e79b      	b.n	8003434 <__multiply+0x58>
 80034fc:	46d4      	mov	ip, sl
 80034fe:	e7b3      	b.n	8003468 <__multiply+0x8c>
 8003500:	46e0      	mov	r8, ip
 8003502:	e7dd      	b.n	80034c0 <__multiply+0xe4>
 8003504:	3e01      	subs	r6, #1
 8003506:	e799      	b.n	800343c <__multiply+0x60>

08003508 <__pow5mult>:
 8003508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800350c:	4615      	mov	r5, r2
 800350e:	f012 0203 	ands.w	r2, r2, #3
 8003512:	4606      	mov	r6, r0
 8003514:	460f      	mov	r7, r1
 8003516:	d007      	beq.n	8003528 <__pow5mult+0x20>
 8003518:	3a01      	subs	r2, #1
 800351a:	4c21      	ldr	r4, [pc, #132]	; (80035a0 <__pow5mult+0x98>)
 800351c:	2300      	movs	r3, #0
 800351e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003522:	f7ff fec9 	bl	80032b8 <__multadd>
 8003526:	4607      	mov	r7, r0
 8003528:	10ad      	asrs	r5, r5, #2
 800352a:	d035      	beq.n	8003598 <__pow5mult+0x90>
 800352c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800352e:	b93c      	cbnz	r4, 8003540 <__pow5mult+0x38>
 8003530:	2010      	movs	r0, #16
 8003532:	f7ff fe63 	bl	80031fc <malloc>
 8003536:	6270      	str	r0, [r6, #36]	; 0x24
 8003538:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800353c:	6004      	str	r4, [r0, #0]
 800353e:	60c4      	str	r4, [r0, #12]
 8003540:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003544:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003548:	b94c      	cbnz	r4, 800355e <__pow5mult+0x56>
 800354a:	f240 2171 	movw	r1, #625	; 0x271
 800354e:	4630      	mov	r0, r6
 8003550:	f7ff ff3b 	bl	80033ca <__i2b>
 8003554:	2300      	movs	r3, #0
 8003556:	f8c8 0008 	str.w	r0, [r8, #8]
 800355a:	4604      	mov	r4, r0
 800355c:	6003      	str	r3, [r0, #0]
 800355e:	f04f 0800 	mov.w	r8, #0
 8003562:	07eb      	lsls	r3, r5, #31
 8003564:	d50a      	bpl.n	800357c <__pow5mult+0x74>
 8003566:	4639      	mov	r1, r7
 8003568:	4622      	mov	r2, r4
 800356a:	4630      	mov	r0, r6
 800356c:	f7ff ff36 	bl	80033dc <__multiply>
 8003570:	4639      	mov	r1, r7
 8003572:	4681      	mov	r9, r0
 8003574:	4630      	mov	r0, r6
 8003576:	f7ff fe88 	bl	800328a <_Bfree>
 800357a:	464f      	mov	r7, r9
 800357c:	106d      	asrs	r5, r5, #1
 800357e:	d00b      	beq.n	8003598 <__pow5mult+0x90>
 8003580:	6820      	ldr	r0, [r4, #0]
 8003582:	b938      	cbnz	r0, 8003594 <__pow5mult+0x8c>
 8003584:	4622      	mov	r2, r4
 8003586:	4621      	mov	r1, r4
 8003588:	4630      	mov	r0, r6
 800358a:	f7ff ff27 	bl	80033dc <__multiply>
 800358e:	6020      	str	r0, [r4, #0]
 8003590:	f8c0 8000 	str.w	r8, [r0]
 8003594:	4604      	mov	r4, r0
 8003596:	e7e4      	b.n	8003562 <__pow5mult+0x5a>
 8003598:	4638      	mov	r0, r7
 800359a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800359e:	bf00      	nop
 80035a0:	080041f8 	.word	0x080041f8

080035a4 <__lshift>:
 80035a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035a8:	460c      	mov	r4, r1
 80035aa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80035ae:	6923      	ldr	r3, [r4, #16]
 80035b0:	6849      	ldr	r1, [r1, #4]
 80035b2:	eb0a 0903 	add.w	r9, sl, r3
 80035b6:	68a3      	ldr	r3, [r4, #8]
 80035b8:	4607      	mov	r7, r0
 80035ba:	4616      	mov	r6, r2
 80035bc:	f109 0501 	add.w	r5, r9, #1
 80035c0:	42ab      	cmp	r3, r5
 80035c2:	db32      	blt.n	800362a <__lshift+0x86>
 80035c4:	4638      	mov	r0, r7
 80035c6:	f7ff fe2c 	bl	8003222 <_Balloc>
 80035ca:	2300      	movs	r3, #0
 80035cc:	4680      	mov	r8, r0
 80035ce:	f100 0114 	add.w	r1, r0, #20
 80035d2:	461a      	mov	r2, r3
 80035d4:	4553      	cmp	r3, sl
 80035d6:	db2b      	blt.n	8003630 <__lshift+0x8c>
 80035d8:	6920      	ldr	r0, [r4, #16]
 80035da:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80035de:	f104 0314 	add.w	r3, r4, #20
 80035e2:	f016 021f 	ands.w	r2, r6, #31
 80035e6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80035ea:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80035ee:	d025      	beq.n	800363c <__lshift+0x98>
 80035f0:	f1c2 0e20 	rsb	lr, r2, #32
 80035f4:	2000      	movs	r0, #0
 80035f6:	681e      	ldr	r6, [r3, #0]
 80035f8:	468a      	mov	sl, r1
 80035fa:	4096      	lsls	r6, r2
 80035fc:	4330      	orrs	r0, r6
 80035fe:	f84a 0b04 	str.w	r0, [sl], #4
 8003602:	f853 0b04 	ldr.w	r0, [r3], #4
 8003606:	459c      	cmp	ip, r3
 8003608:	fa20 f00e 	lsr.w	r0, r0, lr
 800360c:	d814      	bhi.n	8003638 <__lshift+0x94>
 800360e:	6048      	str	r0, [r1, #4]
 8003610:	b108      	cbz	r0, 8003616 <__lshift+0x72>
 8003612:	f109 0502 	add.w	r5, r9, #2
 8003616:	3d01      	subs	r5, #1
 8003618:	4638      	mov	r0, r7
 800361a:	f8c8 5010 	str.w	r5, [r8, #16]
 800361e:	4621      	mov	r1, r4
 8003620:	f7ff fe33 	bl	800328a <_Bfree>
 8003624:	4640      	mov	r0, r8
 8003626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800362a:	3101      	adds	r1, #1
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	e7c7      	b.n	80035c0 <__lshift+0x1c>
 8003630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003634:	3301      	adds	r3, #1
 8003636:	e7cd      	b.n	80035d4 <__lshift+0x30>
 8003638:	4651      	mov	r1, sl
 800363a:	e7dc      	b.n	80035f6 <__lshift+0x52>
 800363c:	3904      	subs	r1, #4
 800363e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003642:	f841 2f04 	str.w	r2, [r1, #4]!
 8003646:	459c      	cmp	ip, r3
 8003648:	d8f9      	bhi.n	800363e <__lshift+0x9a>
 800364a:	e7e4      	b.n	8003616 <__lshift+0x72>

0800364c <__mcmp>:
 800364c:	6903      	ldr	r3, [r0, #16]
 800364e:	690a      	ldr	r2, [r1, #16]
 8003650:	1a9b      	subs	r3, r3, r2
 8003652:	b530      	push	{r4, r5, lr}
 8003654:	d10c      	bne.n	8003670 <__mcmp+0x24>
 8003656:	0092      	lsls	r2, r2, #2
 8003658:	3014      	adds	r0, #20
 800365a:	3114      	adds	r1, #20
 800365c:	1884      	adds	r4, r0, r2
 800365e:	4411      	add	r1, r2
 8003660:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003664:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003668:	4295      	cmp	r5, r2
 800366a:	d003      	beq.n	8003674 <__mcmp+0x28>
 800366c:	d305      	bcc.n	800367a <__mcmp+0x2e>
 800366e:	2301      	movs	r3, #1
 8003670:	4618      	mov	r0, r3
 8003672:	bd30      	pop	{r4, r5, pc}
 8003674:	42a0      	cmp	r0, r4
 8003676:	d3f3      	bcc.n	8003660 <__mcmp+0x14>
 8003678:	e7fa      	b.n	8003670 <__mcmp+0x24>
 800367a:	f04f 33ff 	mov.w	r3, #4294967295
 800367e:	e7f7      	b.n	8003670 <__mcmp+0x24>

08003680 <__mdiff>:
 8003680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003684:	460d      	mov	r5, r1
 8003686:	4607      	mov	r7, r0
 8003688:	4611      	mov	r1, r2
 800368a:	4628      	mov	r0, r5
 800368c:	4614      	mov	r4, r2
 800368e:	f7ff ffdd 	bl	800364c <__mcmp>
 8003692:	1e06      	subs	r6, r0, #0
 8003694:	d108      	bne.n	80036a8 <__mdiff+0x28>
 8003696:	4631      	mov	r1, r6
 8003698:	4638      	mov	r0, r7
 800369a:	f7ff fdc2 	bl	8003222 <_Balloc>
 800369e:	2301      	movs	r3, #1
 80036a0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80036a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036a8:	bfa4      	itt	ge
 80036aa:	4623      	movge	r3, r4
 80036ac:	462c      	movge	r4, r5
 80036ae:	4638      	mov	r0, r7
 80036b0:	6861      	ldr	r1, [r4, #4]
 80036b2:	bfa6      	itte	ge
 80036b4:	461d      	movge	r5, r3
 80036b6:	2600      	movge	r6, #0
 80036b8:	2601      	movlt	r6, #1
 80036ba:	f7ff fdb2 	bl	8003222 <_Balloc>
 80036be:	692b      	ldr	r3, [r5, #16]
 80036c0:	60c6      	str	r6, [r0, #12]
 80036c2:	6926      	ldr	r6, [r4, #16]
 80036c4:	f105 0914 	add.w	r9, r5, #20
 80036c8:	f104 0214 	add.w	r2, r4, #20
 80036cc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80036d0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80036d4:	f100 0514 	add.w	r5, r0, #20
 80036d8:	f04f 0e00 	mov.w	lr, #0
 80036dc:	f852 ab04 	ldr.w	sl, [r2], #4
 80036e0:	f859 4b04 	ldr.w	r4, [r9], #4
 80036e4:	fa1e f18a 	uxtah	r1, lr, sl
 80036e8:	b2a3      	uxth	r3, r4
 80036ea:	1ac9      	subs	r1, r1, r3
 80036ec:	0c23      	lsrs	r3, r4, #16
 80036ee:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80036f2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80036f6:	b289      	uxth	r1, r1
 80036f8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80036fc:	45c8      	cmp	r8, r9
 80036fe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8003702:	4694      	mov	ip, r2
 8003704:	f845 3b04 	str.w	r3, [r5], #4
 8003708:	d8e8      	bhi.n	80036dc <__mdiff+0x5c>
 800370a:	45bc      	cmp	ip, r7
 800370c:	d304      	bcc.n	8003718 <__mdiff+0x98>
 800370e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8003712:	b183      	cbz	r3, 8003736 <__mdiff+0xb6>
 8003714:	6106      	str	r6, [r0, #16]
 8003716:	e7c5      	b.n	80036a4 <__mdiff+0x24>
 8003718:	f85c 1b04 	ldr.w	r1, [ip], #4
 800371c:	fa1e f381 	uxtah	r3, lr, r1
 8003720:	141a      	asrs	r2, r3, #16
 8003722:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8003726:	b29b      	uxth	r3, r3
 8003728:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800372c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8003730:	f845 3b04 	str.w	r3, [r5], #4
 8003734:	e7e9      	b.n	800370a <__mdiff+0x8a>
 8003736:	3e01      	subs	r6, #1
 8003738:	e7e9      	b.n	800370e <__mdiff+0x8e>

0800373a <__d2b>:
 800373a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800373e:	460e      	mov	r6, r1
 8003740:	2101      	movs	r1, #1
 8003742:	ec59 8b10 	vmov	r8, r9, d0
 8003746:	4615      	mov	r5, r2
 8003748:	f7ff fd6b 	bl	8003222 <_Balloc>
 800374c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003750:	4607      	mov	r7, r0
 8003752:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003756:	bb34      	cbnz	r4, 80037a6 <__d2b+0x6c>
 8003758:	9301      	str	r3, [sp, #4]
 800375a:	f1b8 0300 	subs.w	r3, r8, #0
 800375e:	d027      	beq.n	80037b0 <__d2b+0x76>
 8003760:	a802      	add	r0, sp, #8
 8003762:	f840 3d08 	str.w	r3, [r0, #-8]!
 8003766:	f7ff fe01 	bl	800336c <__lo0bits>
 800376a:	9900      	ldr	r1, [sp, #0]
 800376c:	b1f0      	cbz	r0, 80037ac <__d2b+0x72>
 800376e:	9a01      	ldr	r2, [sp, #4]
 8003770:	f1c0 0320 	rsb	r3, r0, #32
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	430b      	orrs	r3, r1
 800377a:	40c2      	lsrs	r2, r0
 800377c:	617b      	str	r3, [r7, #20]
 800377e:	9201      	str	r2, [sp, #4]
 8003780:	9b01      	ldr	r3, [sp, #4]
 8003782:	61bb      	str	r3, [r7, #24]
 8003784:	2b00      	cmp	r3, #0
 8003786:	bf14      	ite	ne
 8003788:	2102      	movne	r1, #2
 800378a:	2101      	moveq	r1, #1
 800378c:	6139      	str	r1, [r7, #16]
 800378e:	b1c4      	cbz	r4, 80037c2 <__d2b+0x88>
 8003790:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8003794:	4404      	add	r4, r0
 8003796:	6034      	str	r4, [r6, #0]
 8003798:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800379c:	6028      	str	r0, [r5, #0]
 800379e:	4638      	mov	r0, r7
 80037a0:	b003      	add	sp, #12
 80037a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80037a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037aa:	e7d5      	b.n	8003758 <__d2b+0x1e>
 80037ac:	6179      	str	r1, [r7, #20]
 80037ae:	e7e7      	b.n	8003780 <__d2b+0x46>
 80037b0:	a801      	add	r0, sp, #4
 80037b2:	f7ff fddb 	bl	800336c <__lo0bits>
 80037b6:	9b01      	ldr	r3, [sp, #4]
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	2101      	movs	r1, #1
 80037bc:	6139      	str	r1, [r7, #16]
 80037be:	3020      	adds	r0, #32
 80037c0:	e7e5      	b.n	800378e <__d2b+0x54>
 80037c2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80037c6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80037ca:	6030      	str	r0, [r6, #0]
 80037cc:	6918      	ldr	r0, [r3, #16]
 80037ce:	f7ff fdae 	bl	800332e <__hi0bits>
 80037d2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80037d6:	e7e1      	b.n	800379c <__d2b+0x62>

080037d8 <_calloc_r>:
 80037d8:	b538      	push	{r3, r4, r5, lr}
 80037da:	fb02 f401 	mul.w	r4, r2, r1
 80037de:	4621      	mov	r1, r4
 80037e0:	f000 f856 	bl	8003890 <_malloc_r>
 80037e4:	4605      	mov	r5, r0
 80037e6:	b118      	cbz	r0, 80037f0 <_calloc_r+0x18>
 80037e8:	4622      	mov	r2, r4
 80037ea:	2100      	movs	r1, #0
 80037ec:	f7fe fabc 	bl	8001d68 <memset>
 80037f0:	4628      	mov	r0, r5
 80037f2:	bd38      	pop	{r3, r4, r5, pc}

080037f4 <_free_r>:
 80037f4:	b538      	push	{r3, r4, r5, lr}
 80037f6:	4605      	mov	r5, r0
 80037f8:	2900      	cmp	r1, #0
 80037fa:	d045      	beq.n	8003888 <_free_r+0x94>
 80037fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003800:	1f0c      	subs	r4, r1, #4
 8003802:	2b00      	cmp	r3, #0
 8003804:	bfb8      	it	lt
 8003806:	18e4      	addlt	r4, r4, r3
 8003808:	f000 fa29 	bl	8003c5e <__malloc_lock>
 800380c:	4a1f      	ldr	r2, [pc, #124]	; (800388c <_free_r+0x98>)
 800380e:	6813      	ldr	r3, [r2, #0]
 8003810:	4610      	mov	r0, r2
 8003812:	b933      	cbnz	r3, 8003822 <_free_r+0x2e>
 8003814:	6063      	str	r3, [r4, #4]
 8003816:	6014      	str	r4, [r2, #0]
 8003818:	4628      	mov	r0, r5
 800381a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800381e:	f000 ba1f 	b.w	8003c60 <__malloc_unlock>
 8003822:	42a3      	cmp	r3, r4
 8003824:	d90c      	bls.n	8003840 <_free_r+0x4c>
 8003826:	6821      	ldr	r1, [r4, #0]
 8003828:	1862      	adds	r2, r4, r1
 800382a:	4293      	cmp	r3, r2
 800382c:	bf04      	itt	eq
 800382e:	681a      	ldreq	r2, [r3, #0]
 8003830:	685b      	ldreq	r3, [r3, #4]
 8003832:	6063      	str	r3, [r4, #4]
 8003834:	bf04      	itt	eq
 8003836:	1852      	addeq	r2, r2, r1
 8003838:	6022      	streq	r2, [r4, #0]
 800383a:	6004      	str	r4, [r0, #0]
 800383c:	e7ec      	b.n	8003818 <_free_r+0x24>
 800383e:	4613      	mov	r3, r2
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	b10a      	cbz	r2, 8003848 <_free_r+0x54>
 8003844:	42a2      	cmp	r2, r4
 8003846:	d9fa      	bls.n	800383e <_free_r+0x4a>
 8003848:	6819      	ldr	r1, [r3, #0]
 800384a:	1858      	adds	r0, r3, r1
 800384c:	42a0      	cmp	r0, r4
 800384e:	d10b      	bne.n	8003868 <_free_r+0x74>
 8003850:	6820      	ldr	r0, [r4, #0]
 8003852:	4401      	add	r1, r0
 8003854:	1858      	adds	r0, r3, r1
 8003856:	4282      	cmp	r2, r0
 8003858:	6019      	str	r1, [r3, #0]
 800385a:	d1dd      	bne.n	8003818 <_free_r+0x24>
 800385c:	6810      	ldr	r0, [r2, #0]
 800385e:	6852      	ldr	r2, [r2, #4]
 8003860:	605a      	str	r2, [r3, #4]
 8003862:	4401      	add	r1, r0
 8003864:	6019      	str	r1, [r3, #0]
 8003866:	e7d7      	b.n	8003818 <_free_r+0x24>
 8003868:	d902      	bls.n	8003870 <_free_r+0x7c>
 800386a:	230c      	movs	r3, #12
 800386c:	602b      	str	r3, [r5, #0]
 800386e:	e7d3      	b.n	8003818 <_free_r+0x24>
 8003870:	6820      	ldr	r0, [r4, #0]
 8003872:	1821      	adds	r1, r4, r0
 8003874:	428a      	cmp	r2, r1
 8003876:	bf04      	itt	eq
 8003878:	6811      	ldreq	r1, [r2, #0]
 800387a:	6852      	ldreq	r2, [r2, #4]
 800387c:	6062      	str	r2, [r4, #4]
 800387e:	bf04      	itt	eq
 8003880:	1809      	addeq	r1, r1, r0
 8003882:	6021      	streq	r1, [r4, #0]
 8003884:	605c      	str	r4, [r3, #4]
 8003886:	e7c7      	b.n	8003818 <_free_r+0x24>
 8003888:	bd38      	pop	{r3, r4, r5, pc}
 800388a:	bf00      	nop
 800388c:	200002c0 	.word	0x200002c0

08003890 <_malloc_r>:
 8003890:	b570      	push	{r4, r5, r6, lr}
 8003892:	1ccd      	adds	r5, r1, #3
 8003894:	f025 0503 	bic.w	r5, r5, #3
 8003898:	3508      	adds	r5, #8
 800389a:	2d0c      	cmp	r5, #12
 800389c:	bf38      	it	cc
 800389e:	250c      	movcc	r5, #12
 80038a0:	2d00      	cmp	r5, #0
 80038a2:	4606      	mov	r6, r0
 80038a4:	db01      	blt.n	80038aa <_malloc_r+0x1a>
 80038a6:	42a9      	cmp	r1, r5
 80038a8:	d903      	bls.n	80038b2 <_malloc_r+0x22>
 80038aa:	230c      	movs	r3, #12
 80038ac:	6033      	str	r3, [r6, #0]
 80038ae:	2000      	movs	r0, #0
 80038b0:	bd70      	pop	{r4, r5, r6, pc}
 80038b2:	f000 f9d4 	bl	8003c5e <__malloc_lock>
 80038b6:	4a21      	ldr	r2, [pc, #132]	; (800393c <_malloc_r+0xac>)
 80038b8:	6814      	ldr	r4, [r2, #0]
 80038ba:	4621      	mov	r1, r4
 80038bc:	b991      	cbnz	r1, 80038e4 <_malloc_r+0x54>
 80038be:	4c20      	ldr	r4, [pc, #128]	; (8003940 <_malloc_r+0xb0>)
 80038c0:	6823      	ldr	r3, [r4, #0]
 80038c2:	b91b      	cbnz	r3, 80038cc <_malloc_r+0x3c>
 80038c4:	4630      	mov	r0, r6
 80038c6:	f000 f98f 	bl	8003be8 <_sbrk_r>
 80038ca:	6020      	str	r0, [r4, #0]
 80038cc:	4629      	mov	r1, r5
 80038ce:	4630      	mov	r0, r6
 80038d0:	f000 f98a 	bl	8003be8 <_sbrk_r>
 80038d4:	1c43      	adds	r3, r0, #1
 80038d6:	d124      	bne.n	8003922 <_malloc_r+0x92>
 80038d8:	230c      	movs	r3, #12
 80038da:	6033      	str	r3, [r6, #0]
 80038dc:	4630      	mov	r0, r6
 80038de:	f000 f9bf 	bl	8003c60 <__malloc_unlock>
 80038e2:	e7e4      	b.n	80038ae <_malloc_r+0x1e>
 80038e4:	680b      	ldr	r3, [r1, #0]
 80038e6:	1b5b      	subs	r3, r3, r5
 80038e8:	d418      	bmi.n	800391c <_malloc_r+0x8c>
 80038ea:	2b0b      	cmp	r3, #11
 80038ec:	d90f      	bls.n	800390e <_malloc_r+0x7e>
 80038ee:	600b      	str	r3, [r1, #0]
 80038f0:	50cd      	str	r5, [r1, r3]
 80038f2:	18cc      	adds	r4, r1, r3
 80038f4:	4630      	mov	r0, r6
 80038f6:	f000 f9b3 	bl	8003c60 <__malloc_unlock>
 80038fa:	f104 000b 	add.w	r0, r4, #11
 80038fe:	1d23      	adds	r3, r4, #4
 8003900:	f020 0007 	bic.w	r0, r0, #7
 8003904:	1ac3      	subs	r3, r0, r3
 8003906:	d0d3      	beq.n	80038b0 <_malloc_r+0x20>
 8003908:	425a      	negs	r2, r3
 800390a:	50e2      	str	r2, [r4, r3]
 800390c:	e7d0      	b.n	80038b0 <_malloc_r+0x20>
 800390e:	428c      	cmp	r4, r1
 8003910:	684b      	ldr	r3, [r1, #4]
 8003912:	bf16      	itet	ne
 8003914:	6063      	strne	r3, [r4, #4]
 8003916:	6013      	streq	r3, [r2, #0]
 8003918:	460c      	movne	r4, r1
 800391a:	e7eb      	b.n	80038f4 <_malloc_r+0x64>
 800391c:	460c      	mov	r4, r1
 800391e:	6849      	ldr	r1, [r1, #4]
 8003920:	e7cc      	b.n	80038bc <_malloc_r+0x2c>
 8003922:	1cc4      	adds	r4, r0, #3
 8003924:	f024 0403 	bic.w	r4, r4, #3
 8003928:	42a0      	cmp	r0, r4
 800392a:	d005      	beq.n	8003938 <_malloc_r+0xa8>
 800392c:	1a21      	subs	r1, r4, r0
 800392e:	4630      	mov	r0, r6
 8003930:	f000 f95a 	bl	8003be8 <_sbrk_r>
 8003934:	3001      	adds	r0, #1
 8003936:	d0cf      	beq.n	80038d8 <_malloc_r+0x48>
 8003938:	6025      	str	r5, [r4, #0]
 800393a:	e7db      	b.n	80038f4 <_malloc_r+0x64>
 800393c:	200002c0 	.word	0x200002c0
 8003940:	200002c4 	.word	0x200002c4

08003944 <__ssputs_r>:
 8003944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003948:	688e      	ldr	r6, [r1, #8]
 800394a:	429e      	cmp	r6, r3
 800394c:	4682      	mov	sl, r0
 800394e:	460c      	mov	r4, r1
 8003950:	4690      	mov	r8, r2
 8003952:	4699      	mov	r9, r3
 8003954:	d837      	bhi.n	80039c6 <__ssputs_r+0x82>
 8003956:	898a      	ldrh	r2, [r1, #12]
 8003958:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800395c:	d031      	beq.n	80039c2 <__ssputs_r+0x7e>
 800395e:	6825      	ldr	r5, [r4, #0]
 8003960:	6909      	ldr	r1, [r1, #16]
 8003962:	1a6f      	subs	r7, r5, r1
 8003964:	6965      	ldr	r5, [r4, #20]
 8003966:	2302      	movs	r3, #2
 8003968:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800396c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003970:	f109 0301 	add.w	r3, r9, #1
 8003974:	443b      	add	r3, r7
 8003976:	429d      	cmp	r5, r3
 8003978:	bf38      	it	cc
 800397a:	461d      	movcc	r5, r3
 800397c:	0553      	lsls	r3, r2, #21
 800397e:	d530      	bpl.n	80039e2 <__ssputs_r+0x9e>
 8003980:	4629      	mov	r1, r5
 8003982:	f7ff ff85 	bl	8003890 <_malloc_r>
 8003986:	4606      	mov	r6, r0
 8003988:	b950      	cbnz	r0, 80039a0 <__ssputs_r+0x5c>
 800398a:	230c      	movs	r3, #12
 800398c:	f8ca 3000 	str.w	r3, [sl]
 8003990:	89a3      	ldrh	r3, [r4, #12]
 8003992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003996:	81a3      	strh	r3, [r4, #12]
 8003998:	f04f 30ff 	mov.w	r0, #4294967295
 800399c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039a0:	463a      	mov	r2, r7
 80039a2:	6921      	ldr	r1, [r4, #16]
 80039a4:	f7ff fc32 	bl	800320c <memcpy>
 80039a8:	89a3      	ldrh	r3, [r4, #12]
 80039aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80039ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039b2:	81a3      	strh	r3, [r4, #12]
 80039b4:	6126      	str	r6, [r4, #16]
 80039b6:	6165      	str	r5, [r4, #20]
 80039b8:	443e      	add	r6, r7
 80039ba:	1bed      	subs	r5, r5, r7
 80039bc:	6026      	str	r6, [r4, #0]
 80039be:	60a5      	str	r5, [r4, #8]
 80039c0:	464e      	mov	r6, r9
 80039c2:	454e      	cmp	r6, r9
 80039c4:	d900      	bls.n	80039c8 <__ssputs_r+0x84>
 80039c6:	464e      	mov	r6, r9
 80039c8:	4632      	mov	r2, r6
 80039ca:	4641      	mov	r1, r8
 80039cc:	6820      	ldr	r0, [r4, #0]
 80039ce:	f000 f92d 	bl	8003c2c <memmove>
 80039d2:	68a3      	ldr	r3, [r4, #8]
 80039d4:	1b9b      	subs	r3, r3, r6
 80039d6:	60a3      	str	r3, [r4, #8]
 80039d8:	6823      	ldr	r3, [r4, #0]
 80039da:	441e      	add	r6, r3
 80039dc:	6026      	str	r6, [r4, #0]
 80039de:	2000      	movs	r0, #0
 80039e0:	e7dc      	b.n	800399c <__ssputs_r+0x58>
 80039e2:	462a      	mov	r2, r5
 80039e4:	f000 f93d 	bl	8003c62 <_realloc_r>
 80039e8:	4606      	mov	r6, r0
 80039ea:	2800      	cmp	r0, #0
 80039ec:	d1e2      	bne.n	80039b4 <__ssputs_r+0x70>
 80039ee:	6921      	ldr	r1, [r4, #16]
 80039f0:	4650      	mov	r0, sl
 80039f2:	f7ff feff 	bl	80037f4 <_free_r>
 80039f6:	e7c8      	b.n	800398a <__ssputs_r+0x46>

080039f8 <_svfiprintf_r>:
 80039f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039fc:	461d      	mov	r5, r3
 80039fe:	898b      	ldrh	r3, [r1, #12]
 8003a00:	061f      	lsls	r7, r3, #24
 8003a02:	b09d      	sub	sp, #116	; 0x74
 8003a04:	4680      	mov	r8, r0
 8003a06:	460c      	mov	r4, r1
 8003a08:	4616      	mov	r6, r2
 8003a0a:	d50f      	bpl.n	8003a2c <_svfiprintf_r+0x34>
 8003a0c:	690b      	ldr	r3, [r1, #16]
 8003a0e:	b96b      	cbnz	r3, 8003a2c <_svfiprintf_r+0x34>
 8003a10:	2140      	movs	r1, #64	; 0x40
 8003a12:	f7ff ff3d 	bl	8003890 <_malloc_r>
 8003a16:	6020      	str	r0, [r4, #0]
 8003a18:	6120      	str	r0, [r4, #16]
 8003a1a:	b928      	cbnz	r0, 8003a28 <_svfiprintf_r+0x30>
 8003a1c:	230c      	movs	r3, #12
 8003a1e:	f8c8 3000 	str.w	r3, [r8]
 8003a22:	f04f 30ff 	mov.w	r0, #4294967295
 8003a26:	e0c8      	b.n	8003bba <_svfiprintf_r+0x1c2>
 8003a28:	2340      	movs	r3, #64	; 0x40
 8003a2a:	6163      	str	r3, [r4, #20]
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8003a30:	2320      	movs	r3, #32
 8003a32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a36:	2330      	movs	r3, #48	; 0x30
 8003a38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a3c:	9503      	str	r5, [sp, #12]
 8003a3e:	f04f 0b01 	mov.w	fp, #1
 8003a42:	4637      	mov	r7, r6
 8003a44:	463d      	mov	r5, r7
 8003a46:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003a4a:	b10b      	cbz	r3, 8003a50 <_svfiprintf_r+0x58>
 8003a4c:	2b25      	cmp	r3, #37	; 0x25
 8003a4e:	d13e      	bne.n	8003ace <_svfiprintf_r+0xd6>
 8003a50:	ebb7 0a06 	subs.w	sl, r7, r6
 8003a54:	d00b      	beq.n	8003a6e <_svfiprintf_r+0x76>
 8003a56:	4653      	mov	r3, sl
 8003a58:	4632      	mov	r2, r6
 8003a5a:	4621      	mov	r1, r4
 8003a5c:	4640      	mov	r0, r8
 8003a5e:	f7ff ff71 	bl	8003944 <__ssputs_r>
 8003a62:	3001      	adds	r0, #1
 8003a64:	f000 80a4 	beq.w	8003bb0 <_svfiprintf_r+0x1b8>
 8003a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a6a:	4453      	add	r3, sl
 8003a6c:	9309      	str	r3, [sp, #36]	; 0x24
 8003a6e:	783b      	ldrb	r3, [r7, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 809d 	beq.w	8003bb0 <_svfiprintf_r+0x1b8>
 8003a76:	2300      	movs	r3, #0
 8003a78:	f04f 32ff 	mov.w	r2, #4294967295
 8003a7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a80:	9304      	str	r3, [sp, #16]
 8003a82:	9307      	str	r3, [sp, #28]
 8003a84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a88:	931a      	str	r3, [sp, #104]	; 0x68
 8003a8a:	462f      	mov	r7, r5
 8003a8c:	2205      	movs	r2, #5
 8003a8e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003a92:	4850      	ldr	r0, [pc, #320]	; (8003bd4 <_svfiprintf_r+0x1dc>)
 8003a94:	f7fc fbdc 	bl	8000250 <memchr>
 8003a98:	9b04      	ldr	r3, [sp, #16]
 8003a9a:	b9d0      	cbnz	r0, 8003ad2 <_svfiprintf_r+0xda>
 8003a9c:	06d9      	lsls	r1, r3, #27
 8003a9e:	bf44      	itt	mi
 8003aa0:	2220      	movmi	r2, #32
 8003aa2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003aa6:	071a      	lsls	r2, r3, #28
 8003aa8:	bf44      	itt	mi
 8003aaa:	222b      	movmi	r2, #43	; 0x2b
 8003aac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003ab0:	782a      	ldrb	r2, [r5, #0]
 8003ab2:	2a2a      	cmp	r2, #42	; 0x2a
 8003ab4:	d015      	beq.n	8003ae2 <_svfiprintf_r+0xea>
 8003ab6:	9a07      	ldr	r2, [sp, #28]
 8003ab8:	462f      	mov	r7, r5
 8003aba:	2000      	movs	r0, #0
 8003abc:	250a      	movs	r5, #10
 8003abe:	4639      	mov	r1, r7
 8003ac0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ac4:	3b30      	subs	r3, #48	; 0x30
 8003ac6:	2b09      	cmp	r3, #9
 8003ac8:	d94d      	bls.n	8003b66 <_svfiprintf_r+0x16e>
 8003aca:	b1b8      	cbz	r0, 8003afc <_svfiprintf_r+0x104>
 8003acc:	e00f      	b.n	8003aee <_svfiprintf_r+0xf6>
 8003ace:	462f      	mov	r7, r5
 8003ad0:	e7b8      	b.n	8003a44 <_svfiprintf_r+0x4c>
 8003ad2:	4a40      	ldr	r2, [pc, #256]	; (8003bd4 <_svfiprintf_r+0x1dc>)
 8003ad4:	1a80      	subs	r0, r0, r2
 8003ad6:	fa0b f000 	lsl.w	r0, fp, r0
 8003ada:	4318      	orrs	r0, r3
 8003adc:	9004      	str	r0, [sp, #16]
 8003ade:	463d      	mov	r5, r7
 8003ae0:	e7d3      	b.n	8003a8a <_svfiprintf_r+0x92>
 8003ae2:	9a03      	ldr	r2, [sp, #12]
 8003ae4:	1d11      	adds	r1, r2, #4
 8003ae6:	6812      	ldr	r2, [r2, #0]
 8003ae8:	9103      	str	r1, [sp, #12]
 8003aea:	2a00      	cmp	r2, #0
 8003aec:	db01      	blt.n	8003af2 <_svfiprintf_r+0xfa>
 8003aee:	9207      	str	r2, [sp, #28]
 8003af0:	e004      	b.n	8003afc <_svfiprintf_r+0x104>
 8003af2:	4252      	negs	r2, r2
 8003af4:	f043 0302 	orr.w	r3, r3, #2
 8003af8:	9207      	str	r2, [sp, #28]
 8003afa:	9304      	str	r3, [sp, #16]
 8003afc:	783b      	ldrb	r3, [r7, #0]
 8003afe:	2b2e      	cmp	r3, #46	; 0x2e
 8003b00:	d10c      	bne.n	8003b1c <_svfiprintf_r+0x124>
 8003b02:	787b      	ldrb	r3, [r7, #1]
 8003b04:	2b2a      	cmp	r3, #42	; 0x2a
 8003b06:	d133      	bne.n	8003b70 <_svfiprintf_r+0x178>
 8003b08:	9b03      	ldr	r3, [sp, #12]
 8003b0a:	1d1a      	adds	r2, r3, #4
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	9203      	str	r2, [sp, #12]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	bfb8      	it	lt
 8003b14:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b18:	3702      	adds	r7, #2
 8003b1a:	9305      	str	r3, [sp, #20]
 8003b1c:	4d2e      	ldr	r5, [pc, #184]	; (8003bd8 <_svfiprintf_r+0x1e0>)
 8003b1e:	7839      	ldrb	r1, [r7, #0]
 8003b20:	2203      	movs	r2, #3
 8003b22:	4628      	mov	r0, r5
 8003b24:	f7fc fb94 	bl	8000250 <memchr>
 8003b28:	b138      	cbz	r0, 8003b3a <_svfiprintf_r+0x142>
 8003b2a:	2340      	movs	r3, #64	; 0x40
 8003b2c:	1b40      	subs	r0, r0, r5
 8003b2e:	fa03 f000 	lsl.w	r0, r3, r0
 8003b32:	9b04      	ldr	r3, [sp, #16]
 8003b34:	4303      	orrs	r3, r0
 8003b36:	3701      	adds	r7, #1
 8003b38:	9304      	str	r3, [sp, #16]
 8003b3a:	7839      	ldrb	r1, [r7, #0]
 8003b3c:	4827      	ldr	r0, [pc, #156]	; (8003bdc <_svfiprintf_r+0x1e4>)
 8003b3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b42:	2206      	movs	r2, #6
 8003b44:	1c7e      	adds	r6, r7, #1
 8003b46:	f7fc fb83 	bl	8000250 <memchr>
 8003b4a:	2800      	cmp	r0, #0
 8003b4c:	d038      	beq.n	8003bc0 <_svfiprintf_r+0x1c8>
 8003b4e:	4b24      	ldr	r3, [pc, #144]	; (8003be0 <_svfiprintf_r+0x1e8>)
 8003b50:	bb13      	cbnz	r3, 8003b98 <_svfiprintf_r+0x1a0>
 8003b52:	9b03      	ldr	r3, [sp, #12]
 8003b54:	3307      	adds	r3, #7
 8003b56:	f023 0307 	bic.w	r3, r3, #7
 8003b5a:	3308      	adds	r3, #8
 8003b5c:	9303      	str	r3, [sp, #12]
 8003b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b60:	444b      	add	r3, r9
 8003b62:	9309      	str	r3, [sp, #36]	; 0x24
 8003b64:	e76d      	b.n	8003a42 <_svfiprintf_r+0x4a>
 8003b66:	fb05 3202 	mla	r2, r5, r2, r3
 8003b6a:	2001      	movs	r0, #1
 8003b6c:	460f      	mov	r7, r1
 8003b6e:	e7a6      	b.n	8003abe <_svfiprintf_r+0xc6>
 8003b70:	2300      	movs	r3, #0
 8003b72:	3701      	adds	r7, #1
 8003b74:	9305      	str	r3, [sp, #20]
 8003b76:	4619      	mov	r1, r3
 8003b78:	250a      	movs	r5, #10
 8003b7a:	4638      	mov	r0, r7
 8003b7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b80:	3a30      	subs	r2, #48	; 0x30
 8003b82:	2a09      	cmp	r2, #9
 8003b84:	d903      	bls.n	8003b8e <_svfiprintf_r+0x196>
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0c8      	beq.n	8003b1c <_svfiprintf_r+0x124>
 8003b8a:	9105      	str	r1, [sp, #20]
 8003b8c:	e7c6      	b.n	8003b1c <_svfiprintf_r+0x124>
 8003b8e:	fb05 2101 	mla	r1, r5, r1, r2
 8003b92:	2301      	movs	r3, #1
 8003b94:	4607      	mov	r7, r0
 8003b96:	e7f0      	b.n	8003b7a <_svfiprintf_r+0x182>
 8003b98:	ab03      	add	r3, sp, #12
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	4622      	mov	r2, r4
 8003b9e:	4b11      	ldr	r3, [pc, #68]	; (8003be4 <_svfiprintf_r+0x1ec>)
 8003ba0:	a904      	add	r1, sp, #16
 8003ba2:	4640      	mov	r0, r8
 8003ba4:	f7fe f970 	bl	8001e88 <_printf_float>
 8003ba8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003bac:	4681      	mov	r9, r0
 8003bae:	d1d6      	bne.n	8003b5e <_svfiprintf_r+0x166>
 8003bb0:	89a3      	ldrh	r3, [r4, #12]
 8003bb2:	065b      	lsls	r3, r3, #25
 8003bb4:	f53f af35 	bmi.w	8003a22 <_svfiprintf_r+0x2a>
 8003bb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bba:	b01d      	add	sp, #116	; 0x74
 8003bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bc0:	ab03      	add	r3, sp, #12
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	4622      	mov	r2, r4
 8003bc6:	4b07      	ldr	r3, [pc, #28]	; (8003be4 <_svfiprintf_r+0x1ec>)
 8003bc8:	a904      	add	r1, sp, #16
 8003bca:	4640      	mov	r0, r8
 8003bcc:	f7fe fbfe 	bl	80023cc <_printf_i>
 8003bd0:	e7ea      	b.n	8003ba8 <_svfiprintf_r+0x1b0>
 8003bd2:	bf00      	nop
 8003bd4:	08004204 	.word	0x08004204
 8003bd8:	0800420a 	.word	0x0800420a
 8003bdc:	0800420e 	.word	0x0800420e
 8003be0:	08001e89 	.word	0x08001e89
 8003be4:	08003945 	.word	0x08003945

08003be8 <_sbrk_r>:
 8003be8:	b538      	push	{r3, r4, r5, lr}
 8003bea:	4c06      	ldr	r4, [pc, #24]	; (8003c04 <_sbrk_r+0x1c>)
 8003bec:	2300      	movs	r3, #0
 8003bee:	4605      	mov	r5, r0
 8003bf0:	4608      	mov	r0, r1
 8003bf2:	6023      	str	r3, [r4, #0]
 8003bf4:	f7fc ff08 	bl	8000a08 <_sbrk>
 8003bf8:	1c43      	adds	r3, r0, #1
 8003bfa:	d102      	bne.n	8003c02 <_sbrk_r+0x1a>
 8003bfc:	6823      	ldr	r3, [r4, #0]
 8003bfe:	b103      	cbz	r3, 8003c02 <_sbrk_r+0x1a>
 8003c00:	602b      	str	r3, [r5, #0]
 8003c02:	bd38      	pop	{r3, r4, r5, pc}
 8003c04:	20000364 	.word	0x20000364

08003c08 <__ascii_mbtowc>:
 8003c08:	b082      	sub	sp, #8
 8003c0a:	b901      	cbnz	r1, 8003c0e <__ascii_mbtowc+0x6>
 8003c0c:	a901      	add	r1, sp, #4
 8003c0e:	b142      	cbz	r2, 8003c22 <__ascii_mbtowc+0x1a>
 8003c10:	b14b      	cbz	r3, 8003c26 <__ascii_mbtowc+0x1e>
 8003c12:	7813      	ldrb	r3, [r2, #0]
 8003c14:	600b      	str	r3, [r1, #0]
 8003c16:	7812      	ldrb	r2, [r2, #0]
 8003c18:	1c10      	adds	r0, r2, #0
 8003c1a:	bf18      	it	ne
 8003c1c:	2001      	movne	r0, #1
 8003c1e:	b002      	add	sp, #8
 8003c20:	4770      	bx	lr
 8003c22:	4610      	mov	r0, r2
 8003c24:	e7fb      	b.n	8003c1e <__ascii_mbtowc+0x16>
 8003c26:	f06f 0001 	mvn.w	r0, #1
 8003c2a:	e7f8      	b.n	8003c1e <__ascii_mbtowc+0x16>

08003c2c <memmove>:
 8003c2c:	4288      	cmp	r0, r1
 8003c2e:	b510      	push	{r4, lr}
 8003c30:	eb01 0302 	add.w	r3, r1, r2
 8003c34:	d807      	bhi.n	8003c46 <memmove+0x1a>
 8003c36:	1e42      	subs	r2, r0, #1
 8003c38:	4299      	cmp	r1, r3
 8003c3a:	d00a      	beq.n	8003c52 <memmove+0x26>
 8003c3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c40:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003c44:	e7f8      	b.n	8003c38 <memmove+0xc>
 8003c46:	4283      	cmp	r3, r0
 8003c48:	d9f5      	bls.n	8003c36 <memmove+0xa>
 8003c4a:	1881      	adds	r1, r0, r2
 8003c4c:	1ad2      	subs	r2, r2, r3
 8003c4e:	42d3      	cmn	r3, r2
 8003c50:	d100      	bne.n	8003c54 <memmove+0x28>
 8003c52:	bd10      	pop	{r4, pc}
 8003c54:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c58:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003c5c:	e7f7      	b.n	8003c4e <memmove+0x22>

08003c5e <__malloc_lock>:
 8003c5e:	4770      	bx	lr

08003c60 <__malloc_unlock>:
 8003c60:	4770      	bx	lr

08003c62 <_realloc_r>:
 8003c62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c64:	4607      	mov	r7, r0
 8003c66:	4614      	mov	r4, r2
 8003c68:	460e      	mov	r6, r1
 8003c6a:	b921      	cbnz	r1, 8003c76 <_realloc_r+0x14>
 8003c6c:	4611      	mov	r1, r2
 8003c6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003c72:	f7ff be0d 	b.w	8003890 <_malloc_r>
 8003c76:	b922      	cbnz	r2, 8003c82 <_realloc_r+0x20>
 8003c78:	f7ff fdbc 	bl	80037f4 <_free_r>
 8003c7c:	4625      	mov	r5, r4
 8003c7e:	4628      	mov	r0, r5
 8003c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c82:	f000 f821 	bl	8003cc8 <_malloc_usable_size_r>
 8003c86:	42a0      	cmp	r0, r4
 8003c88:	d20f      	bcs.n	8003caa <_realloc_r+0x48>
 8003c8a:	4621      	mov	r1, r4
 8003c8c:	4638      	mov	r0, r7
 8003c8e:	f7ff fdff 	bl	8003890 <_malloc_r>
 8003c92:	4605      	mov	r5, r0
 8003c94:	2800      	cmp	r0, #0
 8003c96:	d0f2      	beq.n	8003c7e <_realloc_r+0x1c>
 8003c98:	4631      	mov	r1, r6
 8003c9a:	4622      	mov	r2, r4
 8003c9c:	f7ff fab6 	bl	800320c <memcpy>
 8003ca0:	4631      	mov	r1, r6
 8003ca2:	4638      	mov	r0, r7
 8003ca4:	f7ff fda6 	bl	80037f4 <_free_r>
 8003ca8:	e7e9      	b.n	8003c7e <_realloc_r+0x1c>
 8003caa:	4635      	mov	r5, r6
 8003cac:	e7e7      	b.n	8003c7e <_realloc_r+0x1c>

08003cae <__ascii_wctomb>:
 8003cae:	b149      	cbz	r1, 8003cc4 <__ascii_wctomb+0x16>
 8003cb0:	2aff      	cmp	r2, #255	; 0xff
 8003cb2:	bf85      	ittet	hi
 8003cb4:	238a      	movhi	r3, #138	; 0x8a
 8003cb6:	6003      	strhi	r3, [r0, #0]
 8003cb8:	700a      	strbls	r2, [r1, #0]
 8003cba:	f04f 30ff 	movhi.w	r0, #4294967295
 8003cbe:	bf98      	it	ls
 8003cc0:	2001      	movls	r0, #1
 8003cc2:	4770      	bx	lr
 8003cc4:	4608      	mov	r0, r1
 8003cc6:	4770      	bx	lr

08003cc8 <_malloc_usable_size_r>:
 8003cc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ccc:	1f18      	subs	r0, r3, #4
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	bfbc      	itt	lt
 8003cd2:	580b      	ldrlt	r3, [r1, r0]
 8003cd4:	18c0      	addlt	r0, r0, r3
 8003cd6:	4770      	bx	lr

08003cd8 <checkint>:
 8003cd8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8003cdc:	2b7e      	cmp	r3, #126	; 0x7e
 8003cde:	dd10      	ble.n	8003d02 <checkint+0x2a>
 8003ce0:	2b96      	cmp	r3, #150	; 0x96
 8003ce2:	dc0c      	bgt.n	8003cfe <checkint+0x26>
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	1e5a      	subs	r2, r3, #1
 8003cf0:	4202      	tst	r2, r0
 8003cf2:	d106      	bne.n	8003d02 <checkint+0x2a>
 8003cf4:	4203      	tst	r3, r0
 8003cf6:	bf0c      	ite	eq
 8003cf8:	2002      	moveq	r0, #2
 8003cfa:	2001      	movne	r0, #1
 8003cfc:	4770      	bx	lr
 8003cfe:	2002      	movs	r0, #2
 8003d00:	4770      	bx	lr
 8003d02:	2000      	movs	r0, #0
 8003d04:	4770      	bx	lr
	...

08003d08 <powf>:
 8003d08:	ee10 1a10 	vmov	r1, s0
 8003d0c:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8003d10:	ee10 4a90 	vmov	r4, s1
 8003d14:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8003d18:	0062      	lsls	r2, r4, #1
 8003d1a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8003d1e:	eef0 4a60 	vmov.f32	s9, s1
 8003d22:	f102 30ff 	add.w	r0, r2, #4294967295
 8003d26:	4b92      	ldr	r3, [pc, #584]	; (8003f70 <powf+0x268>)
 8003d28:	d255      	bcs.n	8003dd6 <powf+0xce>
 8003d2a:	4298      	cmp	r0, r3
 8003d2c:	d855      	bhi.n	8003dda <powf+0xd2>
 8003d2e:	2000      	movs	r0, #0
 8003d30:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 8003d34:	4a8f      	ldr	r2, [pc, #572]	; (8003f74 <powf+0x26c>)
 8003d36:	eebf 2b00 	vmov.f64	d2, #240	; 0xbf800000 -1.0
 8003d3a:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 8003d3e:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 8003d42:	0ddb      	lsrs	r3, r3, #23
 8003d44:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 8003d48:	05db      	lsls	r3, r3, #23
 8003d4a:	ed94 6b00 	vldr	d6, [r4]
 8003d4e:	1ac9      	subs	r1, r1, r3
 8003d50:	ee07 1a90 	vmov	s15, r1
 8003d54:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
 8003d58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d5c:	eea6 2b07 	vfma.f64	d2, d6, d7
 8003d60:	ed92 7b42 	vldr	d7, [r2, #264]	; 0x108
 8003d64:	ee22 6b02 	vmul.f64	d6, d2, d2
 8003d68:	eea2 7b05 	vfma.f64	d7, d2, d5
 8003d6c:	15db      	asrs	r3, r3, #23
 8003d6e:	ed94 5b02 	vldr	d5, [r4, #8]
 8003d72:	ee00 3a10 	vmov	s0, r3
 8003d76:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8003d7a:	ee30 0b05 	vadd.f64	d0, d0, d5
 8003d7e:	ed92 5b48 	vldr	d5, [r2, #288]	; 0x120
 8003d82:	ed92 3b44 	vldr	d3, [r2, #272]	; 0x110
 8003d86:	eea2 0b05 	vfma.f64	d0, d2, d5
 8003d8a:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
 8003d8e:	eea2 5b03 	vfma.f64	d5, d2, d3
 8003d92:	eea6 0b05 	vfma.f64	d0, d6, d5
 8003d96:	ee26 6b06 	vmul.f64	d6, d6, d6
 8003d9a:	eea7 0b06 	vfma.f64	d0, d7, d6
 8003d9e:	eeb7 7ae4 	vcvt.f64.f32	d7, s9
 8003da2:	ee20 0b07 	vmul.f64	d0, d0, d7
 8003da6:	ee10 3a90 	vmov	r3, s1
 8003daa:	2500      	movs	r5, #0
 8003dac:	0bda      	lsrs	r2, r3, #15
 8003dae:	2300      	movs	r3, #0
 8003db0:	b292      	uxth	r2, r2
 8003db2:	f248 04be 	movw	r4, #32958	; 0x80be
 8003db6:	429d      	cmp	r5, r3
 8003db8:	bf08      	it	eq
 8003dba:	4294      	cmpeq	r4, r2
 8003dbc:	f080 8094 	bcs.w	8003ee8 <powf+0x1e0>
 8003dc0:	ed9f 7b65 	vldr	d7, [pc, #404]	; 8003f58 <powf+0x250>
 8003dc4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8003dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dcc:	dd76      	ble.n	8003ebc <powf+0x1b4>
 8003dce:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8003dd2:	f000 b8fd 	b.w	8003fd0 <__math_oflowf>
 8003dd6:	4298      	cmp	r0, r3
 8003dd8:	d92d      	bls.n	8003e36 <powf+0x12e>
 8003dda:	b952      	cbnz	r2, 8003df2 <powf+0xea>
 8003ddc:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8003de0:	005b      	lsls	r3, r3, #1
 8003de2:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8003de6:	f240 80ae 	bls.w	8003f46 <powf+0x23e>
 8003dea:	ee30 0a24 	vadd.f32	s0, s0, s9
 8003dee:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8003df2:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8003df6:	d105      	bne.n	8003e04 <powf+0xfc>
 8003df8:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8003dfc:	0064      	lsls	r4, r4, #1
 8003dfe:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8003e02:	e7f0      	b.n	8003de6 <powf+0xde>
 8003e04:	004b      	lsls	r3, r1, #1
 8003e06:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8003e0a:	d8ee      	bhi.n	8003dea <powf+0xe2>
 8003e0c:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8003e10:	d1eb      	bne.n	8003dea <powf+0xe2>
 8003e12:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8003e16:	f000 8096 	beq.w	8003f46 <powf+0x23e>
 8003e1a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8003e1e:	ea6f 0404 	mvn.w	r4, r4
 8003e22:	bf34      	ite	cc
 8003e24:	2300      	movcc	r3, #0
 8003e26:	2301      	movcs	r3, #1
 8003e28:	0fe4      	lsrs	r4, r4, #31
 8003e2a:	42a3      	cmp	r3, r4
 8003e2c:	f040 808e 	bne.w	8003f4c <powf+0x244>
 8003e30:	ee24 0aa4 	vmul.f32	s0, s9, s9
 8003e34:	e7db      	b.n	8003dee <powf+0xe6>
 8003e36:	004d      	lsls	r5, r1, #1
 8003e38:	1e6a      	subs	r2, r5, #1
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d91b      	bls.n	8003e76 <powf+0x16e>
 8003e3e:	2900      	cmp	r1, #0
 8003e40:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003e44:	da0e      	bge.n	8003e64 <powf+0x15c>
 8003e46:	ee10 0a90 	vmov	r0, s1
 8003e4a:	f7ff ff45 	bl	8003cd8 <checkint>
 8003e4e:	2801      	cmp	r0, #1
 8003e50:	d108      	bne.n	8003e64 <powf+0x15c>
 8003e52:	eeb1 0a40 	vneg.f32	s0, s0
 8003e56:	b93d      	cbnz	r5, 8003e68 <powf+0x160>
 8003e58:	2c00      	cmp	r4, #0
 8003e5a:	dac8      	bge.n	8003dee <powf+0xe6>
 8003e5c:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8003e60:	f000 b8bc 	b.w	8003fdc <__math_divzerof>
 8003e64:	2000      	movs	r0, #0
 8003e66:	e7f6      	b.n	8003e56 <powf+0x14e>
 8003e68:	2c00      	cmp	r4, #0
 8003e6a:	dac0      	bge.n	8003dee <powf+0xe6>
 8003e6c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003e70:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8003e74:	e7bb      	b.n	8003dee <powf+0xe6>
 8003e76:	2900      	cmp	r1, #0
 8003e78:	da1e      	bge.n	8003eb8 <powf+0x1b0>
 8003e7a:	ee10 0a90 	vmov	r0, s1
 8003e7e:	f7ff ff2b 	bl	8003cd8 <checkint>
 8003e82:	b918      	cbnz	r0, 8003e8c <powf+0x184>
 8003e84:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8003e88:	f000 b8b8 	b.w	8003ffc <__math_invalidf>
 8003e8c:	2801      	cmp	r0, #1
 8003e8e:	bf0c      	ite	eq
 8003e90:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8003e94:	2000      	movne	r0, #0
 8003e96:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003e9a:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8003e9e:	f4bf af47 	bcs.w	8003d30 <powf+0x28>
 8003ea2:	eddf 0a35 	vldr	s1, [pc, #212]	; 8003f78 <powf+0x270>
 8003ea6:	ee20 0a20 	vmul.f32	s0, s0, s1
 8003eaa:	ee10 3a10 	vmov	r3, s0
 8003eae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003eb2:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8003eb6:	e73b      	b.n	8003d30 <powf+0x28>
 8003eb8:	2000      	movs	r0, #0
 8003eba:	e7ee      	b.n	8003e9a <powf+0x192>
 8003ebc:	ed9f 7b28 	vldr	d7, [pc, #160]	; 8003f60 <powf+0x258>
 8003ec0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8003ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ec8:	d803      	bhi.n	8003ed2 <powf+0x1ca>
 8003eca:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8003ece:	f000 b873 	b.w	8003fb8 <__math_uflowf>
 8003ed2:	ed9f 7b25 	vldr	d7, [pc, #148]	; 8003f68 <powf+0x260>
 8003ed6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8003eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ede:	d503      	bpl.n	8003ee8 <powf+0x1e0>
 8003ee0:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8003ee4:	f000 b86e 	b.w	8003fc4 <__math_may_uflowf>
 8003ee8:	4924      	ldr	r1, [pc, #144]	; (8003f7c <powf+0x274>)
 8003eea:	ed91 7b40 	vldr	d7, [r1, #256]	; 0x100
 8003eee:	ee30 6b07 	vadd.f64	d6, d0, d7
 8003ef2:	ec55 4b16 	vmov	r4, r5, d6
 8003ef6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003efa:	f004 021f 	and.w	r2, r4, #31
 8003efe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8003f02:	ed91 6b46 	vldr	d6, [r1, #280]	; 0x118
 8003f06:	ee30 0b47 	vsub.f64	d0, d0, d7
 8003f0a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8003f0e:	e9d2 6700 	ldrd	r6, r7, [r2]
 8003f12:	eea0 7b06 	vfma.f64	d7, d0, d6
 8003f16:	1824      	adds	r4, r4, r0
 8003f18:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8003f1c:	ed91 6b44 	vldr	d6, [r1, #272]	; 0x110
 8003f20:	2000      	movs	r0, #0
 8003f22:	1982      	adds	r2, r0, r6
 8003f24:	ea4f 31c4 	mov.w	r1, r4, lsl #15
 8003f28:	eb41 0307 	adc.w	r3, r1, r7
 8003f2c:	eea0 6b05 	vfma.f64	d6, d0, d5
 8003f30:	ee20 0b00 	vmul.f64	d0, d0, d0
 8003f34:	eea6 7b00 	vfma.f64	d7, d6, d0
 8003f38:	ec43 2b16 	vmov	d6, r2, r3
 8003f3c:	ee27 0b06 	vmul.f64	d0, d7, d6
 8003f40:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8003f44:	e753      	b.n	8003dee <powf+0xe6>
 8003f46:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003f4a:	e750      	b.n	8003dee <powf+0xe6>
 8003f4c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8003f80 <powf+0x278>
 8003f50:	e74d      	b.n	8003dee <powf+0xe6>
 8003f52:	bf00      	nop
 8003f54:	f3af 8000 	nop.w
 8003f58:	ffd1d571 	.word	0xffd1d571
 8003f5c:	405fffff 	.word	0x405fffff
 8003f60:	00000000 	.word	0x00000000
 8003f64:	c062c000 	.word	0xc062c000
 8003f68:	00000000 	.word	0x00000000
 8003f6c:	c062a000 	.word	0xc062a000
 8003f70:	fefffffe 	.word	0xfefffffe
 8003f74:	08004320 	.word	0x08004320
 8003f78:	4b000000 	.word	0x4b000000
 8003f7c:	08004448 	.word	0x08004448
 8003f80:	00000000 	.word	0x00000000

08003f84 <with_errnof>:
 8003f84:	b510      	push	{r4, lr}
 8003f86:	ed2d 8b02 	vpush	{d8}
 8003f8a:	eeb0 8a40 	vmov.f32	s16, s0
 8003f8e:	4604      	mov	r4, r0
 8003f90:	f7fd fec0 	bl	8001d14 <__errno>
 8003f94:	eeb0 0a48 	vmov.f32	s0, s16
 8003f98:	ecbd 8b02 	vpop	{d8}
 8003f9c:	6004      	str	r4, [r0, #0]
 8003f9e:	bd10      	pop	{r4, pc}

08003fa0 <xflowf>:
 8003fa0:	b130      	cbz	r0, 8003fb0 <xflowf+0x10>
 8003fa2:	eef1 7a40 	vneg.f32	s15, s0
 8003fa6:	2022      	movs	r0, #34	; 0x22
 8003fa8:	ee27 0a80 	vmul.f32	s0, s15, s0
 8003fac:	f7ff bfea 	b.w	8003f84 <with_errnof>
 8003fb0:	eef0 7a40 	vmov.f32	s15, s0
 8003fb4:	e7f7      	b.n	8003fa6 <xflowf+0x6>
	...

08003fb8 <__math_uflowf>:
 8003fb8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8003fc0 <__math_uflowf+0x8>
 8003fbc:	f7ff bff0 	b.w	8003fa0 <xflowf>
 8003fc0:	10000000 	.word	0x10000000

08003fc4 <__math_may_uflowf>:
 8003fc4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8003fcc <__math_may_uflowf+0x8>
 8003fc8:	f7ff bfea 	b.w	8003fa0 <xflowf>
 8003fcc:	1a200000 	.word	0x1a200000

08003fd0 <__math_oflowf>:
 8003fd0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8003fd8 <__math_oflowf+0x8>
 8003fd4:	f7ff bfe4 	b.w	8003fa0 <xflowf>
 8003fd8:	70000000 	.word	0x70000000

08003fdc <__math_divzerof>:
 8003fdc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003fe0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8003fe4:	2800      	cmp	r0, #0
 8003fe6:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8003fea:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8003ff8 <__math_divzerof+0x1c>
 8003fee:	2022      	movs	r0, #34	; 0x22
 8003ff0:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8003ff4:	f7ff bfc6 	b.w	8003f84 <with_errnof>
 8003ff8:	00000000 	.word	0x00000000

08003ffc <__math_invalidf>:
 8003ffc:	eef0 7a40 	vmov.f32	s15, s0
 8004000:	ee30 7a40 	vsub.f32	s14, s0, s0
 8004004:	eef4 7a67 	vcmp.f32	s15, s15
 8004008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800400c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8004010:	d602      	bvs.n	8004018 <__math_invalidf+0x1c>
 8004012:	2021      	movs	r0, #33	; 0x21
 8004014:	f7ff bfb6 	b.w	8003f84 <with_errnof>
 8004018:	4770      	bx	lr
	...

0800401c <_init>:
 800401c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800401e:	bf00      	nop
 8004020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004022:	bc08      	pop	{r3}
 8004024:	469e      	mov	lr, r3
 8004026:	4770      	bx	lr

08004028 <_fini>:
 8004028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800402a:	bf00      	nop
 800402c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800402e:	bc08      	pop	{r3}
 8004030:	469e      	mov	lr, r3
 8004032:	4770      	bx	lr
