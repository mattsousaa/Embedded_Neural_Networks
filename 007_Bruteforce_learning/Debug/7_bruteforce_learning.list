
7_bruteforce_learning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d74  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000558  08003f78  08003f78  00013f78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044d0  080044d0  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  080044d0  080044d0  000144d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044d8  080044d8  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044d8  080044d8  000144d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044dc  080044dc  000144dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  080044e0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  200001fc  080046dc  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  080046dc  000202ac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000076c7  00000000  00000000  0002022a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000012c3  00000000  00000000  000278f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000620  00000000  00000000  00028bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000578  00000000  00000000  000291d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027e25  00000000  00000000  00029750  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005e28  00000000  00000000  00051575  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fb10b  00000000  00000000  0005739d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001524a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020ec  00000000  00000000  00152524  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001fc 	.word	0x200001fc
 800021c:	00000000 	.word	0x00000000
 8000220:	08003f5c 	.word	0x08003f5c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000200 	.word	0x20000200
 800023c:	08003f5c 	.word	0x08003f5c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <printmsg>:
						  double weight,
						  double expected_value,
						  double step_amount,	// epoch numbers
						  uint32_t itr);

void printmsg(char *format, ...){
 80005f0:	b40f      	push	{r0, r1, r2, r3}
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b096      	sub	sp, #88	; 0x58
 80005f6:	af00      	add	r7, sp, #0

	char str[80];

	/*Extract the argument list using VA apis */
	va_list args;
	va_start(args, format);
 80005f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80005fc:	607b      	str	r3, [r7, #4]
	vsprintf(str, format, args);
 80005fe:	f107 0308 	add.w	r3, r7, #8
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000606:	4618      	mov	r0, r3
 8000608:	f001 ffa8 	bl	800255c <vsiprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 800060c:	f107 0308 	add.w	r3, r7, #8
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff fe15 	bl	8000240 <strlen>
 8000616:	4603      	mov	r3, r0
 8000618:	b29a      	uxth	r2, r3
 800061a:	f107 0108 	add.w	r1, r7, #8
 800061e:	f04f 33ff 	mov.w	r3, #4294967295
 8000622:	4805      	ldr	r0, [pc, #20]	; (8000638 <printmsg+0x48>)
 8000624:	f000 fe7a 	bl	800131c <HAL_UART_Transmit>
	va_end(args);

}
 8000628:	bf00      	nop
 800062a:	3758      	adds	r7, #88	; 0x58
 800062c:	46bd      	mov	sp, r7
 800062e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000632:	b004      	add	sp, #16
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	20000224 	.word	0x20000224

0800063c <main>:

int main(void){
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0

	HAL_Init();
 8000640:	f000 f9f9 	bl	8000a36 <HAL_Init>
	SystemClock_Config();
 8000644:	f000 f824 	bl	8000690 <SystemClock_Config>
	UART3_Init();
 8000648:	f000 f82a 	bl	80006a0 <UART3_Init>

	brute_force_learning(input, weight, expected_value, step_amount, 1500);
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <main+0x44>)
 800064e:	ed93 7b00 	vldr	d7, [r3]
 8000652:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <main+0x48>)
 8000654:	ed93 6b00 	vldr	d6, [r3]
 8000658:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <main+0x4c>)
 800065a:	ed93 5b00 	vldr	d5, [r3]
 800065e:	4b0b      	ldr	r3, [pc, #44]	; (800068c <main+0x50>)
 8000660:	ed93 4b00 	vldr	d4, [r3]
 8000664:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000668:	eeb0 3b44 	vmov.f64	d3, d4
 800066c:	eeb0 2b45 	vmov.f64	d2, d5
 8000670:	eeb0 1b46 	vmov.f64	d1, d6
 8000674:	eeb0 0b47 	vmov.f64	d0, d7
 8000678:	f000 f83c 	bl	80006f4 <brute_force_learning>

	while(1);
 800067c:	e7fe      	b.n	800067c <main+0x40>
 800067e:	bf00      	nop
 8000680:	20000008 	.word	0x20000008
 8000684:	20000000 	.word	0x20000000
 8000688:	20000010 	.word	0x20000010
 800068c:	20000018 	.word	0x20000018

08000690 <SystemClock_Config>:

}

void SystemClock_Config(void){
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0

}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
	...

080006a0 <UART3_Init>:

void UART3_Init(void){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0

	huart3.Instance = USART3;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <UART3_Init+0x44>)
 80006a6:	4a10      	ldr	r2, [pc, #64]	; (80006e8 <UART3_Init+0x48>)
 80006a8:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <UART3_Init+0x44>)
 80006ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b0:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <UART3_Init+0x44>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80006b8:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <UART3_Init+0x44>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <UART3_Init+0x44>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <UART3_Init+0x44>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	619a      	str	r2, [r3, #24]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <UART3_Init+0x44>)
 80006cc:	220c      	movs	r2, #12
 80006ce:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart3) != HAL_OK){
 80006d0:	4804      	ldr	r0, [pc, #16]	; (80006e4 <UART3_Init+0x44>)
 80006d2:	f000 fdd5 	bl	8001280 <HAL_UART_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <UART3_Init+0x40>
		Error_Handler();
 80006dc:	f000 f806 	bl	80006ec <Error_Handler>
	}

}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000224 	.word	0x20000224
 80006e8:	40004800 	.word	0x40004800

080006ec <Error_Handler>:

void Error_Handler(void){
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  while(1);
 80006f0:	e7fe      	b.n	80006f0 <Error_Handler+0x4>
	...

080006f4 <brute_force_learning>:
void brute_force_learning(double input,
						  double weight,
						  double expected_value, /* amount the we increase the weight by (based on the difference between the expected value and predicted value
						  	  	  	  	  	  	 we would decide whether we want to increase or reduce the weight by this variable)*/
						  double step_amount,	 // epoch numbers
						  uint32_t itr){
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	b09b      	sub	sp, #108	; 0x6c
 80006f8:	af02      	add	r7, sp, #8
 80006fa:	ed87 0b08 	vstr	d0, [r7, #32]
 80006fe:	ed87 1b06 	vstr	d1, [r7, #24]
 8000702:	ed87 2b04 	vstr	d2, [r7, #16]
 8000706:	ed87 3b02 	vstr	d3, [r7, #8]
 800070a:	6078      	str	r0, [r7, #4]
double prediction, error;
double up_prediction, down_prediction, up_error, down_error;

	for(int i = 0; i < itr; i++){
 800070c:	2300      	movs	r3, #0
 800070e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000710:	e0a5      	b.n	800085e <brute_force_learning+0x16a>

		prediction = input * weight;
 8000712:	ed97 6b08 	vldr	d6, [r7, #32]
 8000716:	ed97 7b06 	vldr	d7, [r7, #24]
 800071a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800071e:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
		error = powf((prediction - expected_value), 2);
 8000722:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 8000726:	ed97 7b04 	vldr	d7, [r7, #16]
 800072a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800072e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000732:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000736:	eeb0 0a67 	vmov.f32	s0, s15
 800073a:	f003 fa85 	bl	8003c48 <powf>
 800073e:	eef0 7a40 	vmov.f32	s15, s0
 8000742:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000746:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48

		printmsg("Error: %f   Prediction: %f \r\n", error, prediction);
 800074a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800074e:	e9cd 3400 	strd	r3, r4, [sp]
 8000752:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000756:	4846      	ldr	r0, [pc, #280]	; (8000870 <brute_force_learning+0x17c>)
 8000758:	f7ff ff4a 	bl	80005f0 <printmsg>

		up_prediction = input * (weight + step_amount);
 800075c:	ed97 6b06 	vldr	d6, [r7, #24]
 8000760:	ed97 7b02 	vldr	d7, [r7, #8]
 8000764:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000768:	ed97 6b08 	vldr	d6, [r7, #32]
 800076c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000770:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
		up_error      = powf((up_prediction - expected_value), 2);
 8000774:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
 8000778:	ed97 7b04 	vldr	d7, [r7, #16]
 800077c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000780:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000784:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000788:	eeb0 0a67 	vmov.f32	s0, s15
 800078c:	f003 fa5c 	bl	8003c48 <powf>
 8000790:	eef0 7a40 	vmov.f32	s15, s0
 8000794:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000798:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38

		printmsg("Up Error: %f   Up Prediction: %f \r\n", up_error, up_prediction);
 800079c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80007a0:	e9cd 3400 	strd	r3, r4, [sp]
 80007a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80007a8:	4832      	ldr	r0, [pc, #200]	; (8000874 <brute_force_learning+0x180>)
 80007aa:	f7ff ff21 	bl	80005f0 <printmsg>

		down_prediction = input * (weight - step_amount);
 80007ae:	ed97 6b06 	vldr	d6, [r7, #24]
 80007b2:	ed97 7b02 	vldr	d7, [r7, #8]
 80007b6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80007ba:	ed97 6b08 	vldr	d6, [r7, #32]
 80007be:	ee26 7b07 	vmul.f64	d7, d6, d7
 80007c2:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
		down_error      = powf((down_prediction - expected_value), 2);
 80007c6:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 80007ca:	ed97 7b04 	vldr	d7, [r7, #16]
 80007ce:	ee36 7b47 	vsub.f64	d7, d6, d7
 80007d2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007d6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80007da:	eeb0 0a67 	vmov.f32	s0, s15
 80007de:	f003 fa33 	bl	8003c48 <powf>
 80007e2:	eef0 7a40 	vmov.f32	s15, s0
 80007e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007ea:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28

		printmsg("Down Error: %f   Down Prediction: %f \r\n", down_error, down_prediction);
 80007ee:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80007f2:	e9cd 3400 	strd	r3, r4, [sp]
 80007f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80007fa:	481f      	ldr	r0, [pc, #124]	; (8000878 <brute_force_learning+0x184>)
 80007fc:	f7ff fef8 	bl	80005f0 <printmsg>

		if(down_error < up_error){
 8000800:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8000804:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8000808:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800080c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000810:	d50c      	bpl.n	800082c <brute_force_learning+0x138>
			weight = weight - step_amount;
 8000812:	ed97 6b06 	vldr	d6, [r7, #24]
 8000816:	ed97 7b02 	vldr	d7, [r7, #8]
 800081a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800081e:	ed87 7b06 	vstr	d7, [r7, #24]
			printmsg("Weight: %f   \r\n\r\n", weight);
 8000822:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000826:	4815      	ldr	r0, [pc, #84]	; (800087c <brute_force_learning+0x188>)
 8000828:	f7ff fee2 	bl	80005f0 <printmsg>
		}

		if(down_error > up_error){
 800082c:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8000830:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8000834:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800083c:	dd0c      	ble.n	8000858 <brute_force_learning+0x164>
			weight = weight + step_amount;
 800083e:	ed97 6b06 	vldr	d6, [r7, #24]
 8000842:	ed97 7b02 	vldr	d7, [r7, #8]
 8000846:	ee36 7b07 	vadd.f64	d7, d6, d7
 800084a:	ed87 7b06 	vstr	d7, [r7, #24]
			printmsg("Weight: %f   \r\n\r\n", weight);
 800084e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000852:	480a      	ldr	r0, [pc, #40]	; (800087c <brute_force_learning+0x188>)
 8000854:	f7ff fecc 	bl	80005f0 <printmsg>
	for(int i = 0; i < itr; i++){
 8000858:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800085a:	3301      	adds	r3, #1
 800085c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800085e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	429a      	cmp	r2, r3
 8000864:	f63f af55 	bhi.w	8000712 <brute_force_learning+0x1e>
		}
	}
}
 8000868:	bf00      	nop
 800086a:	3764      	adds	r7, #100	; 0x64
 800086c:	46bd      	mov	sp, r7
 800086e:	bd90      	pop	{r4, r7, pc}
 8000870:	08003f78 	.word	0x08003f78
 8000874:	08003f98 	.word	0x08003f98
 8000878:	08003fbc 	.word	0x08003fbc
 800087c:	08003fe4 	.word	0x08003fe4

08000880 <HAL_MspInit>:
 *      Author: Mateus Sousa
 */

#include "main.h"

void HAL_MspInit(void){
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	//__HAL_RCC_PWR_CLK_ENABLE();
	//__HAL_RCC_SYSCFG_CLK_ENABLE();

	//1. Set up the priority grouping of the arm cortex mx processor
	// This line is not required because priority grouping will be 4 by default
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000884:	2003      	movs	r0, #3
 8000886:	f000 fa03 	bl	8000c90 <HAL_NVIC_SetPriorityGrouping>
	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 800088a:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <HAL_MspInit+0x40>)
 800088c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800088e:	4a0c      	ldr	r2, [pc, #48]	; (80008c0 <HAL_MspInit+0x40>)
 8000890:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000894:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	2100      	movs	r1, #0
 800089a:	f06f 000b 	mvn.w	r0, #11
 800089e:	f000 fa02 	bl	8000ca6 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2100      	movs	r1, #0
 80008a6:	f06f 000a 	mvn.w	r0, #10
 80008aa:	f000 f9fc 	bl	8000ca6 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2100      	movs	r1, #0
 80008b2:	f06f 0009 	mvn.w	r0, #9
 80008b6:	f000 f9f6 	bl	8000ca6 <HAL_NVIC_SetPriority>

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	e000ed00 	.word	0xe000ed00

080008c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart){
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08a      	sub	sp, #40	; 0x28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef gpio_uart;
	//here we are going to do the low level inits. of the USART2 peripheral

	//1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	__HAL_RCC_USART3_CLK_ENABLE();
 80008cc:	4b1a      	ldr	r3, [pc, #104]	; (8000938 <HAL_UART_MspInit+0x74>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d0:	4a19      	ldr	r2, [pc, #100]	; (8000938 <HAL_UART_MspInit+0x74>)
 80008d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008d6:	6413      	str	r3, [r2, #64]	; 0x40
 80008d8:	4b17      	ldr	r3, [pc, #92]	; (8000938 <HAL_UART_MspInit+0x74>)
 80008da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80008e4:	4b14      	ldr	r3, [pc, #80]	; (8000938 <HAL_UART_MspInit+0x74>)
 80008e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e8:	4a13      	ldr	r2, [pc, #76]	; (8000938 <HAL_UART_MspInit+0x74>)
 80008ea:	f043 0308 	orr.w	r3, r3, #8
 80008ee:	6313      	str	r3, [r2, #48]	; 0x30
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <HAL_UART_MspInit+0x74>)
 80008f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f4:	f003 0308 	and.w	r3, r3, #8
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	68fb      	ldr	r3, [r7, #12]

	//2. Do the pin muxing configurations
	gpio_uart.Pin = GPIO_PIN_8|GPIO_PIN_9; //UART2_TX
 80008fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000900:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 8000906:	2301      	movs	r3, #1
 8000908:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART3;
 800090e:	2307      	movs	r3, #7
 8000910:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(GPIOD, &gpio_uart);
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4619      	mov	r1, r3
 8000918:	4808      	ldr	r0, [pc, #32]	; (800093c <HAL_UART_MspInit+0x78>)
 800091a:	f000 f9fb 	bl	8000d14 <HAL_GPIO_Init>

	//3. Enable the IRQ and set up the priority (NVIC settings)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 800091e:	2026      	movs	r0, #38	; 0x26
 8000920:	f000 f9dd 	bl	8000cde <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	210f      	movs	r1, #15
 8000928:	2026      	movs	r0, #38	; 0x26
 800092a:	f000 f9bc 	bl	8000ca6 <HAL_NVIC_SetPriority>

}
 800092e:	bf00      	nop
 8000930:	3728      	adds	r7, #40	; 0x28
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800
 800093c:	40020c00 	.word	0x40020c00

08000940 <SysTick_Handler>:
 */

#include "main.h"
#include "stm32f7xx_it.h"

void SysTick_Handler(void){
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000944:	f000 f8b4 	bl	8000ab0 <HAL_IncTick>
}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}

0800094c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000954:	4a14      	ldr	r2, [pc, #80]	; (80009a8 <_sbrk+0x5c>)
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <_sbrk+0x60>)
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000960:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <_sbrk+0x64>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d102      	bne.n	800096e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <_sbrk+0x64>)
 800096a:	4a12      	ldr	r2, [pc, #72]	; (80009b4 <_sbrk+0x68>)
 800096c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <_sbrk+0x64>)
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4413      	add	r3, r2
 8000976:	693a      	ldr	r2, [r7, #16]
 8000978:	429a      	cmp	r2, r3
 800097a:	d207      	bcs.n	800098c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800097c:	f001 f96c 	bl	8001c58 <__errno>
 8000980:	4602      	mov	r2, r0
 8000982:	230c      	movs	r3, #12
 8000984:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000986:	f04f 33ff 	mov.w	r3, #4294967295
 800098a:	e009      	b.n	80009a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <_sbrk+0x64>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000992:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <_sbrk+0x64>)
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4413      	add	r3, r2
 800099a:	4a05      	ldr	r2, [pc, #20]	; (80009b0 <_sbrk+0x64>)
 800099c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800099e:	68fb      	ldr	r3, [r7, #12]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3718      	adds	r7, #24
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20080000 	.word	0x20080000
 80009ac:	00000400 	.word	0x00000400
 80009b0:	20000218 	.word	0x20000218
 80009b4:	200002b0 	.word	0x200002b0

080009b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <SystemInit+0x28>)
 80009be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009c2:	4a07      	ldr	r2, [pc, #28]	; (80009e0 <SystemInit+0x28>)
 80009c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <SystemInit+0x28>)
 80009ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009d2:	609a      	str	r2, [r3, #8]
#endif
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a1c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80009e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80009ea:	e003      	b.n	80009f4 <LoopCopyDataInit>

080009ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80009ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80009f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80009f2:	3104      	adds	r1, #4

080009f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80009f4:	480b      	ldr	r0, [pc, #44]	; (8000a24 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80009f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80009fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80009fc:	d3f6      	bcc.n	80009ec <CopyDataInit>
  ldr  r2, =_sbss
 80009fe:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a00:	e002      	b.n	8000a08 <LoopFillZerobss>

08000a02 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a04:	f842 3b04 	str.w	r3, [r2], #4

08000a08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a0c:	d3f9      	bcc.n	8000a02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a0e:	f7ff ffd3 	bl	80009b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a12:	f001 f927 	bl	8001c64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a16:	f7ff fe11 	bl	800063c <main>
  bx  lr    
 8000a1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a1c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000a20:	080044e0 	.word	0x080044e0
  ldr  r0, =_sdata
 8000a24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a28:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 8000a2c:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 8000a30:	200002ac 	.word	0x200002ac

08000a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a34:	e7fe      	b.n	8000a34 <ADC_IRQHandler>

08000a36 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a3a:	2003      	movs	r0, #3
 8000a3c:	f000 f928 	bl	8000c90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a40:	2000      	movs	r0, #0
 8000a42:	f000 f805 	bl	8000a50 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000a46:	f7ff ff1b 	bl	8000880 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000a4a:	2300      	movs	r3, #0
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <HAL_InitTick+0x54>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <HAL_InitTick+0x58>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	4619      	mov	r1, r3
 8000a62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f000 f943 	bl	8000cfa <HAL_SYSTICK_Config>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e00e      	b.n	8000a9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2b0f      	cmp	r3, #15
 8000a82:	d80a      	bhi.n	8000a9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a84:	2200      	movs	r2, #0
 8000a86:	6879      	ldr	r1, [r7, #4]
 8000a88:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8c:	f000 f90b 	bl	8000ca6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a90:	4a06      	ldr	r2, [pc, #24]	; (8000aac <HAL_InitTick+0x5c>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a96:	2300      	movs	r3, #0
 8000a98:	e000      	b.n	8000a9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000020 	.word	0x20000020
 8000aa8:	20000028 	.word	0x20000028
 8000aac:	20000024 	.word	0x20000024

08000ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_IncTick+0x20>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_IncTick+0x24>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4413      	add	r3, r2
 8000ac0:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <HAL_IncTick+0x24>)
 8000ac2:	6013      	str	r3, [r2, #0]
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	20000028 	.word	0x20000028
 8000ad4:	200002a4 	.word	0x200002a4

08000ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return uwTick;
 8000adc:	4b03      	ldr	r3, [pc, #12]	; (8000aec <HAL_GetTick+0x14>)
 8000ade:	681b      	ldr	r3, [r3, #0]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	200002a4 	.word	0x200002a4

08000af0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f003 0307 	and.w	r3, r3, #7
 8000afe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <__NVIC_SetPriorityGrouping+0x40>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b06:	68ba      	ldr	r2, [r7, #8]
 8000b08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <__NVIC_SetPriorityGrouping+0x44>)
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b1e:	4a04      	ldr	r2, [pc, #16]	; (8000b30 <__NVIC_SetPriorityGrouping+0x40>)
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	60d3      	str	r3, [r2, #12]
}
 8000b24:	bf00      	nop
 8000b26:	3714      	adds	r7, #20
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000ed00 	.word	0xe000ed00
 8000b34:	05fa0000 	.word	0x05fa0000

08000b38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <__NVIC_GetPriorityGrouping+0x18>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	0a1b      	lsrs	r3, r3, #8
 8000b42:	f003 0307 	and.w	r3, r3, #7
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	db0b      	blt.n	8000b7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	f003 021f 	and.w	r2, r3, #31
 8000b6c:	4907      	ldr	r1, [pc, #28]	; (8000b8c <__NVIC_EnableIRQ+0x38>)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	095b      	lsrs	r3, r3, #5
 8000b74:	2001      	movs	r0, #1
 8000b76:	fa00 f202 	lsl.w	r2, r0, r2
 8000b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	e000e100 	.word	0xe000e100

08000b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	6039      	str	r1, [r7, #0]
 8000b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	db0a      	blt.n	8000bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	b2da      	uxtb	r2, r3
 8000ba8:	490c      	ldr	r1, [pc, #48]	; (8000bdc <__NVIC_SetPriority+0x4c>)
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	0112      	lsls	r2, r2, #4
 8000bb0:	b2d2      	uxtb	r2, r2
 8000bb2:	440b      	add	r3, r1
 8000bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb8:	e00a      	b.n	8000bd0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	4908      	ldr	r1, [pc, #32]	; (8000be0 <__NVIC_SetPriority+0x50>)
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	f003 030f 	and.w	r3, r3, #15
 8000bc6:	3b04      	subs	r3, #4
 8000bc8:	0112      	lsls	r2, r2, #4
 8000bca:	b2d2      	uxtb	r2, r2
 8000bcc:	440b      	add	r3, r1
 8000bce:	761a      	strb	r2, [r3, #24]
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000e100 	.word	0xe000e100
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b089      	sub	sp, #36	; 0x24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	f003 0307 	and.w	r3, r3, #7
 8000bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	f1c3 0307 	rsb	r3, r3, #7
 8000bfe:	2b04      	cmp	r3, #4
 8000c00:	bf28      	it	cs
 8000c02:	2304      	movcs	r3, #4
 8000c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	3304      	adds	r3, #4
 8000c0a:	2b06      	cmp	r3, #6
 8000c0c:	d902      	bls.n	8000c14 <NVIC_EncodePriority+0x30>
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3b03      	subs	r3, #3
 8000c12:	e000      	b.n	8000c16 <NVIC_EncodePriority+0x32>
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c18:	f04f 32ff 	mov.w	r2, #4294967295
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	43da      	mvns	r2, r3
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	401a      	ands	r2, r3
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	fa01 f303 	lsl.w	r3, r1, r3
 8000c36:	43d9      	mvns	r1, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c3c:	4313      	orrs	r3, r2
         );
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3724      	adds	r7, #36	; 0x24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
	...

08000c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c5c:	d301      	bcc.n	8000c62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e00f      	b.n	8000c82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c62:	4a0a      	ldr	r2, [pc, #40]	; (8000c8c <SysTick_Config+0x40>)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c6a:	210f      	movs	r1, #15
 8000c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c70:	f7ff ff8e 	bl	8000b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <SysTick_Config+0x40>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c7a:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <SysTick_Config+0x40>)
 8000c7c:	2207      	movs	r2, #7
 8000c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	e000e010 	.word	0xe000e010

08000c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f7ff ff29 	bl	8000af0 <__NVIC_SetPriorityGrouping>
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b086      	sub	sp, #24
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	4603      	mov	r3, r0
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	607a      	str	r2, [r7, #4]
 8000cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb8:	f7ff ff3e 	bl	8000b38 <__NVIC_GetPriorityGrouping>
 8000cbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	68b9      	ldr	r1, [r7, #8]
 8000cc2:	6978      	ldr	r0, [r7, #20]
 8000cc4:	f7ff ff8e 	bl	8000be4 <NVIC_EncodePriority>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cce:	4611      	mov	r1, r2
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ff5d 	bl	8000b90 <__NVIC_SetPriority>
}
 8000cd6:	bf00      	nop
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b082      	sub	sp, #8
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ff31 	bl	8000b54 <__NVIC_EnableIRQ>
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff ffa2 	bl	8000c4c <SysTick_Config>
 8000d08:	4603      	mov	r3, r0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b089      	sub	sp, #36	; 0x24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
 8000d32:	e175      	b.n	8001020 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000d34:	2201      	movs	r2, #1
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	697a      	ldr	r2, [r7, #20]
 8000d44:	4013      	ands	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	f040 8164 	bne.w	800101a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d00b      	beq.n	8000d72 <HAL_GPIO_Init+0x5e>
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d007      	beq.n	8000d72 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d66:	2b11      	cmp	r3, #17
 8000d68:	d003      	beq.n	8000d72 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	2b12      	cmp	r3, #18
 8000d70:	d130      	bne.n	8000dd4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43db      	mvns	r3, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4013      	ands	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	68da      	ldr	r2, [r3, #12]
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000da8:	2201      	movs	r2, #1
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4013      	ands	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	091b      	lsrs	r3, r3, #4
 8000dbe:	f003 0201 	and.w	r2, r3, #1
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	2203      	movs	r2, #3
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	43db      	mvns	r3, r3
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	4013      	ands	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	689a      	ldr	r2, [r3, #8]
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d003      	beq.n	8000e14 <HAL_GPIO_Init+0x100>
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	2b12      	cmp	r3, #18
 8000e12:	d123      	bne.n	8000e5c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	08da      	lsrs	r2, r3, #3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3208      	adds	r2, #8
 8000e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	f003 0307 	and.w	r3, r3, #7
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	220f      	movs	r2, #15
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	4013      	ands	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	691a      	ldr	r2, [r3, #16]
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	08da      	lsrs	r2, r3, #3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	3208      	adds	r2, #8
 8000e56:	69b9      	ldr	r1, [r7, #24]
 8000e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	2203      	movs	r2, #3
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 0203 	and.w	r2, r3, #3
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	f000 80be 	beq.w	800101a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9e:	4b65      	ldr	r3, [pc, #404]	; (8001034 <HAL_GPIO_Init+0x320>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	4a64      	ldr	r2, [pc, #400]	; (8001034 <HAL_GPIO_Init+0x320>)
 8000ea4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eaa:	4b62      	ldr	r3, [pc, #392]	; (8001034 <HAL_GPIO_Init+0x320>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000eb6:	4a60      	ldr	r2, [pc, #384]	; (8001038 <HAL_GPIO_Init+0x324>)
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	089b      	lsrs	r3, r3, #2
 8000ebc:	3302      	adds	r3, #2
 8000ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f003 0303 	and.w	r3, r3, #3
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	220f      	movs	r2, #15
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a57      	ldr	r2, [pc, #348]	; (800103c <HAL_GPIO_Init+0x328>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d037      	beq.n	8000f52 <HAL_GPIO_Init+0x23e>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a56      	ldr	r2, [pc, #344]	; (8001040 <HAL_GPIO_Init+0x32c>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d031      	beq.n	8000f4e <HAL_GPIO_Init+0x23a>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a55      	ldr	r2, [pc, #340]	; (8001044 <HAL_GPIO_Init+0x330>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d02b      	beq.n	8000f4a <HAL_GPIO_Init+0x236>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a54      	ldr	r2, [pc, #336]	; (8001048 <HAL_GPIO_Init+0x334>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d025      	beq.n	8000f46 <HAL_GPIO_Init+0x232>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a53      	ldr	r2, [pc, #332]	; (800104c <HAL_GPIO_Init+0x338>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d01f      	beq.n	8000f42 <HAL_GPIO_Init+0x22e>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a52      	ldr	r2, [pc, #328]	; (8001050 <HAL_GPIO_Init+0x33c>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d019      	beq.n	8000f3e <HAL_GPIO_Init+0x22a>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a51      	ldr	r2, [pc, #324]	; (8001054 <HAL_GPIO_Init+0x340>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d013      	beq.n	8000f3a <HAL_GPIO_Init+0x226>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a50      	ldr	r2, [pc, #320]	; (8001058 <HAL_GPIO_Init+0x344>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d00d      	beq.n	8000f36 <HAL_GPIO_Init+0x222>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a4f      	ldr	r2, [pc, #316]	; (800105c <HAL_GPIO_Init+0x348>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d007      	beq.n	8000f32 <HAL_GPIO_Init+0x21e>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a4e      	ldr	r2, [pc, #312]	; (8001060 <HAL_GPIO_Init+0x34c>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d101      	bne.n	8000f2e <HAL_GPIO_Init+0x21a>
 8000f2a:	2309      	movs	r3, #9
 8000f2c:	e012      	b.n	8000f54 <HAL_GPIO_Init+0x240>
 8000f2e:	230a      	movs	r3, #10
 8000f30:	e010      	b.n	8000f54 <HAL_GPIO_Init+0x240>
 8000f32:	2308      	movs	r3, #8
 8000f34:	e00e      	b.n	8000f54 <HAL_GPIO_Init+0x240>
 8000f36:	2307      	movs	r3, #7
 8000f38:	e00c      	b.n	8000f54 <HAL_GPIO_Init+0x240>
 8000f3a:	2306      	movs	r3, #6
 8000f3c:	e00a      	b.n	8000f54 <HAL_GPIO_Init+0x240>
 8000f3e:	2305      	movs	r3, #5
 8000f40:	e008      	b.n	8000f54 <HAL_GPIO_Init+0x240>
 8000f42:	2304      	movs	r3, #4
 8000f44:	e006      	b.n	8000f54 <HAL_GPIO_Init+0x240>
 8000f46:	2303      	movs	r3, #3
 8000f48:	e004      	b.n	8000f54 <HAL_GPIO_Init+0x240>
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	e002      	b.n	8000f54 <HAL_GPIO_Init+0x240>
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e000      	b.n	8000f54 <HAL_GPIO_Init+0x240>
 8000f52:	2300      	movs	r3, #0
 8000f54:	69fa      	ldr	r2, [r7, #28]
 8000f56:	f002 0203 	and.w	r2, r2, #3
 8000f5a:	0092      	lsls	r2, r2, #2
 8000f5c:	4093      	lsls	r3, r2
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f64:	4934      	ldr	r1, [pc, #208]	; (8001038 <HAL_GPIO_Init+0x324>)
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	089b      	lsrs	r3, r3, #2
 8000f6a:	3302      	adds	r3, #2
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f72:	4b3c      	ldr	r3, [pc, #240]	; (8001064 <HAL_GPIO_Init+0x350>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f96:	4a33      	ldr	r2, [pc, #204]	; (8001064 <HAL_GPIO_Init+0x350>)
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f9c:	4b31      	ldr	r3, [pc, #196]	; (8001064 <HAL_GPIO_Init+0x350>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fc0:	4a28      	ldr	r2, [pc, #160]	; (8001064 <HAL_GPIO_Init+0x350>)
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fc6:	4b27      	ldr	r3, [pc, #156]	; (8001064 <HAL_GPIO_Init+0x350>)
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fea:	4a1e      	ldr	r2, [pc, #120]	; (8001064 <HAL_GPIO_Init+0x350>)
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ff0:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <HAL_GPIO_Init+0x350>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	4313      	orrs	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001014:	4a13      	ldr	r2, [pc, #76]	; (8001064 <HAL_GPIO_Init+0x350>)
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3301      	adds	r3, #1
 800101e:	61fb      	str	r3, [r7, #28]
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	2b0f      	cmp	r3, #15
 8001024:	f67f ae86 	bls.w	8000d34 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001028:	bf00      	nop
 800102a:	3724      	adds	r7, #36	; 0x24
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	40023800 	.word	0x40023800
 8001038:	40013800 	.word	0x40013800
 800103c:	40020000 	.word	0x40020000
 8001040:	40020400 	.word	0x40020400
 8001044:	40020800 	.word	0x40020800
 8001048:	40020c00 	.word	0x40020c00
 800104c:	40021000 	.word	0x40021000
 8001050:	40021400 	.word	0x40021400
 8001054:	40021800 	.word	0x40021800
 8001058:	40021c00 	.word	0x40021c00
 800105c:	40022000 	.word	0x40022000
 8001060:	40022400 	.word	0x40022400
 8001064:	40013c00 	.word	0x40013c00

08001068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	2300      	movs	r3, #0
 8001078:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800107e:	4b63      	ldr	r3, [pc, #396]	; (800120c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	f003 030c 	and.w	r3, r3, #12
 8001086:	2b04      	cmp	r3, #4
 8001088:	d007      	beq.n	800109a <HAL_RCC_GetSysClockFreq+0x32>
 800108a:	2b08      	cmp	r3, #8
 800108c:	d008      	beq.n	80010a0 <HAL_RCC_GetSysClockFreq+0x38>
 800108e:	2b00      	cmp	r3, #0
 8001090:	f040 80b4 	bne.w	80011fc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001094:	4b5e      	ldr	r3, [pc, #376]	; (8001210 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001096:	60bb      	str	r3, [r7, #8]
      break;
 8001098:	e0b3      	b.n	8001202 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800109a:	4b5e      	ldr	r3, [pc, #376]	; (8001214 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800109c:	60bb      	str	r3, [r7, #8]
      break;
 800109e:	e0b0      	b.n	8001202 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010a0:	4b5a      	ldr	r3, [pc, #360]	; (800120c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010a8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80010aa:	4b58      	ldr	r3, [pc, #352]	; (800120c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d04a      	beq.n	800114c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010b6:	4b55      	ldr	r3, [pc, #340]	; (800120c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	099b      	lsrs	r3, r3, #6
 80010bc:	f04f 0400 	mov.w	r4, #0
 80010c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	ea03 0501 	and.w	r5, r3, r1
 80010cc:	ea04 0602 	and.w	r6, r4, r2
 80010d0:	4629      	mov	r1, r5
 80010d2:	4632      	mov	r2, r6
 80010d4:	f04f 0300 	mov.w	r3, #0
 80010d8:	f04f 0400 	mov.w	r4, #0
 80010dc:	0154      	lsls	r4, r2, #5
 80010de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80010e2:	014b      	lsls	r3, r1, #5
 80010e4:	4619      	mov	r1, r3
 80010e6:	4622      	mov	r2, r4
 80010e8:	1b49      	subs	r1, r1, r5
 80010ea:	eb62 0206 	sbc.w	r2, r2, r6
 80010ee:	f04f 0300 	mov.w	r3, #0
 80010f2:	f04f 0400 	mov.w	r4, #0
 80010f6:	0194      	lsls	r4, r2, #6
 80010f8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80010fc:	018b      	lsls	r3, r1, #6
 80010fe:	1a5b      	subs	r3, r3, r1
 8001100:	eb64 0402 	sbc.w	r4, r4, r2
 8001104:	f04f 0100 	mov.w	r1, #0
 8001108:	f04f 0200 	mov.w	r2, #0
 800110c:	00e2      	lsls	r2, r4, #3
 800110e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001112:	00d9      	lsls	r1, r3, #3
 8001114:	460b      	mov	r3, r1
 8001116:	4614      	mov	r4, r2
 8001118:	195b      	adds	r3, r3, r5
 800111a:	eb44 0406 	adc.w	r4, r4, r6
 800111e:	f04f 0100 	mov.w	r1, #0
 8001122:	f04f 0200 	mov.w	r2, #0
 8001126:	0262      	lsls	r2, r4, #9
 8001128:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800112c:	0259      	lsls	r1, r3, #9
 800112e:	460b      	mov	r3, r1
 8001130:	4614      	mov	r4, r2
 8001132:	4618      	mov	r0, r3
 8001134:	4621      	mov	r1, r4
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f04f 0400 	mov.w	r4, #0
 800113c:	461a      	mov	r2, r3
 800113e:	4623      	mov	r3, r4
 8001140:	f7ff f8d6 	bl	80002f0 <__aeabi_uldivmod>
 8001144:	4603      	mov	r3, r0
 8001146:	460c      	mov	r4, r1
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	e049      	b.n	80011e0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800114c:	4b2f      	ldr	r3, [pc, #188]	; (800120c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	099b      	lsrs	r3, r3, #6
 8001152:	f04f 0400 	mov.w	r4, #0
 8001156:	f240 11ff 	movw	r1, #511	; 0x1ff
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	ea03 0501 	and.w	r5, r3, r1
 8001162:	ea04 0602 	and.w	r6, r4, r2
 8001166:	4629      	mov	r1, r5
 8001168:	4632      	mov	r2, r6
 800116a:	f04f 0300 	mov.w	r3, #0
 800116e:	f04f 0400 	mov.w	r4, #0
 8001172:	0154      	lsls	r4, r2, #5
 8001174:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001178:	014b      	lsls	r3, r1, #5
 800117a:	4619      	mov	r1, r3
 800117c:	4622      	mov	r2, r4
 800117e:	1b49      	subs	r1, r1, r5
 8001180:	eb62 0206 	sbc.w	r2, r2, r6
 8001184:	f04f 0300 	mov.w	r3, #0
 8001188:	f04f 0400 	mov.w	r4, #0
 800118c:	0194      	lsls	r4, r2, #6
 800118e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001192:	018b      	lsls	r3, r1, #6
 8001194:	1a5b      	subs	r3, r3, r1
 8001196:	eb64 0402 	sbc.w	r4, r4, r2
 800119a:	f04f 0100 	mov.w	r1, #0
 800119e:	f04f 0200 	mov.w	r2, #0
 80011a2:	00e2      	lsls	r2, r4, #3
 80011a4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80011a8:	00d9      	lsls	r1, r3, #3
 80011aa:	460b      	mov	r3, r1
 80011ac:	4614      	mov	r4, r2
 80011ae:	195b      	adds	r3, r3, r5
 80011b0:	eb44 0406 	adc.w	r4, r4, r6
 80011b4:	f04f 0100 	mov.w	r1, #0
 80011b8:	f04f 0200 	mov.w	r2, #0
 80011bc:	02a2      	lsls	r2, r4, #10
 80011be:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80011c2:	0299      	lsls	r1, r3, #10
 80011c4:	460b      	mov	r3, r1
 80011c6:	4614      	mov	r4, r2
 80011c8:	4618      	mov	r0, r3
 80011ca:	4621      	mov	r1, r4
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f04f 0400 	mov.w	r4, #0
 80011d2:	461a      	mov	r2, r3
 80011d4:	4623      	mov	r3, r4
 80011d6:	f7ff f88b 	bl	80002f0 <__aeabi_uldivmod>
 80011da:	4603      	mov	r3, r0
 80011dc:	460c      	mov	r4, r1
 80011de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80011e0:	4b0a      	ldr	r3, [pc, #40]	; (800120c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	0c1b      	lsrs	r3, r3, #16
 80011e6:	f003 0303 	and.w	r3, r3, #3
 80011ea:	3301      	adds	r3, #1
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80011f0:	68fa      	ldr	r2, [r7, #12]
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f8:	60bb      	str	r3, [r7, #8]
      break;
 80011fa:	e002      	b.n	8001202 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80011fe:	60bb      	str	r3, [r7, #8]
      break;
 8001200:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001202:	68bb      	ldr	r3, [r7, #8]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800120c:	40023800 	.word	0x40023800
 8001210:	00f42400 	.word	0x00f42400
 8001214:	007a1200 	.word	0x007a1200

08001218 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800121c:	4b03      	ldr	r3, [pc, #12]	; (800122c <HAL_RCC_GetHCLKFreq+0x14>)
 800121e:	681b      	ldr	r3, [r3, #0]
}
 8001220:	4618      	mov	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20000020 	.word	0x20000020

08001230 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001234:	f7ff fff0 	bl	8001218 <HAL_RCC_GetHCLKFreq>
 8001238:	4601      	mov	r1, r0
 800123a:	4b05      	ldr	r3, [pc, #20]	; (8001250 <HAL_RCC_GetPCLK1Freq+0x20>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	0a9b      	lsrs	r3, r3, #10
 8001240:	f003 0307 	and.w	r3, r3, #7
 8001244:	4a03      	ldr	r2, [pc, #12]	; (8001254 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001246:	5cd3      	ldrb	r3, [r2, r3]
 8001248:	fa21 f303 	lsr.w	r3, r1, r3
}
 800124c:	4618      	mov	r0, r3
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40023800 	.word	0x40023800
 8001254:	08003ff8 	.word	0x08003ff8

08001258 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800125c:	f7ff ffdc 	bl	8001218 <HAL_RCC_GetHCLKFreq>
 8001260:	4601      	mov	r1, r0
 8001262:	4b05      	ldr	r3, [pc, #20]	; (8001278 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	0b5b      	lsrs	r3, r3, #13
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	4a03      	ldr	r2, [pc, #12]	; (800127c <HAL_RCC_GetPCLK2Freq+0x24>)
 800126e:	5cd3      	ldrb	r3, [r2, r3]
 8001270:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001274:	4618      	mov	r0, r3
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40023800 	.word	0x40023800
 800127c:	08003ff8 	.word	0x08003ff8

08001280 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d101      	bne.n	8001292 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e040      	b.n	8001314 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001296:	2b00      	cmp	r3, #0
 8001298:	d106      	bne.n	80012a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff fb0e 	bl	80008c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2224      	movs	r2, #36	; 0x24
 80012ac:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 0201 	bic.w	r2, r2, #1
 80012bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f000 f8be 	bl	8001440 <UART_SetConfig>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d101      	bne.n	80012ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e022      	b.n	8001314 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d002      	beq.n	80012dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f000 fb5c 	bl	8001994 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80012ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	689a      	ldr	r2, [r3, #8]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80012fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f042 0201 	orr.w	r2, r2, #1
 800130a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f000 fbe3 	bl	8001ad8 <UART_CheckIdleState>
 8001312:	4603      	mov	r3, r0
}
 8001314:	4618      	mov	r0, r3
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	; 0x28
 8001320:	af02      	add	r7, sp, #8
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	4613      	mov	r3, r2
 800132a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001330:	2b20      	cmp	r3, #32
 8001332:	d17f      	bne.n	8001434 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d002      	beq.n	8001340 <HAL_UART_Transmit+0x24>
 800133a:	88fb      	ldrh	r3, [r7, #6]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d101      	bne.n	8001344 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e078      	b.n	8001436 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800134a:	2b01      	cmp	r3, #1
 800134c:	d101      	bne.n	8001352 <HAL_UART_Transmit+0x36>
 800134e:	2302      	movs	r3, #2
 8001350:	e071      	b.n	8001436 <HAL_UART_Transmit+0x11a>
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2201      	movs	r2, #1
 8001356:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2200      	movs	r2, #0
 800135e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2221      	movs	r2, #33	; 0x21
 8001364:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001366:	f7ff fbb7 	bl	8000ad8 <HAL_GetTick>
 800136a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	88fa      	ldrh	r2, [r7, #6]
 8001370:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	88fa      	ldrh	r2, [r7, #6]
 8001378:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001384:	d108      	bne.n	8001398 <HAL_UART_Transmit+0x7c>
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d104      	bne.n	8001398 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	61bb      	str	r3, [r7, #24]
 8001396:	e003      	b.n	80013a0 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800139c:	2300      	movs	r3, #0
 800139e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2200      	movs	r2, #0
 80013a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80013a8:	e02c      	b.n	8001404 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	2200      	movs	r2, #0
 80013b2:	2180      	movs	r1, #128	; 0x80
 80013b4:	68f8      	ldr	r0, [r7, #12]
 80013b6:	f000 fbd4 	bl	8001b62 <UART_WaitOnFlagUntilTimeout>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e038      	b.n	8001436 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10b      	bne.n	80013e2 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	461a      	mov	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80013d8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	3302      	adds	r3, #2
 80013de:	61bb      	str	r3, [r7, #24]
 80013e0:	e007      	b.n	80013f2 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	781a      	ldrb	r2, [r3, #0]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	3301      	adds	r3, #1
 80013f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	3b01      	subs	r3, #1
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800140a:	b29b      	uxth	r3, r3
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1cc      	bne.n	80013aa <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	2200      	movs	r2, #0
 8001418:	2140      	movs	r1, #64	; 0x40
 800141a:	68f8      	ldr	r0, [r7, #12]
 800141c:	f000 fba1 	bl	8001b62 <UART_WaitOnFlagUntilTimeout>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e005      	b.n	8001436 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2220      	movs	r2, #32
 800142e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8001430:	2300      	movs	r3, #0
 8001432:	e000      	b.n	8001436 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8001434:	2302      	movs	r3, #2
  }
}
 8001436:	4618      	mov	r0, r3
 8001438:	3720      	adds	r7, #32
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8001448:	2300      	movs	r3, #0
 800144a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800144c:	2300      	movs	r3, #0
 800144e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	691b      	ldr	r3, [r3, #16]
 8001458:	431a      	orrs	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	431a      	orrs	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	69db      	ldr	r3, [r3, #28]
 8001464:	4313      	orrs	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	4bb1      	ldr	r3, [pc, #708]	; (8001734 <UART_SetConfig+0x2f4>)
 8001470:	4013      	ands	r3, r2
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	6812      	ldr	r2, [r2, #0]
 8001476:	6939      	ldr	r1, [r7, #16]
 8001478:	430b      	orrs	r3, r1
 800147a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	68da      	ldr	r2, [r3, #12]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	430a      	orrs	r2, r1
 8001490:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4313      	orrs	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a9f      	ldr	r2, [pc, #636]	; (8001738 <UART_SetConfig+0x2f8>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d121      	bne.n	8001504 <UART_SetConfig+0xc4>
 80014c0:	4b9e      	ldr	r3, [pc, #632]	; (800173c <UART_SetConfig+0x2fc>)
 80014c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014c6:	f003 0303 	and.w	r3, r3, #3
 80014ca:	2b03      	cmp	r3, #3
 80014cc:	d816      	bhi.n	80014fc <UART_SetConfig+0xbc>
 80014ce:	a201      	add	r2, pc, #4	; (adr r2, 80014d4 <UART_SetConfig+0x94>)
 80014d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d4:	080014e5 	.word	0x080014e5
 80014d8:	080014f1 	.word	0x080014f1
 80014dc:	080014eb 	.word	0x080014eb
 80014e0:	080014f7 	.word	0x080014f7
 80014e4:	2301      	movs	r3, #1
 80014e6:	77fb      	strb	r3, [r7, #31]
 80014e8:	e151      	b.n	800178e <UART_SetConfig+0x34e>
 80014ea:	2302      	movs	r3, #2
 80014ec:	77fb      	strb	r3, [r7, #31]
 80014ee:	e14e      	b.n	800178e <UART_SetConfig+0x34e>
 80014f0:	2304      	movs	r3, #4
 80014f2:	77fb      	strb	r3, [r7, #31]
 80014f4:	e14b      	b.n	800178e <UART_SetConfig+0x34e>
 80014f6:	2308      	movs	r3, #8
 80014f8:	77fb      	strb	r3, [r7, #31]
 80014fa:	e148      	b.n	800178e <UART_SetConfig+0x34e>
 80014fc:	2310      	movs	r3, #16
 80014fe:	77fb      	strb	r3, [r7, #31]
 8001500:	bf00      	nop
 8001502:	e144      	b.n	800178e <UART_SetConfig+0x34e>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a8d      	ldr	r2, [pc, #564]	; (8001740 <UART_SetConfig+0x300>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d134      	bne.n	8001578 <UART_SetConfig+0x138>
 800150e:	4b8b      	ldr	r3, [pc, #556]	; (800173c <UART_SetConfig+0x2fc>)
 8001510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001514:	f003 030c 	and.w	r3, r3, #12
 8001518:	2b0c      	cmp	r3, #12
 800151a:	d829      	bhi.n	8001570 <UART_SetConfig+0x130>
 800151c:	a201      	add	r2, pc, #4	; (adr r2, 8001524 <UART_SetConfig+0xe4>)
 800151e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001522:	bf00      	nop
 8001524:	08001559 	.word	0x08001559
 8001528:	08001571 	.word	0x08001571
 800152c:	08001571 	.word	0x08001571
 8001530:	08001571 	.word	0x08001571
 8001534:	08001565 	.word	0x08001565
 8001538:	08001571 	.word	0x08001571
 800153c:	08001571 	.word	0x08001571
 8001540:	08001571 	.word	0x08001571
 8001544:	0800155f 	.word	0x0800155f
 8001548:	08001571 	.word	0x08001571
 800154c:	08001571 	.word	0x08001571
 8001550:	08001571 	.word	0x08001571
 8001554:	0800156b 	.word	0x0800156b
 8001558:	2300      	movs	r3, #0
 800155a:	77fb      	strb	r3, [r7, #31]
 800155c:	e117      	b.n	800178e <UART_SetConfig+0x34e>
 800155e:	2302      	movs	r3, #2
 8001560:	77fb      	strb	r3, [r7, #31]
 8001562:	e114      	b.n	800178e <UART_SetConfig+0x34e>
 8001564:	2304      	movs	r3, #4
 8001566:	77fb      	strb	r3, [r7, #31]
 8001568:	e111      	b.n	800178e <UART_SetConfig+0x34e>
 800156a:	2308      	movs	r3, #8
 800156c:	77fb      	strb	r3, [r7, #31]
 800156e:	e10e      	b.n	800178e <UART_SetConfig+0x34e>
 8001570:	2310      	movs	r3, #16
 8001572:	77fb      	strb	r3, [r7, #31]
 8001574:	bf00      	nop
 8001576:	e10a      	b.n	800178e <UART_SetConfig+0x34e>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a71      	ldr	r2, [pc, #452]	; (8001744 <UART_SetConfig+0x304>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d120      	bne.n	80015c4 <UART_SetConfig+0x184>
 8001582:	4b6e      	ldr	r3, [pc, #440]	; (800173c <UART_SetConfig+0x2fc>)
 8001584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001588:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800158c:	2b10      	cmp	r3, #16
 800158e:	d00f      	beq.n	80015b0 <UART_SetConfig+0x170>
 8001590:	2b10      	cmp	r3, #16
 8001592:	d802      	bhi.n	800159a <UART_SetConfig+0x15a>
 8001594:	2b00      	cmp	r3, #0
 8001596:	d005      	beq.n	80015a4 <UART_SetConfig+0x164>
 8001598:	e010      	b.n	80015bc <UART_SetConfig+0x17c>
 800159a:	2b20      	cmp	r3, #32
 800159c:	d005      	beq.n	80015aa <UART_SetConfig+0x16a>
 800159e:	2b30      	cmp	r3, #48	; 0x30
 80015a0:	d009      	beq.n	80015b6 <UART_SetConfig+0x176>
 80015a2:	e00b      	b.n	80015bc <UART_SetConfig+0x17c>
 80015a4:	2300      	movs	r3, #0
 80015a6:	77fb      	strb	r3, [r7, #31]
 80015a8:	e0f1      	b.n	800178e <UART_SetConfig+0x34e>
 80015aa:	2302      	movs	r3, #2
 80015ac:	77fb      	strb	r3, [r7, #31]
 80015ae:	e0ee      	b.n	800178e <UART_SetConfig+0x34e>
 80015b0:	2304      	movs	r3, #4
 80015b2:	77fb      	strb	r3, [r7, #31]
 80015b4:	e0eb      	b.n	800178e <UART_SetConfig+0x34e>
 80015b6:	2308      	movs	r3, #8
 80015b8:	77fb      	strb	r3, [r7, #31]
 80015ba:	e0e8      	b.n	800178e <UART_SetConfig+0x34e>
 80015bc:	2310      	movs	r3, #16
 80015be:	77fb      	strb	r3, [r7, #31]
 80015c0:	bf00      	nop
 80015c2:	e0e4      	b.n	800178e <UART_SetConfig+0x34e>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a5f      	ldr	r2, [pc, #380]	; (8001748 <UART_SetConfig+0x308>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d120      	bne.n	8001610 <UART_SetConfig+0x1d0>
 80015ce:	4b5b      	ldr	r3, [pc, #364]	; (800173c <UART_SetConfig+0x2fc>)
 80015d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015d4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80015d8:	2b40      	cmp	r3, #64	; 0x40
 80015da:	d00f      	beq.n	80015fc <UART_SetConfig+0x1bc>
 80015dc:	2b40      	cmp	r3, #64	; 0x40
 80015de:	d802      	bhi.n	80015e6 <UART_SetConfig+0x1a6>
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d005      	beq.n	80015f0 <UART_SetConfig+0x1b0>
 80015e4:	e010      	b.n	8001608 <UART_SetConfig+0x1c8>
 80015e6:	2b80      	cmp	r3, #128	; 0x80
 80015e8:	d005      	beq.n	80015f6 <UART_SetConfig+0x1b6>
 80015ea:	2bc0      	cmp	r3, #192	; 0xc0
 80015ec:	d009      	beq.n	8001602 <UART_SetConfig+0x1c2>
 80015ee:	e00b      	b.n	8001608 <UART_SetConfig+0x1c8>
 80015f0:	2300      	movs	r3, #0
 80015f2:	77fb      	strb	r3, [r7, #31]
 80015f4:	e0cb      	b.n	800178e <UART_SetConfig+0x34e>
 80015f6:	2302      	movs	r3, #2
 80015f8:	77fb      	strb	r3, [r7, #31]
 80015fa:	e0c8      	b.n	800178e <UART_SetConfig+0x34e>
 80015fc:	2304      	movs	r3, #4
 80015fe:	77fb      	strb	r3, [r7, #31]
 8001600:	e0c5      	b.n	800178e <UART_SetConfig+0x34e>
 8001602:	2308      	movs	r3, #8
 8001604:	77fb      	strb	r3, [r7, #31]
 8001606:	e0c2      	b.n	800178e <UART_SetConfig+0x34e>
 8001608:	2310      	movs	r3, #16
 800160a:	77fb      	strb	r3, [r7, #31]
 800160c:	bf00      	nop
 800160e:	e0be      	b.n	800178e <UART_SetConfig+0x34e>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a4d      	ldr	r2, [pc, #308]	; (800174c <UART_SetConfig+0x30c>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d124      	bne.n	8001664 <UART_SetConfig+0x224>
 800161a:	4b48      	ldr	r3, [pc, #288]	; (800173c <UART_SetConfig+0x2fc>)
 800161c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001620:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001624:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001628:	d012      	beq.n	8001650 <UART_SetConfig+0x210>
 800162a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800162e:	d802      	bhi.n	8001636 <UART_SetConfig+0x1f6>
 8001630:	2b00      	cmp	r3, #0
 8001632:	d007      	beq.n	8001644 <UART_SetConfig+0x204>
 8001634:	e012      	b.n	800165c <UART_SetConfig+0x21c>
 8001636:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800163a:	d006      	beq.n	800164a <UART_SetConfig+0x20a>
 800163c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001640:	d009      	beq.n	8001656 <UART_SetConfig+0x216>
 8001642:	e00b      	b.n	800165c <UART_SetConfig+0x21c>
 8001644:	2300      	movs	r3, #0
 8001646:	77fb      	strb	r3, [r7, #31]
 8001648:	e0a1      	b.n	800178e <UART_SetConfig+0x34e>
 800164a:	2302      	movs	r3, #2
 800164c:	77fb      	strb	r3, [r7, #31]
 800164e:	e09e      	b.n	800178e <UART_SetConfig+0x34e>
 8001650:	2304      	movs	r3, #4
 8001652:	77fb      	strb	r3, [r7, #31]
 8001654:	e09b      	b.n	800178e <UART_SetConfig+0x34e>
 8001656:	2308      	movs	r3, #8
 8001658:	77fb      	strb	r3, [r7, #31]
 800165a:	e098      	b.n	800178e <UART_SetConfig+0x34e>
 800165c:	2310      	movs	r3, #16
 800165e:	77fb      	strb	r3, [r7, #31]
 8001660:	bf00      	nop
 8001662:	e094      	b.n	800178e <UART_SetConfig+0x34e>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a39      	ldr	r2, [pc, #228]	; (8001750 <UART_SetConfig+0x310>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d124      	bne.n	80016b8 <UART_SetConfig+0x278>
 800166e:	4b33      	ldr	r3, [pc, #204]	; (800173c <UART_SetConfig+0x2fc>)
 8001670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001674:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800167c:	d012      	beq.n	80016a4 <UART_SetConfig+0x264>
 800167e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001682:	d802      	bhi.n	800168a <UART_SetConfig+0x24a>
 8001684:	2b00      	cmp	r3, #0
 8001686:	d007      	beq.n	8001698 <UART_SetConfig+0x258>
 8001688:	e012      	b.n	80016b0 <UART_SetConfig+0x270>
 800168a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800168e:	d006      	beq.n	800169e <UART_SetConfig+0x25e>
 8001690:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001694:	d009      	beq.n	80016aa <UART_SetConfig+0x26a>
 8001696:	e00b      	b.n	80016b0 <UART_SetConfig+0x270>
 8001698:	2301      	movs	r3, #1
 800169a:	77fb      	strb	r3, [r7, #31]
 800169c:	e077      	b.n	800178e <UART_SetConfig+0x34e>
 800169e:	2302      	movs	r3, #2
 80016a0:	77fb      	strb	r3, [r7, #31]
 80016a2:	e074      	b.n	800178e <UART_SetConfig+0x34e>
 80016a4:	2304      	movs	r3, #4
 80016a6:	77fb      	strb	r3, [r7, #31]
 80016a8:	e071      	b.n	800178e <UART_SetConfig+0x34e>
 80016aa:	2308      	movs	r3, #8
 80016ac:	77fb      	strb	r3, [r7, #31]
 80016ae:	e06e      	b.n	800178e <UART_SetConfig+0x34e>
 80016b0:	2310      	movs	r3, #16
 80016b2:	77fb      	strb	r3, [r7, #31]
 80016b4:	bf00      	nop
 80016b6:	e06a      	b.n	800178e <UART_SetConfig+0x34e>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a25      	ldr	r2, [pc, #148]	; (8001754 <UART_SetConfig+0x314>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d124      	bne.n	800170c <UART_SetConfig+0x2cc>
 80016c2:	4b1e      	ldr	r3, [pc, #120]	; (800173c <UART_SetConfig+0x2fc>)
 80016c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016c8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80016cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016d0:	d012      	beq.n	80016f8 <UART_SetConfig+0x2b8>
 80016d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016d6:	d802      	bhi.n	80016de <UART_SetConfig+0x29e>
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d007      	beq.n	80016ec <UART_SetConfig+0x2ac>
 80016dc:	e012      	b.n	8001704 <UART_SetConfig+0x2c4>
 80016de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016e2:	d006      	beq.n	80016f2 <UART_SetConfig+0x2b2>
 80016e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80016e8:	d009      	beq.n	80016fe <UART_SetConfig+0x2be>
 80016ea:	e00b      	b.n	8001704 <UART_SetConfig+0x2c4>
 80016ec:	2300      	movs	r3, #0
 80016ee:	77fb      	strb	r3, [r7, #31]
 80016f0:	e04d      	b.n	800178e <UART_SetConfig+0x34e>
 80016f2:	2302      	movs	r3, #2
 80016f4:	77fb      	strb	r3, [r7, #31]
 80016f6:	e04a      	b.n	800178e <UART_SetConfig+0x34e>
 80016f8:	2304      	movs	r3, #4
 80016fa:	77fb      	strb	r3, [r7, #31]
 80016fc:	e047      	b.n	800178e <UART_SetConfig+0x34e>
 80016fe:	2308      	movs	r3, #8
 8001700:	77fb      	strb	r3, [r7, #31]
 8001702:	e044      	b.n	800178e <UART_SetConfig+0x34e>
 8001704:	2310      	movs	r3, #16
 8001706:	77fb      	strb	r3, [r7, #31]
 8001708:	bf00      	nop
 800170a:	e040      	b.n	800178e <UART_SetConfig+0x34e>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a11      	ldr	r2, [pc, #68]	; (8001758 <UART_SetConfig+0x318>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d139      	bne.n	800178a <UART_SetConfig+0x34a>
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <UART_SetConfig+0x2fc>)
 8001718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800171c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001720:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001724:	d027      	beq.n	8001776 <UART_SetConfig+0x336>
 8001726:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800172a:	d817      	bhi.n	800175c <UART_SetConfig+0x31c>
 800172c:	2b00      	cmp	r3, #0
 800172e:	d01c      	beq.n	800176a <UART_SetConfig+0x32a>
 8001730:	e027      	b.n	8001782 <UART_SetConfig+0x342>
 8001732:	bf00      	nop
 8001734:	efff69f3 	.word	0xefff69f3
 8001738:	40011000 	.word	0x40011000
 800173c:	40023800 	.word	0x40023800
 8001740:	40004400 	.word	0x40004400
 8001744:	40004800 	.word	0x40004800
 8001748:	40004c00 	.word	0x40004c00
 800174c:	40005000 	.word	0x40005000
 8001750:	40011400 	.word	0x40011400
 8001754:	40007800 	.word	0x40007800
 8001758:	40007c00 	.word	0x40007c00
 800175c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001760:	d006      	beq.n	8001770 <UART_SetConfig+0x330>
 8001762:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001766:	d009      	beq.n	800177c <UART_SetConfig+0x33c>
 8001768:	e00b      	b.n	8001782 <UART_SetConfig+0x342>
 800176a:	2300      	movs	r3, #0
 800176c:	77fb      	strb	r3, [r7, #31]
 800176e:	e00e      	b.n	800178e <UART_SetConfig+0x34e>
 8001770:	2302      	movs	r3, #2
 8001772:	77fb      	strb	r3, [r7, #31]
 8001774:	e00b      	b.n	800178e <UART_SetConfig+0x34e>
 8001776:	2304      	movs	r3, #4
 8001778:	77fb      	strb	r3, [r7, #31]
 800177a:	e008      	b.n	800178e <UART_SetConfig+0x34e>
 800177c:	2308      	movs	r3, #8
 800177e:	77fb      	strb	r3, [r7, #31]
 8001780:	e005      	b.n	800178e <UART_SetConfig+0x34e>
 8001782:	2310      	movs	r3, #16
 8001784:	77fb      	strb	r3, [r7, #31]
 8001786:	bf00      	nop
 8001788:	e001      	b.n	800178e <UART_SetConfig+0x34e>
 800178a:	2310      	movs	r3, #16
 800178c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001796:	d17f      	bne.n	8001898 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8001798:	7ffb      	ldrb	r3, [r7, #31]
 800179a:	2b08      	cmp	r3, #8
 800179c:	d85c      	bhi.n	8001858 <UART_SetConfig+0x418>
 800179e:	a201      	add	r2, pc, #4	; (adr r2, 80017a4 <UART_SetConfig+0x364>)
 80017a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a4:	080017c9 	.word	0x080017c9
 80017a8:	080017e9 	.word	0x080017e9
 80017ac:	08001809 	.word	0x08001809
 80017b0:	08001859 	.word	0x08001859
 80017b4:	08001821 	.word	0x08001821
 80017b8:	08001859 	.word	0x08001859
 80017bc:	08001859 	.word	0x08001859
 80017c0:	08001859 	.word	0x08001859
 80017c4:	08001841 	.word	0x08001841
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80017c8:	f7ff fd32 	bl	8001230 <HAL_RCC_GetPCLK1Freq>
 80017cc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	005a      	lsls	r2, r3, #1
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	085b      	lsrs	r3, r3, #1
 80017d8:	441a      	add	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	61bb      	str	r3, [r7, #24]
        break;
 80017e6:	e03a      	b.n	800185e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80017e8:	f7ff fd36 	bl	8001258 <HAL_RCC_GetPCLK2Freq>
 80017ec:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	005a      	lsls	r2, r3, #1
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	085b      	lsrs	r3, r3, #1
 80017f8:	441a      	add	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001802:	b29b      	uxth	r3, r3
 8001804:	61bb      	str	r3, [r7, #24]
        break;
 8001806:	e02a      	b.n	800185e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	085a      	lsrs	r2, r3, #1
 800180e:	4b5f      	ldr	r3, [pc, #380]	; (800198c <UART_SetConfig+0x54c>)
 8001810:	4413      	add	r3, r2
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6852      	ldr	r2, [r2, #4]
 8001816:	fbb3 f3f2 	udiv	r3, r3, r2
 800181a:	b29b      	uxth	r3, r3
 800181c:	61bb      	str	r3, [r7, #24]
        break;
 800181e:	e01e      	b.n	800185e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001820:	f7ff fc22 	bl	8001068 <HAL_RCC_GetSysClockFreq>
 8001824:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	005a      	lsls	r2, r3, #1
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	085b      	lsrs	r3, r3, #1
 8001830:	441a      	add	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	fbb2 f3f3 	udiv	r3, r2, r3
 800183a:	b29b      	uxth	r3, r3
 800183c:	61bb      	str	r3, [r7, #24]
        break;
 800183e:	e00e      	b.n	800185e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	085b      	lsrs	r3, r3, #1
 8001846:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001852:	b29b      	uxth	r3, r3
 8001854:	61bb      	str	r3, [r7, #24]
        break;
 8001856:	e002      	b.n	800185e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	75fb      	strb	r3, [r7, #23]
        break;
 800185c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	2b0f      	cmp	r3, #15
 8001862:	d916      	bls.n	8001892 <UART_SetConfig+0x452>
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800186a:	d212      	bcs.n	8001892 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	b29b      	uxth	r3, r3
 8001870:	f023 030f 	bic.w	r3, r3, #15
 8001874:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	085b      	lsrs	r3, r3, #1
 800187a:	b29b      	uxth	r3, r3
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	b29a      	uxth	r2, r3
 8001882:	897b      	ldrh	r3, [r7, #10]
 8001884:	4313      	orrs	r3, r2
 8001886:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	897a      	ldrh	r2, [r7, #10]
 800188e:	60da      	str	r2, [r3, #12]
 8001890:	e070      	b.n	8001974 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	75fb      	strb	r3, [r7, #23]
 8001896:	e06d      	b.n	8001974 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8001898:	7ffb      	ldrb	r3, [r7, #31]
 800189a:	2b08      	cmp	r3, #8
 800189c:	d859      	bhi.n	8001952 <UART_SetConfig+0x512>
 800189e:	a201      	add	r2, pc, #4	; (adr r2, 80018a4 <UART_SetConfig+0x464>)
 80018a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a4:	080018c9 	.word	0x080018c9
 80018a8:	080018e7 	.word	0x080018e7
 80018ac:	08001905 	.word	0x08001905
 80018b0:	08001953 	.word	0x08001953
 80018b4:	0800191d 	.word	0x0800191d
 80018b8:	08001953 	.word	0x08001953
 80018bc:	08001953 	.word	0x08001953
 80018c0:	08001953 	.word	0x08001953
 80018c4:	0800193b 	.word	0x0800193b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80018c8:	f7ff fcb2 	bl	8001230 <HAL_RCC_GetPCLK1Freq>
 80018cc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	085a      	lsrs	r2, r3, #1
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	441a      	add	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	61bb      	str	r3, [r7, #24]
        break;
 80018e4:	e038      	b.n	8001958 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80018e6:	f7ff fcb7 	bl	8001258 <HAL_RCC_GetPCLK2Freq>
 80018ea:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	085a      	lsrs	r2, r3, #1
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	441a      	add	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fe:	b29b      	uxth	r3, r3
 8001900:	61bb      	str	r3, [r7, #24]
        break;
 8001902:	e029      	b.n	8001958 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	085a      	lsrs	r2, r3, #1
 800190a:	4b21      	ldr	r3, [pc, #132]	; (8001990 <UART_SetConfig+0x550>)
 800190c:	4413      	add	r3, r2
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	6852      	ldr	r2, [r2, #4]
 8001912:	fbb3 f3f2 	udiv	r3, r3, r2
 8001916:	b29b      	uxth	r3, r3
 8001918:	61bb      	str	r3, [r7, #24]
        break;
 800191a:	e01d      	b.n	8001958 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800191c:	f7ff fba4 	bl	8001068 <HAL_RCC_GetSysClockFreq>
 8001920:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	085a      	lsrs	r2, r3, #1
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	441a      	add	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	fbb2 f3f3 	udiv	r3, r2, r3
 8001934:	b29b      	uxth	r3, r3
 8001936:	61bb      	str	r3, [r7, #24]
        break;
 8001938:	e00e      	b.n	8001958 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	085b      	lsrs	r3, r3, #1
 8001940:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	fbb2 f3f3 	udiv	r3, r2, r3
 800194c:	b29b      	uxth	r3, r3
 800194e:	61bb      	str	r3, [r7, #24]
        break;
 8001950:	e002      	b.n	8001958 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	75fb      	strb	r3, [r7, #23]
        break;
 8001956:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	2b0f      	cmp	r3, #15
 800195c:	d908      	bls.n	8001970 <UART_SetConfig+0x530>
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001964:	d204      	bcs.n	8001970 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	e001      	b.n	8001974 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8001980:	7dfb      	ldrb	r3, [r7, #23]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3720      	adds	r7, #32
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	01e84800 	.word	0x01e84800
 8001990:	00f42400 	.word	0x00f42400

08001994 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d00a      	beq.n	80019be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d00a      	beq.n	80019e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d00a      	beq.n	8001a02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a06:	f003 0308 	and.w	r3, r3, #8
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00a      	beq.n	8001a24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	430a      	orrs	r2, r1
 8001a22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a28:	f003 0310 	and.w	r3, r3, #16
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00a      	beq.n	8001a46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4a:	f003 0320 	and.w	r3, r3, #32
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00a      	beq.n	8001a68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	430a      	orrs	r2, r1
 8001a66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d01a      	beq.n	8001aaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a92:	d10a      	bne.n	8001aaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00a      	beq.n	8001acc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	605a      	str	r2, [r3, #4]
  }
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af02      	add	r7, sp, #8
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8001ae6:	f7fe fff7 	bl	8000ad8 <HAL_GetTick>
 8001aea:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b08      	cmp	r3, #8
 8001af8:	d10e      	bne.n	8001b18 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001afa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f82a 	bl	8001b62 <UART_WaitOnFlagUntilTimeout>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e020      	b.n	8001b5a <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0304 	and.w	r3, r3, #4
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	d10e      	bne.n	8001b44 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001b26:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 f814 	bl	8001b62 <UART_WaitOnFlagUntilTimeout>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e00a      	b.n	8001b5a <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2220      	movs	r2, #32
 8001b48:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2220      	movs	r2, #32
 8001b4e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b084      	sub	sp, #16
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	60f8      	str	r0, [r7, #12]
 8001b6a:	60b9      	str	r1, [r7, #8]
 8001b6c:	603b      	str	r3, [r7, #0]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b72:	e05d      	b.n	8001c30 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b7a:	d059      	beq.n	8001c30 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b7c:	f7fe ffac 	bl	8000ad8 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d302      	bcc.n	8001b92 <UART_WaitOnFlagUntilTimeout+0x30>
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d11b      	bne.n	8001bca <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001ba0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 0201 	bic.w	r2, r2, #1
 8001bb0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2220      	movs	r2, #32
 8001bb6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2220      	movs	r2, #32
 8001bbc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e042      	b.n	8001c50 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d02b      	beq.n	8001c30 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001be2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001be6:	d123      	bne.n	8001c30 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bf0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001c00:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 0201 	bic.w	r2, r2, #1
 8001c10:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2220      	movs	r2, #32
 8001c16:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2220      	movs	r2, #32
 8001c22:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e00f      	b.n	8001c50 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	69da      	ldr	r2, [r3, #28]
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	bf0c      	ite	eq
 8001c40:	2301      	moveq	r3, #1
 8001c42:	2300      	movne	r3, #0
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	461a      	mov	r2, r3
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d092      	beq.n	8001b74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <__errno>:
 8001c58:	4b01      	ldr	r3, [pc, #4]	; (8001c60 <__errno+0x8>)
 8001c5a:	6818      	ldr	r0, [r3, #0]
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	2000002c 	.word	0x2000002c

08001c64 <__libc_init_array>:
 8001c64:	b570      	push	{r4, r5, r6, lr}
 8001c66:	4e0d      	ldr	r6, [pc, #52]	; (8001c9c <__libc_init_array+0x38>)
 8001c68:	4c0d      	ldr	r4, [pc, #52]	; (8001ca0 <__libc_init_array+0x3c>)
 8001c6a:	1ba4      	subs	r4, r4, r6
 8001c6c:	10a4      	asrs	r4, r4, #2
 8001c6e:	2500      	movs	r5, #0
 8001c70:	42a5      	cmp	r5, r4
 8001c72:	d109      	bne.n	8001c88 <__libc_init_array+0x24>
 8001c74:	4e0b      	ldr	r6, [pc, #44]	; (8001ca4 <__libc_init_array+0x40>)
 8001c76:	4c0c      	ldr	r4, [pc, #48]	; (8001ca8 <__libc_init_array+0x44>)
 8001c78:	f002 f970 	bl	8003f5c <_init>
 8001c7c:	1ba4      	subs	r4, r4, r6
 8001c7e:	10a4      	asrs	r4, r4, #2
 8001c80:	2500      	movs	r5, #0
 8001c82:	42a5      	cmp	r5, r4
 8001c84:	d105      	bne.n	8001c92 <__libc_init_array+0x2e>
 8001c86:	bd70      	pop	{r4, r5, r6, pc}
 8001c88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c8c:	4798      	blx	r3
 8001c8e:	3501      	adds	r5, #1
 8001c90:	e7ee      	b.n	8001c70 <__libc_init_array+0xc>
 8001c92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c96:	4798      	blx	r3
 8001c98:	3501      	adds	r5, #1
 8001c9a:	e7f2      	b.n	8001c82 <__libc_init_array+0x1e>
 8001c9c:	080044d8 	.word	0x080044d8
 8001ca0:	080044d8 	.word	0x080044d8
 8001ca4:	080044d8 	.word	0x080044d8
 8001ca8:	080044dc 	.word	0x080044dc

08001cac <memset>:
 8001cac:	4402      	add	r2, r0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d100      	bne.n	8001cb6 <memset+0xa>
 8001cb4:	4770      	bx	lr
 8001cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8001cba:	e7f9      	b.n	8001cb0 <memset+0x4>

08001cbc <__cvt>:
 8001cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cbe:	ed2d 8b02 	vpush	{d8}
 8001cc2:	eeb0 8b40 	vmov.f64	d8, d0
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	4617      	mov	r7, r2
 8001cca:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8001ccc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8001cce:	ee18 2a90 	vmov	r2, s17
 8001cd2:	f025 0520 	bic.w	r5, r5, #32
 8001cd6:	2a00      	cmp	r2, #0
 8001cd8:	bfb6      	itet	lt
 8001cda:	222d      	movlt	r2, #45	; 0x2d
 8001cdc:	2200      	movge	r2, #0
 8001cde:	eeb1 8b40 	vneglt.f64	d8, d0
 8001ce2:	2d46      	cmp	r5, #70	; 0x46
 8001ce4:	460c      	mov	r4, r1
 8001ce6:	701a      	strb	r2, [r3, #0]
 8001ce8:	d004      	beq.n	8001cf4 <__cvt+0x38>
 8001cea:	2d45      	cmp	r5, #69	; 0x45
 8001cec:	d100      	bne.n	8001cf0 <__cvt+0x34>
 8001cee:	3401      	adds	r4, #1
 8001cf0:	2102      	movs	r1, #2
 8001cf2:	e000      	b.n	8001cf6 <__cvt+0x3a>
 8001cf4:	2103      	movs	r1, #3
 8001cf6:	ab03      	add	r3, sp, #12
 8001cf8:	9301      	str	r3, [sp, #4]
 8001cfa:	ab02      	add	r3, sp, #8
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	4622      	mov	r2, r4
 8001d00:	4633      	mov	r3, r6
 8001d02:	eeb0 0b48 	vmov.f64	d0, d8
 8001d06:	f000 fcbf 	bl	8002688 <_dtoa_r>
 8001d0a:	2d47      	cmp	r5, #71	; 0x47
 8001d0c:	d101      	bne.n	8001d12 <__cvt+0x56>
 8001d0e:	07fb      	lsls	r3, r7, #31
 8001d10:	d51e      	bpl.n	8001d50 <__cvt+0x94>
 8001d12:	2d46      	cmp	r5, #70	; 0x46
 8001d14:	eb00 0304 	add.w	r3, r0, r4
 8001d18:	d10c      	bne.n	8001d34 <__cvt+0x78>
 8001d1a:	7802      	ldrb	r2, [r0, #0]
 8001d1c:	2a30      	cmp	r2, #48	; 0x30
 8001d1e:	d107      	bne.n	8001d30 <__cvt+0x74>
 8001d20:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8001d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d28:	bf1c      	itt	ne
 8001d2a:	f1c4 0401 	rsbne	r4, r4, #1
 8001d2e:	6034      	strne	r4, [r6, #0]
 8001d30:	6832      	ldr	r2, [r6, #0]
 8001d32:	4413      	add	r3, r2
 8001d34:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8001d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d3c:	d007      	beq.n	8001d4e <__cvt+0x92>
 8001d3e:	2130      	movs	r1, #48	; 0x30
 8001d40:	9a03      	ldr	r2, [sp, #12]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d204      	bcs.n	8001d50 <__cvt+0x94>
 8001d46:	1c54      	adds	r4, r2, #1
 8001d48:	9403      	str	r4, [sp, #12]
 8001d4a:	7011      	strb	r1, [r2, #0]
 8001d4c:	e7f8      	b.n	8001d40 <__cvt+0x84>
 8001d4e:	9303      	str	r3, [sp, #12]
 8001d50:	9b03      	ldr	r3, [sp, #12]
 8001d52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001d54:	1a1b      	subs	r3, r3, r0
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	b005      	add	sp, #20
 8001d5a:	ecbd 8b02 	vpop	{d8}
 8001d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d60 <__exponent>:
 8001d60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001d62:	2900      	cmp	r1, #0
 8001d64:	4604      	mov	r4, r0
 8001d66:	bfba      	itte	lt
 8001d68:	4249      	neglt	r1, r1
 8001d6a:	232d      	movlt	r3, #45	; 0x2d
 8001d6c:	232b      	movge	r3, #43	; 0x2b
 8001d6e:	2909      	cmp	r1, #9
 8001d70:	f804 2b02 	strb.w	r2, [r4], #2
 8001d74:	7043      	strb	r3, [r0, #1]
 8001d76:	dd20      	ble.n	8001dba <__exponent+0x5a>
 8001d78:	f10d 0307 	add.w	r3, sp, #7
 8001d7c:	461f      	mov	r7, r3
 8001d7e:	260a      	movs	r6, #10
 8001d80:	fb91 f5f6 	sdiv	r5, r1, r6
 8001d84:	fb06 1115 	mls	r1, r6, r5, r1
 8001d88:	3130      	adds	r1, #48	; 0x30
 8001d8a:	2d09      	cmp	r5, #9
 8001d8c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8001d90:	f103 32ff 	add.w	r2, r3, #4294967295
 8001d94:	4629      	mov	r1, r5
 8001d96:	dc09      	bgt.n	8001dac <__exponent+0x4c>
 8001d98:	3130      	adds	r1, #48	; 0x30
 8001d9a:	3b02      	subs	r3, #2
 8001d9c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8001da0:	42bb      	cmp	r3, r7
 8001da2:	4622      	mov	r2, r4
 8001da4:	d304      	bcc.n	8001db0 <__exponent+0x50>
 8001da6:	1a10      	subs	r0, r2, r0
 8001da8:	b003      	add	sp, #12
 8001daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dac:	4613      	mov	r3, r2
 8001dae:	e7e7      	b.n	8001d80 <__exponent+0x20>
 8001db0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001db4:	f804 2b01 	strb.w	r2, [r4], #1
 8001db8:	e7f2      	b.n	8001da0 <__exponent+0x40>
 8001dba:	2330      	movs	r3, #48	; 0x30
 8001dbc:	4419      	add	r1, r3
 8001dbe:	7083      	strb	r3, [r0, #2]
 8001dc0:	1d02      	adds	r2, r0, #4
 8001dc2:	70c1      	strb	r1, [r0, #3]
 8001dc4:	e7ef      	b.n	8001da6 <__exponent+0x46>
	...

08001dc8 <_printf_float>:
 8001dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dcc:	b08d      	sub	sp, #52	; 0x34
 8001dce:	460c      	mov	r4, r1
 8001dd0:	4616      	mov	r6, r2
 8001dd2:	461f      	mov	r7, r3
 8001dd4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8001dd8:	4605      	mov	r5, r0
 8001dda:	f001 f9a1 	bl	8003120 <_localeconv_r>
 8001dde:	f8d0 b000 	ldr.w	fp, [r0]
 8001de2:	4658      	mov	r0, fp
 8001de4:	f7fe fa2c 	bl	8000240 <strlen>
 8001de8:	2300      	movs	r3, #0
 8001dea:	930a      	str	r3, [sp, #40]	; 0x28
 8001dec:	f8d8 3000 	ldr.w	r3, [r8]
 8001df0:	9005      	str	r0, [sp, #20]
 8001df2:	3307      	adds	r3, #7
 8001df4:	f023 0307 	bic.w	r3, r3, #7
 8001df8:	f103 0108 	add.w	r1, r3, #8
 8001dfc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8001e00:	6822      	ldr	r2, [r4, #0]
 8001e02:	f8c8 1000 	str.w	r1, [r8]
 8001e06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e0a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8001e0e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8002098 <_printf_float+0x2d0>
 8001e12:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8001e16:	eeb0 6bc0 	vabs.f64	d6, d0
 8001e1a:	eeb4 6b47 	vcmp.f64	d6, d7
 8001e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e22:	dd24      	ble.n	8001e6e <_printf_float+0xa6>
 8001e24:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8001e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e2c:	d502      	bpl.n	8001e34 <_printf_float+0x6c>
 8001e2e:	232d      	movs	r3, #45	; 0x2d
 8001e30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e34:	499a      	ldr	r1, [pc, #616]	; (80020a0 <_printf_float+0x2d8>)
 8001e36:	4b9b      	ldr	r3, [pc, #620]	; (80020a4 <_printf_float+0x2dc>)
 8001e38:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8001e3c:	bf8c      	ite	hi
 8001e3e:	4688      	movhi	r8, r1
 8001e40:	4698      	movls	r8, r3
 8001e42:	f022 0204 	bic.w	r2, r2, #4
 8001e46:	2303      	movs	r3, #3
 8001e48:	6123      	str	r3, [r4, #16]
 8001e4a:	6022      	str	r2, [r4, #0]
 8001e4c:	f04f 0a00 	mov.w	sl, #0
 8001e50:	9700      	str	r7, [sp, #0]
 8001e52:	4633      	mov	r3, r6
 8001e54:	aa0b      	add	r2, sp, #44	; 0x2c
 8001e56:	4621      	mov	r1, r4
 8001e58:	4628      	mov	r0, r5
 8001e5a:	f000 f9e1 	bl	8002220 <_printf_common>
 8001e5e:	3001      	adds	r0, #1
 8001e60:	f040 8089 	bne.w	8001f76 <_printf_float+0x1ae>
 8001e64:	f04f 30ff 	mov.w	r0, #4294967295
 8001e68:	b00d      	add	sp, #52	; 0x34
 8001e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e6e:	eeb4 0b40 	vcmp.f64	d0, d0
 8001e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e76:	d702      	bvc.n	8001e7e <_printf_float+0xb6>
 8001e78:	498b      	ldr	r1, [pc, #556]	; (80020a8 <_printf_float+0x2e0>)
 8001e7a:	4b8c      	ldr	r3, [pc, #560]	; (80020ac <_printf_float+0x2e4>)
 8001e7c:	e7dc      	b.n	8001e38 <_printf_float+0x70>
 8001e7e:	6861      	ldr	r1, [r4, #4]
 8001e80:	1c4b      	adds	r3, r1, #1
 8001e82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e86:	ab0a      	add	r3, sp, #40	; 0x28
 8001e88:	a809      	add	r0, sp, #36	; 0x24
 8001e8a:	d13b      	bne.n	8001f04 <_printf_float+0x13c>
 8001e8c:	2106      	movs	r1, #6
 8001e8e:	6061      	str	r1, [r4, #4]
 8001e90:	f04f 0c00 	mov.w	ip, #0
 8001e94:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8001e98:	e9cd 0900 	strd	r0, r9, [sp]
 8001e9c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8001ea0:	6022      	str	r2, [r4, #0]
 8001ea2:	6861      	ldr	r1, [r4, #4]
 8001ea4:	4628      	mov	r0, r5
 8001ea6:	f7ff ff09 	bl	8001cbc <__cvt>
 8001eaa:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8001eae:	2b47      	cmp	r3, #71	; 0x47
 8001eb0:	4680      	mov	r8, r0
 8001eb2:	d109      	bne.n	8001ec8 <_printf_float+0x100>
 8001eb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001eb6:	1cd8      	adds	r0, r3, #3
 8001eb8:	db02      	blt.n	8001ec0 <_printf_float+0xf8>
 8001eba:	6862      	ldr	r2, [r4, #4]
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	dd47      	ble.n	8001f50 <_printf_float+0x188>
 8001ec0:	f1a9 0902 	sub.w	r9, r9, #2
 8001ec4:	fa5f f989 	uxtb.w	r9, r9
 8001ec8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8001ecc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001ece:	d824      	bhi.n	8001f1a <_printf_float+0x152>
 8001ed0:	3901      	subs	r1, #1
 8001ed2:	464a      	mov	r2, r9
 8001ed4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8001ed8:	9109      	str	r1, [sp, #36]	; 0x24
 8001eda:	f7ff ff41 	bl	8001d60 <__exponent>
 8001ede:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001ee0:	1813      	adds	r3, r2, r0
 8001ee2:	2a01      	cmp	r2, #1
 8001ee4:	4682      	mov	sl, r0
 8001ee6:	6123      	str	r3, [r4, #16]
 8001ee8:	dc02      	bgt.n	8001ef0 <_printf_float+0x128>
 8001eea:	6822      	ldr	r2, [r4, #0]
 8001eec:	07d1      	lsls	r1, r2, #31
 8001eee:	d501      	bpl.n	8001ef4 <_printf_float+0x12c>
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	6123      	str	r3, [r4, #16]
 8001ef4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d0a9      	beq.n	8001e50 <_printf_float+0x88>
 8001efc:	232d      	movs	r3, #45	; 0x2d
 8001efe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001f02:	e7a5      	b.n	8001e50 <_printf_float+0x88>
 8001f04:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8001f08:	f000 8178 	beq.w	80021fc <_printf_float+0x434>
 8001f0c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8001f10:	d1be      	bne.n	8001e90 <_printf_float+0xc8>
 8001f12:	2900      	cmp	r1, #0
 8001f14:	d1bc      	bne.n	8001e90 <_printf_float+0xc8>
 8001f16:	2101      	movs	r1, #1
 8001f18:	e7b9      	b.n	8001e8e <_printf_float+0xc6>
 8001f1a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8001f1e:	d119      	bne.n	8001f54 <_printf_float+0x18c>
 8001f20:	2900      	cmp	r1, #0
 8001f22:	6863      	ldr	r3, [r4, #4]
 8001f24:	dd0c      	ble.n	8001f40 <_printf_float+0x178>
 8001f26:	6121      	str	r1, [r4, #16]
 8001f28:	b913      	cbnz	r3, 8001f30 <_printf_float+0x168>
 8001f2a:	6822      	ldr	r2, [r4, #0]
 8001f2c:	07d2      	lsls	r2, r2, #31
 8001f2e:	d502      	bpl.n	8001f36 <_printf_float+0x16e>
 8001f30:	3301      	adds	r3, #1
 8001f32:	440b      	add	r3, r1
 8001f34:	6123      	str	r3, [r4, #16]
 8001f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f38:	65a3      	str	r3, [r4, #88]	; 0x58
 8001f3a:	f04f 0a00 	mov.w	sl, #0
 8001f3e:	e7d9      	b.n	8001ef4 <_printf_float+0x12c>
 8001f40:	b913      	cbnz	r3, 8001f48 <_printf_float+0x180>
 8001f42:	6822      	ldr	r2, [r4, #0]
 8001f44:	07d0      	lsls	r0, r2, #31
 8001f46:	d501      	bpl.n	8001f4c <_printf_float+0x184>
 8001f48:	3302      	adds	r3, #2
 8001f4a:	e7f3      	b.n	8001f34 <_printf_float+0x16c>
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e7f1      	b.n	8001f34 <_printf_float+0x16c>
 8001f50:	f04f 0967 	mov.w	r9, #103	; 0x67
 8001f54:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	db05      	blt.n	8001f68 <_printf_float+0x1a0>
 8001f5c:	6822      	ldr	r2, [r4, #0]
 8001f5e:	6123      	str	r3, [r4, #16]
 8001f60:	07d1      	lsls	r1, r2, #31
 8001f62:	d5e8      	bpl.n	8001f36 <_printf_float+0x16e>
 8001f64:	3301      	adds	r3, #1
 8001f66:	e7e5      	b.n	8001f34 <_printf_float+0x16c>
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	bfd4      	ite	le
 8001f6c:	f1c3 0302 	rsble	r3, r3, #2
 8001f70:	2301      	movgt	r3, #1
 8001f72:	4413      	add	r3, r2
 8001f74:	e7de      	b.n	8001f34 <_printf_float+0x16c>
 8001f76:	6823      	ldr	r3, [r4, #0]
 8001f78:	055a      	lsls	r2, r3, #21
 8001f7a:	d407      	bmi.n	8001f8c <_printf_float+0x1c4>
 8001f7c:	6923      	ldr	r3, [r4, #16]
 8001f7e:	4642      	mov	r2, r8
 8001f80:	4631      	mov	r1, r6
 8001f82:	4628      	mov	r0, r5
 8001f84:	47b8      	blx	r7
 8001f86:	3001      	adds	r0, #1
 8001f88:	d12a      	bne.n	8001fe0 <_printf_float+0x218>
 8001f8a:	e76b      	b.n	8001e64 <_printf_float+0x9c>
 8001f8c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8001f90:	f240 80de 	bls.w	8002150 <_printf_float+0x388>
 8001f94:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8001f98:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa0:	d133      	bne.n	800200a <_printf_float+0x242>
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	4a42      	ldr	r2, [pc, #264]	; (80020b0 <_printf_float+0x2e8>)
 8001fa6:	4631      	mov	r1, r6
 8001fa8:	4628      	mov	r0, r5
 8001faa:	47b8      	blx	r7
 8001fac:	3001      	adds	r0, #1
 8001fae:	f43f af59 	beq.w	8001e64 <_printf_float+0x9c>
 8001fb2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	db02      	blt.n	8001fc0 <_printf_float+0x1f8>
 8001fba:	6823      	ldr	r3, [r4, #0]
 8001fbc:	07d8      	lsls	r0, r3, #31
 8001fbe:	d50f      	bpl.n	8001fe0 <_printf_float+0x218>
 8001fc0:	9b05      	ldr	r3, [sp, #20]
 8001fc2:	465a      	mov	r2, fp
 8001fc4:	4631      	mov	r1, r6
 8001fc6:	4628      	mov	r0, r5
 8001fc8:	47b8      	blx	r7
 8001fca:	3001      	adds	r0, #1
 8001fcc:	f43f af4a 	beq.w	8001e64 <_printf_float+0x9c>
 8001fd0:	f04f 0800 	mov.w	r8, #0
 8001fd4:	f104 091a 	add.w	r9, r4, #26
 8001fd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	4543      	cmp	r3, r8
 8001fde:	dc09      	bgt.n	8001ff4 <_printf_float+0x22c>
 8001fe0:	6823      	ldr	r3, [r4, #0]
 8001fe2:	079b      	lsls	r3, r3, #30
 8001fe4:	f100 8105 	bmi.w	80021f2 <_printf_float+0x42a>
 8001fe8:	68e0      	ldr	r0, [r4, #12]
 8001fea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001fec:	4298      	cmp	r0, r3
 8001fee:	bfb8      	it	lt
 8001ff0:	4618      	movlt	r0, r3
 8001ff2:	e739      	b.n	8001e68 <_printf_float+0xa0>
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	464a      	mov	r2, r9
 8001ff8:	4631      	mov	r1, r6
 8001ffa:	4628      	mov	r0, r5
 8001ffc:	47b8      	blx	r7
 8001ffe:	3001      	adds	r0, #1
 8002000:	f43f af30 	beq.w	8001e64 <_printf_float+0x9c>
 8002004:	f108 0801 	add.w	r8, r8, #1
 8002008:	e7e6      	b.n	8001fd8 <_printf_float+0x210>
 800200a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800200c:	2b00      	cmp	r3, #0
 800200e:	dc2b      	bgt.n	8002068 <_printf_float+0x2a0>
 8002010:	2301      	movs	r3, #1
 8002012:	4a27      	ldr	r2, [pc, #156]	; (80020b0 <_printf_float+0x2e8>)
 8002014:	4631      	mov	r1, r6
 8002016:	4628      	mov	r0, r5
 8002018:	47b8      	blx	r7
 800201a:	3001      	adds	r0, #1
 800201c:	f43f af22 	beq.w	8001e64 <_printf_float+0x9c>
 8002020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002022:	b923      	cbnz	r3, 800202e <_printf_float+0x266>
 8002024:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002026:	b913      	cbnz	r3, 800202e <_printf_float+0x266>
 8002028:	6823      	ldr	r3, [r4, #0]
 800202a:	07d9      	lsls	r1, r3, #31
 800202c:	d5d8      	bpl.n	8001fe0 <_printf_float+0x218>
 800202e:	9b05      	ldr	r3, [sp, #20]
 8002030:	465a      	mov	r2, fp
 8002032:	4631      	mov	r1, r6
 8002034:	4628      	mov	r0, r5
 8002036:	47b8      	blx	r7
 8002038:	3001      	adds	r0, #1
 800203a:	f43f af13 	beq.w	8001e64 <_printf_float+0x9c>
 800203e:	f04f 0900 	mov.w	r9, #0
 8002042:	f104 0a1a 	add.w	sl, r4, #26
 8002046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002048:	425b      	negs	r3, r3
 800204a:	454b      	cmp	r3, r9
 800204c:	dc01      	bgt.n	8002052 <_printf_float+0x28a>
 800204e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002050:	e795      	b.n	8001f7e <_printf_float+0x1b6>
 8002052:	2301      	movs	r3, #1
 8002054:	4652      	mov	r2, sl
 8002056:	4631      	mov	r1, r6
 8002058:	4628      	mov	r0, r5
 800205a:	47b8      	blx	r7
 800205c:	3001      	adds	r0, #1
 800205e:	f43f af01 	beq.w	8001e64 <_printf_float+0x9c>
 8002062:	f109 0901 	add.w	r9, r9, #1
 8002066:	e7ee      	b.n	8002046 <_printf_float+0x27e>
 8002068:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800206a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800206c:	429a      	cmp	r2, r3
 800206e:	bfa8      	it	ge
 8002070:	461a      	movge	r2, r3
 8002072:	2a00      	cmp	r2, #0
 8002074:	4691      	mov	r9, r2
 8002076:	dd07      	ble.n	8002088 <_printf_float+0x2c0>
 8002078:	4613      	mov	r3, r2
 800207a:	4631      	mov	r1, r6
 800207c:	4642      	mov	r2, r8
 800207e:	4628      	mov	r0, r5
 8002080:	47b8      	blx	r7
 8002082:	3001      	adds	r0, #1
 8002084:	f43f aeee 	beq.w	8001e64 <_printf_float+0x9c>
 8002088:	f104 031a 	add.w	r3, r4, #26
 800208c:	f04f 0a00 	mov.w	sl, #0
 8002090:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002094:	9307      	str	r3, [sp, #28]
 8002096:	e017      	b.n	80020c8 <_printf_float+0x300>
 8002098:	ffffffff 	.word	0xffffffff
 800209c:	7fefffff 	.word	0x7fefffff
 80020a0:	08004004 	.word	0x08004004
 80020a4:	08004000 	.word	0x08004000
 80020a8:	0800400c 	.word	0x0800400c
 80020ac:	08004008 	.word	0x08004008
 80020b0:	08004010 	.word	0x08004010
 80020b4:	2301      	movs	r3, #1
 80020b6:	9a07      	ldr	r2, [sp, #28]
 80020b8:	4631      	mov	r1, r6
 80020ba:	4628      	mov	r0, r5
 80020bc:	47b8      	blx	r7
 80020be:	3001      	adds	r0, #1
 80020c0:	f43f aed0 	beq.w	8001e64 <_printf_float+0x9c>
 80020c4:	f10a 0a01 	add.w	sl, sl, #1
 80020c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80020ca:	9306      	str	r3, [sp, #24]
 80020cc:	eba3 0309 	sub.w	r3, r3, r9
 80020d0:	4553      	cmp	r3, sl
 80020d2:	dcef      	bgt.n	80020b4 <_printf_float+0x2ec>
 80020d4:	9b06      	ldr	r3, [sp, #24]
 80020d6:	4498      	add	r8, r3
 80020d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80020dc:	429a      	cmp	r2, r3
 80020de:	db15      	blt.n	800210c <_printf_float+0x344>
 80020e0:	6823      	ldr	r3, [r4, #0]
 80020e2:	07da      	lsls	r2, r3, #31
 80020e4:	d412      	bmi.n	800210c <_printf_float+0x344>
 80020e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80020e8:	9a06      	ldr	r2, [sp, #24]
 80020ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80020ec:	1a9a      	subs	r2, r3, r2
 80020ee:	eba3 0a01 	sub.w	sl, r3, r1
 80020f2:	4592      	cmp	sl, r2
 80020f4:	bfa8      	it	ge
 80020f6:	4692      	movge	sl, r2
 80020f8:	f1ba 0f00 	cmp.w	sl, #0
 80020fc:	dc0e      	bgt.n	800211c <_printf_float+0x354>
 80020fe:	f04f 0800 	mov.w	r8, #0
 8002102:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8002106:	f104 091a 	add.w	r9, r4, #26
 800210a:	e019      	b.n	8002140 <_printf_float+0x378>
 800210c:	9b05      	ldr	r3, [sp, #20]
 800210e:	465a      	mov	r2, fp
 8002110:	4631      	mov	r1, r6
 8002112:	4628      	mov	r0, r5
 8002114:	47b8      	blx	r7
 8002116:	3001      	adds	r0, #1
 8002118:	d1e5      	bne.n	80020e6 <_printf_float+0x31e>
 800211a:	e6a3      	b.n	8001e64 <_printf_float+0x9c>
 800211c:	4653      	mov	r3, sl
 800211e:	4642      	mov	r2, r8
 8002120:	4631      	mov	r1, r6
 8002122:	4628      	mov	r0, r5
 8002124:	47b8      	blx	r7
 8002126:	3001      	adds	r0, #1
 8002128:	d1e9      	bne.n	80020fe <_printf_float+0x336>
 800212a:	e69b      	b.n	8001e64 <_printf_float+0x9c>
 800212c:	2301      	movs	r3, #1
 800212e:	464a      	mov	r2, r9
 8002130:	4631      	mov	r1, r6
 8002132:	4628      	mov	r0, r5
 8002134:	47b8      	blx	r7
 8002136:	3001      	adds	r0, #1
 8002138:	f43f ae94 	beq.w	8001e64 <_printf_float+0x9c>
 800213c:	f108 0801 	add.w	r8, r8, #1
 8002140:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002144:	1a9b      	subs	r3, r3, r2
 8002146:	eba3 030a 	sub.w	r3, r3, sl
 800214a:	4543      	cmp	r3, r8
 800214c:	dcee      	bgt.n	800212c <_printf_float+0x364>
 800214e:	e747      	b.n	8001fe0 <_printf_float+0x218>
 8002150:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002152:	2a01      	cmp	r2, #1
 8002154:	dc01      	bgt.n	800215a <_printf_float+0x392>
 8002156:	07db      	lsls	r3, r3, #31
 8002158:	d539      	bpl.n	80021ce <_printf_float+0x406>
 800215a:	2301      	movs	r3, #1
 800215c:	4642      	mov	r2, r8
 800215e:	4631      	mov	r1, r6
 8002160:	4628      	mov	r0, r5
 8002162:	47b8      	blx	r7
 8002164:	3001      	adds	r0, #1
 8002166:	f43f ae7d 	beq.w	8001e64 <_printf_float+0x9c>
 800216a:	9b05      	ldr	r3, [sp, #20]
 800216c:	465a      	mov	r2, fp
 800216e:	4631      	mov	r1, r6
 8002170:	4628      	mov	r0, r5
 8002172:	47b8      	blx	r7
 8002174:	3001      	adds	r0, #1
 8002176:	f108 0801 	add.w	r8, r8, #1
 800217a:	f43f ae73 	beq.w	8001e64 <_printf_float+0x9c>
 800217e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8002182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002184:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8002188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800218c:	f103 33ff 	add.w	r3, r3, #4294967295
 8002190:	d018      	beq.n	80021c4 <_printf_float+0x3fc>
 8002192:	4642      	mov	r2, r8
 8002194:	4631      	mov	r1, r6
 8002196:	4628      	mov	r0, r5
 8002198:	47b8      	blx	r7
 800219a:	3001      	adds	r0, #1
 800219c:	d10e      	bne.n	80021bc <_printf_float+0x3f4>
 800219e:	e661      	b.n	8001e64 <_printf_float+0x9c>
 80021a0:	2301      	movs	r3, #1
 80021a2:	464a      	mov	r2, r9
 80021a4:	4631      	mov	r1, r6
 80021a6:	4628      	mov	r0, r5
 80021a8:	47b8      	blx	r7
 80021aa:	3001      	adds	r0, #1
 80021ac:	f43f ae5a 	beq.w	8001e64 <_printf_float+0x9c>
 80021b0:	f108 0801 	add.w	r8, r8, #1
 80021b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80021b6:	3b01      	subs	r3, #1
 80021b8:	4543      	cmp	r3, r8
 80021ba:	dcf1      	bgt.n	80021a0 <_printf_float+0x3d8>
 80021bc:	4653      	mov	r3, sl
 80021be:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80021c2:	e6dd      	b.n	8001f80 <_printf_float+0x1b8>
 80021c4:	f04f 0800 	mov.w	r8, #0
 80021c8:	f104 091a 	add.w	r9, r4, #26
 80021cc:	e7f2      	b.n	80021b4 <_printf_float+0x3ec>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e7df      	b.n	8002192 <_printf_float+0x3ca>
 80021d2:	2301      	movs	r3, #1
 80021d4:	464a      	mov	r2, r9
 80021d6:	4631      	mov	r1, r6
 80021d8:	4628      	mov	r0, r5
 80021da:	47b8      	blx	r7
 80021dc:	3001      	adds	r0, #1
 80021de:	f43f ae41 	beq.w	8001e64 <_printf_float+0x9c>
 80021e2:	f108 0801 	add.w	r8, r8, #1
 80021e6:	68e3      	ldr	r3, [r4, #12]
 80021e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80021ea:	1a9b      	subs	r3, r3, r2
 80021ec:	4543      	cmp	r3, r8
 80021ee:	dcf0      	bgt.n	80021d2 <_printf_float+0x40a>
 80021f0:	e6fa      	b.n	8001fe8 <_printf_float+0x220>
 80021f2:	f04f 0800 	mov.w	r8, #0
 80021f6:	f104 0919 	add.w	r9, r4, #25
 80021fa:	e7f4      	b.n	80021e6 <_printf_float+0x41e>
 80021fc:	2900      	cmp	r1, #0
 80021fe:	f43f ae8a 	beq.w	8001f16 <_printf_float+0x14e>
 8002202:	f04f 0c00 	mov.w	ip, #0
 8002206:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800220a:	e9cd 0900 	strd	r0, r9, [sp]
 800220e:	6022      	str	r2, [r4, #0]
 8002210:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002214:	4628      	mov	r0, r5
 8002216:	f7ff fd51 	bl	8001cbc <__cvt>
 800221a:	4680      	mov	r8, r0
 800221c:	e64a      	b.n	8001eb4 <_printf_float+0xec>
 800221e:	bf00      	nop

08002220 <_printf_common>:
 8002220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002224:	4691      	mov	r9, r2
 8002226:	461f      	mov	r7, r3
 8002228:	688a      	ldr	r2, [r1, #8]
 800222a:	690b      	ldr	r3, [r1, #16]
 800222c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002230:	4293      	cmp	r3, r2
 8002232:	bfb8      	it	lt
 8002234:	4613      	movlt	r3, r2
 8002236:	f8c9 3000 	str.w	r3, [r9]
 800223a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800223e:	4606      	mov	r6, r0
 8002240:	460c      	mov	r4, r1
 8002242:	b112      	cbz	r2, 800224a <_printf_common+0x2a>
 8002244:	3301      	adds	r3, #1
 8002246:	f8c9 3000 	str.w	r3, [r9]
 800224a:	6823      	ldr	r3, [r4, #0]
 800224c:	0699      	lsls	r1, r3, #26
 800224e:	bf42      	ittt	mi
 8002250:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002254:	3302      	addmi	r3, #2
 8002256:	f8c9 3000 	strmi.w	r3, [r9]
 800225a:	6825      	ldr	r5, [r4, #0]
 800225c:	f015 0506 	ands.w	r5, r5, #6
 8002260:	d107      	bne.n	8002272 <_printf_common+0x52>
 8002262:	f104 0a19 	add.w	sl, r4, #25
 8002266:	68e3      	ldr	r3, [r4, #12]
 8002268:	f8d9 2000 	ldr.w	r2, [r9]
 800226c:	1a9b      	subs	r3, r3, r2
 800226e:	42ab      	cmp	r3, r5
 8002270:	dc28      	bgt.n	80022c4 <_printf_common+0xa4>
 8002272:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002276:	6822      	ldr	r2, [r4, #0]
 8002278:	3300      	adds	r3, #0
 800227a:	bf18      	it	ne
 800227c:	2301      	movne	r3, #1
 800227e:	0692      	lsls	r2, r2, #26
 8002280:	d42d      	bmi.n	80022de <_printf_common+0xbe>
 8002282:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002286:	4639      	mov	r1, r7
 8002288:	4630      	mov	r0, r6
 800228a:	47c0      	blx	r8
 800228c:	3001      	adds	r0, #1
 800228e:	d020      	beq.n	80022d2 <_printf_common+0xb2>
 8002290:	6823      	ldr	r3, [r4, #0]
 8002292:	68e5      	ldr	r5, [r4, #12]
 8002294:	f8d9 2000 	ldr.w	r2, [r9]
 8002298:	f003 0306 	and.w	r3, r3, #6
 800229c:	2b04      	cmp	r3, #4
 800229e:	bf08      	it	eq
 80022a0:	1aad      	subeq	r5, r5, r2
 80022a2:	68a3      	ldr	r3, [r4, #8]
 80022a4:	6922      	ldr	r2, [r4, #16]
 80022a6:	bf0c      	ite	eq
 80022a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80022ac:	2500      	movne	r5, #0
 80022ae:	4293      	cmp	r3, r2
 80022b0:	bfc4      	itt	gt
 80022b2:	1a9b      	subgt	r3, r3, r2
 80022b4:	18ed      	addgt	r5, r5, r3
 80022b6:	f04f 0900 	mov.w	r9, #0
 80022ba:	341a      	adds	r4, #26
 80022bc:	454d      	cmp	r5, r9
 80022be:	d11a      	bne.n	80022f6 <_printf_common+0xd6>
 80022c0:	2000      	movs	r0, #0
 80022c2:	e008      	b.n	80022d6 <_printf_common+0xb6>
 80022c4:	2301      	movs	r3, #1
 80022c6:	4652      	mov	r2, sl
 80022c8:	4639      	mov	r1, r7
 80022ca:	4630      	mov	r0, r6
 80022cc:	47c0      	blx	r8
 80022ce:	3001      	adds	r0, #1
 80022d0:	d103      	bne.n	80022da <_printf_common+0xba>
 80022d2:	f04f 30ff 	mov.w	r0, #4294967295
 80022d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022da:	3501      	adds	r5, #1
 80022dc:	e7c3      	b.n	8002266 <_printf_common+0x46>
 80022de:	18e1      	adds	r1, r4, r3
 80022e0:	1c5a      	adds	r2, r3, #1
 80022e2:	2030      	movs	r0, #48	; 0x30
 80022e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80022e8:	4422      	add	r2, r4
 80022ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80022ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80022f2:	3302      	adds	r3, #2
 80022f4:	e7c5      	b.n	8002282 <_printf_common+0x62>
 80022f6:	2301      	movs	r3, #1
 80022f8:	4622      	mov	r2, r4
 80022fa:	4639      	mov	r1, r7
 80022fc:	4630      	mov	r0, r6
 80022fe:	47c0      	blx	r8
 8002300:	3001      	adds	r0, #1
 8002302:	d0e6      	beq.n	80022d2 <_printf_common+0xb2>
 8002304:	f109 0901 	add.w	r9, r9, #1
 8002308:	e7d8      	b.n	80022bc <_printf_common+0x9c>
	...

0800230c <_printf_i>:
 800230c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002310:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002314:	460c      	mov	r4, r1
 8002316:	7e09      	ldrb	r1, [r1, #24]
 8002318:	b085      	sub	sp, #20
 800231a:	296e      	cmp	r1, #110	; 0x6e
 800231c:	4617      	mov	r7, r2
 800231e:	4606      	mov	r6, r0
 8002320:	4698      	mov	r8, r3
 8002322:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002324:	f000 80b3 	beq.w	800248e <_printf_i+0x182>
 8002328:	d822      	bhi.n	8002370 <_printf_i+0x64>
 800232a:	2963      	cmp	r1, #99	; 0x63
 800232c:	d036      	beq.n	800239c <_printf_i+0x90>
 800232e:	d80a      	bhi.n	8002346 <_printf_i+0x3a>
 8002330:	2900      	cmp	r1, #0
 8002332:	f000 80b9 	beq.w	80024a8 <_printf_i+0x19c>
 8002336:	2958      	cmp	r1, #88	; 0x58
 8002338:	f000 8083 	beq.w	8002442 <_printf_i+0x136>
 800233c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002340:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002344:	e032      	b.n	80023ac <_printf_i+0xa0>
 8002346:	2964      	cmp	r1, #100	; 0x64
 8002348:	d001      	beq.n	800234e <_printf_i+0x42>
 800234a:	2969      	cmp	r1, #105	; 0x69
 800234c:	d1f6      	bne.n	800233c <_printf_i+0x30>
 800234e:	6820      	ldr	r0, [r4, #0]
 8002350:	6813      	ldr	r3, [r2, #0]
 8002352:	0605      	lsls	r5, r0, #24
 8002354:	f103 0104 	add.w	r1, r3, #4
 8002358:	d52a      	bpl.n	80023b0 <_printf_i+0xa4>
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6011      	str	r1, [r2, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	da03      	bge.n	800236a <_printf_i+0x5e>
 8002362:	222d      	movs	r2, #45	; 0x2d
 8002364:	425b      	negs	r3, r3
 8002366:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800236a:	486f      	ldr	r0, [pc, #444]	; (8002528 <_printf_i+0x21c>)
 800236c:	220a      	movs	r2, #10
 800236e:	e039      	b.n	80023e4 <_printf_i+0xd8>
 8002370:	2973      	cmp	r1, #115	; 0x73
 8002372:	f000 809d 	beq.w	80024b0 <_printf_i+0x1a4>
 8002376:	d808      	bhi.n	800238a <_printf_i+0x7e>
 8002378:	296f      	cmp	r1, #111	; 0x6f
 800237a:	d020      	beq.n	80023be <_printf_i+0xb2>
 800237c:	2970      	cmp	r1, #112	; 0x70
 800237e:	d1dd      	bne.n	800233c <_printf_i+0x30>
 8002380:	6823      	ldr	r3, [r4, #0]
 8002382:	f043 0320 	orr.w	r3, r3, #32
 8002386:	6023      	str	r3, [r4, #0]
 8002388:	e003      	b.n	8002392 <_printf_i+0x86>
 800238a:	2975      	cmp	r1, #117	; 0x75
 800238c:	d017      	beq.n	80023be <_printf_i+0xb2>
 800238e:	2978      	cmp	r1, #120	; 0x78
 8002390:	d1d4      	bne.n	800233c <_printf_i+0x30>
 8002392:	2378      	movs	r3, #120	; 0x78
 8002394:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002398:	4864      	ldr	r0, [pc, #400]	; (800252c <_printf_i+0x220>)
 800239a:	e055      	b.n	8002448 <_printf_i+0x13c>
 800239c:	6813      	ldr	r3, [r2, #0]
 800239e:	1d19      	adds	r1, r3, #4
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6011      	str	r1, [r2, #0]
 80023a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80023a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80023ac:	2301      	movs	r3, #1
 80023ae:	e08c      	b.n	80024ca <_printf_i+0x1be>
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6011      	str	r1, [r2, #0]
 80023b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80023b8:	bf18      	it	ne
 80023ba:	b21b      	sxthne	r3, r3
 80023bc:	e7cf      	b.n	800235e <_printf_i+0x52>
 80023be:	6813      	ldr	r3, [r2, #0]
 80023c0:	6825      	ldr	r5, [r4, #0]
 80023c2:	1d18      	adds	r0, r3, #4
 80023c4:	6010      	str	r0, [r2, #0]
 80023c6:	0628      	lsls	r0, r5, #24
 80023c8:	d501      	bpl.n	80023ce <_printf_i+0xc2>
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	e002      	b.n	80023d4 <_printf_i+0xc8>
 80023ce:	0668      	lsls	r0, r5, #25
 80023d0:	d5fb      	bpl.n	80023ca <_printf_i+0xbe>
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	4854      	ldr	r0, [pc, #336]	; (8002528 <_printf_i+0x21c>)
 80023d6:	296f      	cmp	r1, #111	; 0x6f
 80023d8:	bf14      	ite	ne
 80023da:	220a      	movne	r2, #10
 80023dc:	2208      	moveq	r2, #8
 80023de:	2100      	movs	r1, #0
 80023e0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80023e4:	6865      	ldr	r5, [r4, #4]
 80023e6:	60a5      	str	r5, [r4, #8]
 80023e8:	2d00      	cmp	r5, #0
 80023ea:	f2c0 8095 	blt.w	8002518 <_printf_i+0x20c>
 80023ee:	6821      	ldr	r1, [r4, #0]
 80023f0:	f021 0104 	bic.w	r1, r1, #4
 80023f4:	6021      	str	r1, [r4, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d13d      	bne.n	8002476 <_printf_i+0x16a>
 80023fa:	2d00      	cmp	r5, #0
 80023fc:	f040 808e 	bne.w	800251c <_printf_i+0x210>
 8002400:	4665      	mov	r5, ip
 8002402:	2a08      	cmp	r2, #8
 8002404:	d10b      	bne.n	800241e <_printf_i+0x112>
 8002406:	6823      	ldr	r3, [r4, #0]
 8002408:	07db      	lsls	r3, r3, #31
 800240a:	d508      	bpl.n	800241e <_printf_i+0x112>
 800240c:	6923      	ldr	r3, [r4, #16]
 800240e:	6862      	ldr	r2, [r4, #4]
 8002410:	429a      	cmp	r2, r3
 8002412:	bfde      	ittt	le
 8002414:	2330      	movle	r3, #48	; 0x30
 8002416:	f805 3c01 	strble.w	r3, [r5, #-1]
 800241a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800241e:	ebac 0305 	sub.w	r3, ip, r5
 8002422:	6123      	str	r3, [r4, #16]
 8002424:	f8cd 8000 	str.w	r8, [sp]
 8002428:	463b      	mov	r3, r7
 800242a:	aa03      	add	r2, sp, #12
 800242c:	4621      	mov	r1, r4
 800242e:	4630      	mov	r0, r6
 8002430:	f7ff fef6 	bl	8002220 <_printf_common>
 8002434:	3001      	adds	r0, #1
 8002436:	d14d      	bne.n	80024d4 <_printf_i+0x1c8>
 8002438:	f04f 30ff 	mov.w	r0, #4294967295
 800243c:	b005      	add	sp, #20
 800243e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002442:	4839      	ldr	r0, [pc, #228]	; (8002528 <_printf_i+0x21c>)
 8002444:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002448:	6813      	ldr	r3, [r2, #0]
 800244a:	6821      	ldr	r1, [r4, #0]
 800244c:	1d1d      	adds	r5, r3, #4
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6015      	str	r5, [r2, #0]
 8002452:	060a      	lsls	r2, r1, #24
 8002454:	d50b      	bpl.n	800246e <_printf_i+0x162>
 8002456:	07ca      	lsls	r2, r1, #31
 8002458:	bf44      	itt	mi
 800245a:	f041 0120 	orrmi.w	r1, r1, #32
 800245e:	6021      	strmi	r1, [r4, #0]
 8002460:	b91b      	cbnz	r3, 800246a <_printf_i+0x15e>
 8002462:	6822      	ldr	r2, [r4, #0]
 8002464:	f022 0220 	bic.w	r2, r2, #32
 8002468:	6022      	str	r2, [r4, #0]
 800246a:	2210      	movs	r2, #16
 800246c:	e7b7      	b.n	80023de <_printf_i+0xd2>
 800246e:	064d      	lsls	r5, r1, #25
 8002470:	bf48      	it	mi
 8002472:	b29b      	uxthmi	r3, r3
 8002474:	e7ef      	b.n	8002456 <_printf_i+0x14a>
 8002476:	4665      	mov	r5, ip
 8002478:	fbb3 f1f2 	udiv	r1, r3, r2
 800247c:	fb02 3311 	mls	r3, r2, r1, r3
 8002480:	5cc3      	ldrb	r3, [r0, r3]
 8002482:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002486:	460b      	mov	r3, r1
 8002488:	2900      	cmp	r1, #0
 800248a:	d1f5      	bne.n	8002478 <_printf_i+0x16c>
 800248c:	e7b9      	b.n	8002402 <_printf_i+0xf6>
 800248e:	6813      	ldr	r3, [r2, #0]
 8002490:	6825      	ldr	r5, [r4, #0]
 8002492:	6961      	ldr	r1, [r4, #20]
 8002494:	1d18      	adds	r0, r3, #4
 8002496:	6010      	str	r0, [r2, #0]
 8002498:	0628      	lsls	r0, r5, #24
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	d501      	bpl.n	80024a2 <_printf_i+0x196>
 800249e:	6019      	str	r1, [r3, #0]
 80024a0:	e002      	b.n	80024a8 <_printf_i+0x19c>
 80024a2:	066a      	lsls	r2, r5, #25
 80024a4:	d5fb      	bpl.n	800249e <_printf_i+0x192>
 80024a6:	8019      	strh	r1, [r3, #0]
 80024a8:	2300      	movs	r3, #0
 80024aa:	6123      	str	r3, [r4, #16]
 80024ac:	4665      	mov	r5, ip
 80024ae:	e7b9      	b.n	8002424 <_printf_i+0x118>
 80024b0:	6813      	ldr	r3, [r2, #0]
 80024b2:	1d19      	adds	r1, r3, #4
 80024b4:	6011      	str	r1, [r2, #0]
 80024b6:	681d      	ldr	r5, [r3, #0]
 80024b8:	6862      	ldr	r2, [r4, #4]
 80024ba:	2100      	movs	r1, #0
 80024bc:	4628      	mov	r0, r5
 80024be:	f7fd fec7 	bl	8000250 <memchr>
 80024c2:	b108      	cbz	r0, 80024c8 <_printf_i+0x1bc>
 80024c4:	1b40      	subs	r0, r0, r5
 80024c6:	6060      	str	r0, [r4, #4]
 80024c8:	6863      	ldr	r3, [r4, #4]
 80024ca:	6123      	str	r3, [r4, #16]
 80024cc:	2300      	movs	r3, #0
 80024ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80024d2:	e7a7      	b.n	8002424 <_printf_i+0x118>
 80024d4:	6923      	ldr	r3, [r4, #16]
 80024d6:	462a      	mov	r2, r5
 80024d8:	4639      	mov	r1, r7
 80024da:	4630      	mov	r0, r6
 80024dc:	47c0      	blx	r8
 80024de:	3001      	adds	r0, #1
 80024e0:	d0aa      	beq.n	8002438 <_printf_i+0x12c>
 80024e2:	6823      	ldr	r3, [r4, #0]
 80024e4:	079b      	lsls	r3, r3, #30
 80024e6:	d413      	bmi.n	8002510 <_printf_i+0x204>
 80024e8:	68e0      	ldr	r0, [r4, #12]
 80024ea:	9b03      	ldr	r3, [sp, #12]
 80024ec:	4298      	cmp	r0, r3
 80024ee:	bfb8      	it	lt
 80024f0:	4618      	movlt	r0, r3
 80024f2:	e7a3      	b.n	800243c <_printf_i+0x130>
 80024f4:	2301      	movs	r3, #1
 80024f6:	464a      	mov	r2, r9
 80024f8:	4639      	mov	r1, r7
 80024fa:	4630      	mov	r0, r6
 80024fc:	47c0      	blx	r8
 80024fe:	3001      	adds	r0, #1
 8002500:	d09a      	beq.n	8002438 <_printf_i+0x12c>
 8002502:	3501      	adds	r5, #1
 8002504:	68e3      	ldr	r3, [r4, #12]
 8002506:	9a03      	ldr	r2, [sp, #12]
 8002508:	1a9b      	subs	r3, r3, r2
 800250a:	42ab      	cmp	r3, r5
 800250c:	dcf2      	bgt.n	80024f4 <_printf_i+0x1e8>
 800250e:	e7eb      	b.n	80024e8 <_printf_i+0x1dc>
 8002510:	2500      	movs	r5, #0
 8002512:	f104 0919 	add.w	r9, r4, #25
 8002516:	e7f5      	b.n	8002504 <_printf_i+0x1f8>
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1ac      	bne.n	8002476 <_printf_i+0x16a>
 800251c:	7803      	ldrb	r3, [r0, #0]
 800251e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002522:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002526:	e76c      	b.n	8002402 <_printf_i+0xf6>
 8002528:	08004012 	.word	0x08004012
 800252c:	08004023 	.word	0x08004023

08002530 <_vsiprintf_r>:
 8002530:	b500      	push	{lr}
 8002532:	b09b      	sub	sp, #108	; 0x6c
 8002534:	9100      	str	r1, [sp, #0]
 8002536:	9104      	str	r1, [sp, #16]
 8002538:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800253c:	9105      	str	r1, [sp, #20]
 800253e:	9102      	str	r1, [sp, #8]
 8002540:	4905      	ldr	r1, [pc, #20]	; (8002558 <_vsiprintf_r+0x28>)
 8002542:	9103      	str	r1, [sp, #12]
 8002544:	4669      	mov	r1, sp
 8002546:	f001 f9f7 	bl	8003938 <_svfiprintf_r>
 800254a:	9b00      	ldr	r3, [sp, #0]
 800254c:	2200      	movs	r2, #0
 800254e:	701a      	strb	r2, [r3, #0]
 8002550:	b01b      	add	sp, #108	; 0x6c
 8002552:	f85d fb04 	ldr.w	pc, [sp], #4
 8002556:	bf00      	nop
 8002558:	ffff0208 	.word	0xffff0208

0800255c <vsiprintf>:
 800255c:	4613      	mov	r3, r2
 800255e:	460a      	mov	r2, r1
 8002560:	4601      	mov	r1, r0
 8002562:	4802      	ldr	r0, [pc, #8]	; (800256c <vsiprintf+0x10>)
 8002564:	6800      	ldr	r0, [r0, #0]
 8002566:	f7ff bfe3 	b.w	8002530 <_vsiprintf_r>
 800256a:	bf00      	nop
 800256c:	2000002c 	.word	0x2000002c

08002570 <quorem>:
 8002570:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002574:	6903      	ldr	r3, [r0, #16]
 8002576:	690c      	ldr	r4, [r1, #16]
 8002578:	42a3      	cmp	r3, r4
 800257a:	4680      	mov	r8, r0
 800257c:	f2c0 8082 	blt.w	8002684 <quorem+0x114>
 8002580:	3c01      	subs	r4, #1
 8002582:	f101 0714 	add.w	r7, r1, #20
 8002586:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800258a:	f100 0614 	add.w	r6, r0, #20
 800258e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8002592:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002596:	eb06 030c 	add.w	r3, r6, ip
 800259a:	3501      	adds	r5, #1
 800259c:	eb07 090c 	add.w	r9, r7, ip
 80025a0:	9301      	str	r3, [sp, #4]
 80025a2:	fbb0 f5f5 	udiv	r5, r0, r5
 80025a6:	b395      	cbz	r5, 800260e <quorem+0x9e>
 80025a8:	f04f 0a00 	mov.w	sl, #0
 80025ac:	4638      	mov	r0, r7
 80025ae:	46b6      	mov	lr, r6
 80025b0:	46d3      	mov	fp, sl
 80025b2:	f850 2b04 	ldr.w	r2, [r0], #4
 80025b6:	b293      	uxth	r3, r2
 80025b8:	fb05 a303 	mla	r3, r5, r3, sl
 80025bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	ebab 0303 	sub.w	r3, fp, r3
 80025c6:	0c12      	lsrs	r2, r2, #16
 80025c8:	f8de b000 	ldr.w	fp, [lr]
 80025cc:	fb05 a202 	mla	r2, r5, r2, sl
 80025d0:	fa13 f38b 	uxtah	r3, r3, fp
 80025d4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80025d8:	fa1f fb82 	uxth.w	fp, r2
 80025dc:	f8de 2000 	ldr.w	r2, [lr]
 80025e0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80025e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80025ee:	4581      	cmp	r9, r0
 80025f0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80025f4:	f84e 3b04 	str.w	r3, [lr], #4
 80025f8:	d2db      	bcs.n	80025b2 <quorem+0x42>
 80025fa:	f856 300c 	ldr.w	r3, [r6, ip]
 80025fe:	b933      	cbnz	r3, 800260e <quorem+0x9e>
 8002600:	9b01      	ldr	r3, [sp, #4]
 8002602:	3b04      	subs	r3, #4
 8002604:	429e      	cmp	r6, r3
 8002606:	461a      	mov	r2, r3
 8002608:	d330      	bcc.n	800266c <quorem+0xfc>
 800260a:	f8c8 4010 	str.w	r4, [r8, #16]
 800260e:	4640      	mov	r0, r8
 8002610:	f000 ffbc 	bl	800358c <__mcmp>
 8002614:	2800      	cmp	r0, #0
 8002616:	db25      	blt.n	8002664 <quorem+0xf4>
 8002618:	3501      	adds	r5, #1
 800261a:	4630      	mov	r0, r6
 800261c:	f04f 0c00 	mov.w	ip, #0
 8002620:	f857 2b04 	ldr.w	r2, [r7], #4
 8002624:	f8d0 e000 	ldr.w	lr, [r0]
 8002628:	b293      	uxth	r3, r2
 800262a:	ebac 0303 	sub.w	r3, ip, r3
 800262e:	0c12      	lsrs	r2, r2, #16
 8002630:	fa13 f38e 	uxtah	r3, r3, lr
 8002634:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002638:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800263c:	b29b      	uxth	r3, r3
 800263e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002642:	45b9      	cmp	r9, r7
 8002644:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002648:	f840 3b04 	str.w	r3, [r0], #4
 800264c:	d2e8      	bcs.n	8002620 <quorem+0xb0>
 800264e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8002652:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8002656:	b92a      	cbnz	r2, 8002664 <quorem+0xf4>
 8002658:	3b04      	subs	r3, #4
 800265a:	429e      	cmp	r6, r3
 800265c:	461a      	mov	r2, r3
 800265e:	d30b      	bcc.n	8002678 <quorem+0x108>
 8002660:	f8c8 4010 	str.w	r4, [r8, #16]
 8002664:	4628      	mov	r0, r5
 8002666:	b003      	add	sp, #12
 8002668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800266c:	6812      	ldr	r2, [r2, #0]
 800266e:	3b04      	subs	r3, #4
 8002670:	2a00      	cmp	r2, #0
 8002672:	d1ca      	bne.n	800260a <quorem+0x9a>
 8002674:	3c01      	subs	r4, #1
 8002676:	e7c5      	b.n	8002604 <quorem+0x94>
 8002678:	6812      	ldr	r2, [r2, #0]
 800267a:	3b04      	subs	r3, #4
 800267c:	2a00      	cmp	r2, #0
 800267e:	d1ef      	bne.n	8002660 <quorem+0xf0>
 8002680:	3c01      	subs	r4, #1
 8002682:	e7ea      	b.n	800265a <quorem+0xea>
 8002684:	2000      	movs	r0, #0
 8002686:	e7ee      	b.n	8002666 <quorem+0xf6>

08002688 <_dtoa_r>:
 8002688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800268c:	ec57 6b10 	vmov	r6, r7, d0
 8002690:	b095      	sub	sp, #84	; 0x54
 8002692:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8002694:	9108      	str	r1, [sp, #32]
 8002696:	4604      	mov	r4, r0
 8002698:	920a      	str	r2, [sp, #40]	; 0x28
 800269a:	9311      	str	r3, [sp, #68]	; 0x44
 800269c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80026a0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80026a4:	b93d      	cbnz	r5, 80026b6 <_dtoa_r+0x2e>
 80026a6:	2010      	movs	r0, #16
 80026a8:	f000 fd48 	bl	800313c <malloc>
 80026ac:	6260      	str	r0, [r4, #36]	; 0x24
 80026ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80026b2:	6005      	str	r5, [r0, #0]
 80026b4:	60c5      	str	r5, [r0, #12]
 80026b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026b8:	6819      	ldr	r1, [r3, #0]
 80026ba:	b151      	cbz	r1, 80026d2 <_dtoa_r+0x4a>
 80026bc:	685a      	ldr	r2, [r3, #4]
 80026be:	604a      	str	r2, [r1, #4]
 80026c0:	2301      	movs	r3, #1
 80026c2:	4093      	lsls	r3, r2
 80026c4:	608b      	str	r3, [r1, #8]
 80026c6:	4620      	mov	r0, r4
 80026c8:	f000 fd7f 	bl	80031ca <_Bfree>
 80026cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	1e3b      	subs	r3, r7, #0
 80026d4:	bfb9      	ittee	lt
 80026d6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80026da:	9303      	strlt	r3, [sp, #12]
 80026dc:	2300      	movge	r3, #0
 80026de:	f8c8 3000 	strge.w	r3, [r8]
 80026e2:	9d03      	ldr	r5, [sp, #12]
 80026e4:	4bac      	ldr	r3, [pc, #688]	; (8002998 <_dtoa_r+0x310>)
 80026e6:	bfbc      	itt	lt
 80026e8:	2201      	movlt	r2, #1
 80026ea:	f8c8 2000 	strlt.w	r2, [r8]
 80026ee:	43ab      	bics	r3, r5
 80026f0:	d11b      	bne.n	800272a <_dtoa_r+0xa2>
 80026f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80026f4:	f242 730f 	movw	r3, #9999	; 0x270f
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	9b02      	ldr	r3, [sp, #8]
 80026fc:	b923      	cbnz	r3, 8002708 <_dtoa_r+0x80>
 80026fe:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8002702:	2d00      	cmp	r5, #0
 8002704:	f000 84dd 	beq.w	80030c2 <_dtoa_r+0xa3a>
 8002708:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800270a:	b953      	cbnz	r3, 8002722 <_dtoa_r+0x9a>
 800270c:	4ba3      	ldr	r3, [pc, #652]	; (800299c <_dtoa_r+0x314>)
 800270e:	e020      	b.n	8002752 <_dtoa_r+0xca>
 8002710:	4ba3      	ldr	r3, [pc, #652]	; (80029a0 <_dtoa_r+0x318>)
 8002712:	9304      	str	r3, [sp, #16]
 8002714:	3308      	adds	r3, #8
 8002716:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	9804      	ldr	r0, [sp, #16]
 800271c:	b015      	add	sp, #84	; 0x54
 800271e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002722:	4b9e      	ldr	r3, [pc, #632]	; (800299c <_dtoa_r+0x314>)
 8002724:	9304      	str	r3, [sp, #16]
 8002726:	3303      	adds	r3, #3
 8002728:	e7f5      	b.n	8002716 <_dtoa_r+0x8e>
 800272a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800272e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8002732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002736:	ed8d 7b04 	vstr	d7, [sp, #16]
 800273a:	d10c      	bne.n	8002756 <_dtoa_r+0xce>
 800273c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800273e:	2301      	movs	r3, #1
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002744:	2b00      	cmp	r3, #0
 8002746:	f000 84b9 	beq.w	80030bc <_dtoa_r+0xa34>
 800274a:	4b96      	ldr	r3, [pc, #600]	; (80029a4 <_dtoa_r+0x31c>)
 800274c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800274e:	6013      	str	r3, [r2, #0]
 8002750:	3b01      	subs	r3, #1
 8002752:	9304      	str	r3, [sp, #16]
 8002754:	e7e1      	b.n	800271a <_dtoa_r+0x92>
 8002756:	a913      	add	r1, sp, #76	; 0x4c
 8002758:	aa12      	add	r2, sp, #72	; 0x48
 800275a:	ed9d 0b04 	vldr	d0, [sp, #16]
 800275e:	4620      	mov	r0, r4
 8002760:	f000 ff8b 	bl	800367a <__d2b>
 8002764:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8002768:	9001      	str	r0, [sp, #4]
 800276a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800276c:	2e00      	cmp	r6, #0
 800276e:	d046      	beq.n	80027fe <_dtoa_r+0x176>
 8002770:	9805      	ldr	r0, [sp, #20]
 8002772:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8002776:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800277a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800277e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002782:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8002786:	2700      	movs	r7, #0
 8002788:	ee07 aa90 	vmov	s15, sl
 800278c:	ec43 2b16 	vmov	d6, r2, r3
 8002790:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8002794:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8002980 <_dtoa_r+0x2f8>
 8002798:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800279c:	ee36 7b47 	vsub.f64	d7, d6, d7
 80027a0:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8002988 <_dtoa_r+0x300>
 80027a4:	eea7 6b04 	vfma.f64	d6, d7, d4
 80027a8:	eeb0 7b46 	vmov.f64	d7, d6
 80027ac:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8002990 <_dtoa_r+0x308>
 80027b0:	eea5 7b06 	vfma.f64	d7, d5, d6
 80027b4:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80027b8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80027bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c0:	ee16 ba90 	vmov	fp, s13
 80027c4:	d508      	bpl.n	80027d8 <_dtoa_r+0x150>
 80027c6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80027ca:	eeb4 6b47 	vcmp.f64	d6, d7
 80027ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d2:	bf18      	it	ne
 80027d4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80027d8:	f1bb 0f16 	cmp.w	fp, #22
 80027dc:	d834      	bhi.n	8002848 <_dtoa_r+0x1c0>
 80027de:	4b72      	ldr	r3, [pc, #456]	; (80029a8 <_dtoa_r+0x320>)
 80027e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80027e4:	ed93 7b00 	vldr	d7, [r3]
 80027e8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80027ec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80027f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f4:	dd01      	ble.n	80027fa <_dtoa_r+0x172>
 80027f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80027fa:	2300      	movs	r3, #0
 80027fc:	e025      	b.n	800284a <_dtoa_r+0x1c2>
 80027fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002800:	eb01 0a03 	add.w	sl, r1, r3
 8002804:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8002808:	2b20      	cmp	r3, #32
 800280a:	dd17      	ble.n	800283c <_dtoa_r+0x1b4>
 800280c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002810:	9a02      	ldr	r2, [sp, #8]
 8002812:	409d      	lsls	r5, r3
 8002814:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8002818:	fa22 f303 	lsr.w	r3, r2, r3
 800281c:	432b      	orrs	r3, r5
 800281e:	ee07 3a90 	vmov	s15, r3
 8002822:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002826:	f10a 3aff 	add.w	sl, sl, #4294967295
 800282a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800282e:	9805      	ldr	r0, [sp, #20]
 8002830:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002834:	2701      	movs	r7, #1
 8002836:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800283a:	e7a5      	b.n	8002788 <_dtoa_r+0x100>
 800283c:	9a02      	ldr	r2, [sp, #8]
 800283e:	f1c3 0320 	rsb	r3, r3, #32
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	e7ea      	b.n	800281e <_dtoa_r+0x196>
 8002848:	2301      	movs	r3, #1
 800284a:	eba1 0a0a 	sub.w	sl, r1, sl
 800284e:	9310      	str	r3, [sp, #64]	; 0x40
 8002850:	f1ba 0301 	subs.w	r3, sl, #1
 8002854:	9307      	str	r3, [sp, #28]
 8002856:	bf43      	ittte	mi
 8002858:	2300      	movmi	r3, #0
 800285a:	f1ca 0a01 	rsbmi	sl, sl, #1
 800285e:	9307      	strmi	r3, [sp, #28]
 8002860:	f04f 0a00 	movpl.w	sl, #0
 8002864:	f1bb 0f00 	cmp.w	fp, #0
 8002868:	db19      	blt.n	800289e <_dtoa_r+0x216>
 800286a:	9b07      	ldr	r3, [sp, #28]
 800286c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8002870:	445b      	add	r3, fp
 8002872:	9307      	str	r3, [sp, #28]
 8002874:	f04f 0800 	mov.w	r8, #0
 8002878:	9b08      	ldr	r3, [sp, #32]
 800287a:	2b09      	cmp	r3, #9
 800287c:	d866      	bhi.n	800294c <_dtoa_r+0x2c4>
 800287e:	2b05      	cmp	r3, #5
 8002880:	bfc4      	itt	gt
 8002882:	3b04      	subgt	r3, #4
 8002884:	9308      	strgt	r3, [sp, #32]
 8002886:	9b08      	ldr	r3, [sp, #32]
 8002888:	f1a3 0302 	sub.w	r3, r3, #2
 800288c:	bfcc      	ite	gt
 800288e:	2500      	movgt	r5, #0
 8002890:	2501      	movle	r5, #1
 8002892:	2b03      	cmp	r3, #3
 8002894:	d866      	bhi.n	8002964 <_dtoa_r+0x2dc>
 8002896:	e8df f003 	tbb	[pc, r3]
 800289a:	5755      	.short	0x5755
 800289c:	4909      	.short	0x4909
 800289e:	2300      	movs	r3, #0
 80028a0:	ebaa 0a0b 	sub.w	sl, sl, fp
 80028a4:	f1cb 0800 	rsb	r8, fp, #0
 80028a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80028aa:	e7e5      	b.n	8002878 <_dtoa_r+0x1f0>
 80028ac:	2301      	movs	r3, #1
 80028ae:	9309      	str	r3, [sp, #36]	; 0x24
 80028b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	dd59      	ble.n	800296a <_dtoa_r+0x2e2>
 80028b6:	9306      	str	r3, [sp, #24]
 80028b8:	4699      	mov	r9, r3
 80028ba:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80028bc:	2200      	movs	r2, #0
 80028be:	6072      	str	r2, [r6, #4]
 80028c0:	2204      	movs	r2, #4
 80028c2:	f102 0014 	add.w	r0, r2, #20
 80028c6:	4298      	cmp	r0, r3
 80028c8:	6871      	ldr	r1, [r6, #4]
 80028ca:	d953      	bls.n	8002974 <_dtoa_r+0x2ec>
 80028cc:	4620      	mov	r0, r4
 80028ce:	f000 fc48 	bl	8003162 <_Balloc>
 80028d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028d4:	6030      	str	r0, [r6, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	9304      	str	r3, [sp, #16]
 80028da:	f1b9 0f0e 	cmp.w	r9, #14
 80028de:	f200 80c2 	bhi.w	8002a66 <_dtoa_r+0x3de>
 80028e2:	2d00      	cmp	r5, #0
 80028e4:	f000 80bf 	beq.w	8002a66 <_dtoa_r+0x3de>
 80028e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80028ec:	f1bb 0f00 	cmp.w	fp, #0
 80028f0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80028f4:	f340 80e6 	ble.w	8002ac4 <_dtoa_r+0x43c>
 80028f8:	4a2b      	ldr	r2, [pc, #172]	; (80029a8 <_dtoa_r+0x320>)
 80028fa:	f00b 030f 	and.w	r3, fp, #15
 80028fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002902:	ed93 7b00 	vldr	d7, [r3]
 8002906:	ea4f 132b 	mov.w	r3, fp, asr #4
 800290a:	06da      	lsls	r2, r3, #27
 800290c:	f140 80d8 	bpl.w	8002ac0 <_dtoa_r+0x438>
 8002910:	4a26      	ldr	r2, [pc, #152]	; (80029ac <_dtoa_r+0x324>)
 8002912:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8002916:	ed92 6b08 	vldr	d6, [r2, #32]
 800291a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800291e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002922:	f003 030f 	and.w	r3, r3, #15
 8002926:	2203      	movs	r2, #3
 8002928:	4920      	ldr	r1, [pc, #128]	; (80029ac <_dtoa_r+0x324>)
 800292a:	e04a      	b.n	80029c2 <_dtoa_r+0x33a>
 800292c:	2301      	movs	r3, #1
 800292e:	9309      	str	r3, [sp, #36]	; 0x24
 8002930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002932:	445b      	add	r3, fp
 8002934:	f103 0901 	add.w	r9, r3, #1
 8002938:	9306      	str	r3, [sp, #24]
 800293a:	464b      	mov	r3, r9
 800293c:	2b01      	cmp	r3, #1
 800293e:	bfb8      	it	lt
 8002940:	2301      	movlt	r3, #1
 8002942:	e7ba      	b.n	80028ba <_dtoa_r+0x232>
 8002944:	2300      	movs	r3, #0
 8002946:	e7b2      	b.n	80028ae <_dtoa_r+0x226>
 8002948:	2300      	movs	r3, #0
 800294a:	e7f0      	b.n	800292e <_dtoa_r+0x2a6>
 800294c:	2501      	movs	r5, #1
 800294e:	2300      	movs	r3, #0
 8002950:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8002954:	f04f 33ff 	mov.w	r3, #4294967295
 8002958:	9306      	str	r3, [sp, #24]
 800295a:	4699      	mov	r9, r3
 800295c:	2200      	movs	r2, #0
 800295e:	2312      	movs	r3, #18
 8002960:	920a      	str	r2, [sp, #40]	; 0x28
 8002962:	e7aa      	b.n	80028ba <_dtoa_r+0x232>
 8002964:	2301      	movs	r3, #1
 8002966:	9309      	str	r3, [sp, #36]	; 0x24
 8002968:	e7f4      	b.n	8002954 <_dtoa_r+0x2cc>
 800296a:	2301      	movs	r3, #1
 800296c:	9306      	str	r3, [sp, #24]
 800296e:	4699      	mov	r9, r3
 8002970:	461a      	mov	r2, r3
 8002972:	e7f5      	b.n	8002960 <_dtoa_r+0x2d8>
 8002974:	3101      	adds	r1, #1
 8002976:	6071      	str	r1, [r6, #4]
 8002978:	0052      	lsls	r2, r2, #1
 800297a:	e7a2      	b.n	80028c2 <_dtoa_r+0x23a>
 800297c:	f3af 8000 	nop.w
 8002980:	636f4361 	.word	0x636f4361
 8002984:	3fd287a7 	.word	0x3fd287a7
 8002988:	8b60c8b3 	.word	0x8b60c8b3
 800298c:	3fc68a28 	.word	0x3fc68a28
 8002990:	509f79fb 	.word	0x509f79fb
 8002994:	3fd34413 	.word	0x3fd34413
 8002998:	7ff00000 	.word	0x7ff00000
 800299c:	0800403d 	.word	0x0800403d
 80029a0:	08004034 	.word	0x08004034
 80029a4:	08004011 	.word	0x08004011
 80029a8:	08004070 	.word	0x08004070
 80029ac:	08004048 	.word	0x08004048
 80029b0:	07de      	lsls	r6, r3, #31
 80029b2:	d504      	bpl.n	80029be <_dtoa_r+0x336>
 80029b4:	ed91 6b00 	vldr	d6, [r1]
 80029b8:	3201      	adds	r2, #1
 80029ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80029be:	105b      	asrs	r3, r3, #1
 80029c0:	3108      	adds	r1, #8
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1f4      	bne.n	80029b0 <_dtoa_r+0x328>
 80029c6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80029ca:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80029ce:	ed8d 7b02 	vstr	d7, [sp, #8]
 80029d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 80a7 	beq.w	8002b28 <_dtoa_r+0x4a0>
 80029da:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80029de:	ed9d 7b02 	vldr	d7, [sp, #8]
 80029e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80029e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ea:	f140 809d 	bpl.w	8002b28 <_dtoa_r+0x4a0>
 80029ee:	f1b9 0f00 	cmp.w	r9, #0
 80029f2:	f000 8099 	beq.w	8002b28 <_dtoa_r+0x4a0>
 80029f6:	9b06      	ldr	r3, [sp, #24]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	dd30      	ble.n	8002a5e <_dtoa_r+0x3d6>
 80029fc:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8002a00:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002a04:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002a08:	9d06      	ldr	r5, [sp, #24]
 8002a0a:	f10b 33ff 	add.w	r3, fp, #4294967295
 8002a0e:	3201      	adds	r2, #1
 8002a10:	ed9d 6b02 	vldr	d6, [sp, #8]
 8002a14:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8002a18:	ee07 2a90 	vmov	s15, r2
 8002a1c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002a20:	eea7 5b06 	vfma.f64	d5, d7, d6
 8002a24:	ed8d 5b02 	vstr	d5, [sp, #8]
 8002a28:	9a03      	ldr	r2, [sp, #12]
 8002a2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002a2e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8002a32:	2d00      	cmp	r5, #0
 8002a34:	d17b      	bne.n	8002b2e <_dtoa_r+0x4a6>
 8002a36:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8002a3a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002a3e:	ec41 0b17 	vmov	d7, r0, r1
 8002a42:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a4a:	f300 8253 	bgt.w	8002ef4 <_dtoa_r+0x86c>
 8002a4e:	eeb1 7b47 	vneg.f64	d7, d7
 8002a52:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a5a:	f100 8249 	bmi.w	8002ef0 <_dtoa_r+0x868>
 8002a5e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8002a62:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002a66:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f2c0 8119 	blt.w	8002ca0 <_dtoa_r+0x618>
 8002a6e:	f1bb 0f0e 	cmp.w	fp, #14
 8002a72:	f300 8115 	bgt.w	8002ca0 <_dtoa_r+0x618>
 8002a76:	4bc3      	ldr	r3, [pc, #780]	; (8002d84 <_dtoa_r+0x6fc>)
 8002a78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8002a7c:	ed93 6b00 	vldr	d6, [r3]
 8002a80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f280 80ba 	bge.w	8002bfc <_dtoa_r+0x574>
 8002a88:	f1b9 0f00 	cmp.w	r9, #0
 8002a8c:	f300 80b6 	bgt.w	8002bfc <_dtoa_r+0x574>
 8002a90:	f040 822d 	bne.w	8002eee <_dtoa_r+0x866>
 8002a94:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8002a98:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002a9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002aa0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aa8:	464d      	mov	r5, r9
 8002aaa:	464f      	mov	r7, r9
 8002aac:	f280 8204 	bge.w	8002eb8 <_dtoa_r+0x830>
 8002ab0:	9b04      	ldr	r3, [sp, #16]
 8002ab2:	9a04      	ldr	r2, [sp, #16]
 8002ab4:	1c5e      	adds	r6, r3, #1
 8002ab6:	2331      	movs	r3, #49	; 0x31
 8002ab8:	7013      	strb	r3, [r2, #0]
 8002aba:	f10b 0b01 	add.w	fp, fp, #1
 8002abe:	e1ff      	b.n	8002ec0 <_dtoa_r+0x838>
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	e731      	b.n	8002928 <_dtoa_r+0x2a0>
 8002ac4:	d02e      	beq.n	8002b24 <_dtoa_r+0x49c>
 8002ac6:	f1cb 0300 	rsb	r3, fp, #0
 8002aca:	4aae      	ldr	r2, [pc, #696]	; (8002d84 <_dtoa_r+0x6fc>)
 8002acc:	f003 010f 	and.w	r1, r3, #15
 8002ad0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002ad4:	ed92 7b00 	vldr	d7, [r2]
 8002ad8:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8002adc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002ae0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8002ae4:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8002ae8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8002aec:	49a6      	ldr	r1, [pc, #664]	; (8002d88 <_dtoa_r+0x700>)
 8002aee:	111b      	asrs	r3, r3, #4
 8002af0:	2000      	movs	r0, #0
 8002af2:	2202      	movs	r2, #2
 8002af4:	b93b      	cbnz	r3, 8002b06 <_dtoa_r+0x47e>
 8002af6:	2800      	cmp	r0, #0
 8002af8:	f43f af6b 	beq.w	80029d2 <_dtoa_r+0x34a>
 8002afc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002b00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002b04:	e765      	b.n	80029d2 <_dtoa_r+0x34a>
 8002b06:	07dd      	lsls	r5, r3, #31
 8002b08:	d509      	bpl.n	8002b1e <_dtoa_r+0x496>
 8002b0a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8002b0e:	ed91 7b00 	vldr	d7, [r1]
 8002b12:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002b16:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8002b1a:	3201      	adds	r2, #1
 8002b1c:	2001      	movs	r0, #1
 8002b1e:	105b      	asrs	r3, r3, #1
 8002b20:	3108      	adds	r1, #8
 8002b22:	e7e7      	b.n	8002af4 <_dtoa_r+0x46c>
 8002b24:	2202      	movs	r2, #2
 8002b26:	e754      	b.n	80029d2 <_dtoa_r+0x34a>
 8002b28:	465b      	mov	r3, fp
 8002b2a:	464d      	mov	r5, r9
 8002b2c:	e770      	b.n	8002a10 <_dtoa_r+0x388>
 8002b2e:	4a95      	ldr	r2, [pc, #596]	; (8002d84 <_dtoa_r+0x6fc>)
 8002b30:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8002b34:	ed12 4b02 	vldr	d4, [r2, #-8]
 8002b38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002b3a:	ec41 0b17 	vmov	d7, r0, r1
 8002b3e:	b35a      	cbz	r2, 8002b98 <_dtoa_r+0x510>
 8002b40:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8002b44:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8002b48:	9e04      	ldr	r6, [sp, #16]
 8002b4a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8002b4e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8002b52:	ee35 7b47 	vsub.f64	d7, d5, d7
 8002b56:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8002b5a:	ee14 2a90 	vmov	r2, s9
 8002b5e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8002b62:	3230      	adds	r2, #48	; 0x30
 8002b64:	ee36 6b45 	vsub.f64	d6, d6, d5
 8002b68:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b70:	f806 2b01 	strb.w	r2, [r6], #1
 8002b74:	d43b      	bmi.n	8002bee <_dtoa_r+0x566>
 8002b76:	ee32 5b46 	vsub.f64	d5, d2, d6
 8002b7a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8002b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b82:	d472      	bmi.n	8002c6a <_dtoa_r+0x5e2>
 8002b84:	9a04      	ldr	r2, [sp, #16]
 8002b86:	1ab2      	subs	r2, r6, r2
 8002b88:	4295      	cmp	r5, r2
 8002b8a:	f77f af68 	ble.w	8002a5e <_dtoa_r+0x3d6>
 8002b8e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8002b92:	ee26 6b03 	vmul.f64	d6, d6, d3
 8002b96:	e7de      	b.n	8002b56 <_dtoa_r+0x4ce>
 8002b98:	9a04      	ldr	r2, [sp, #16]
 8002b9a:	ee24 7b07 	vmul.f64	d7, d4, d7
 8002b9e:	1956      	adds	r6, r2, r5
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8002ba6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8002baa:	ee14 2a90 	vmov	r2, s9
 8002bae:	3230      	adds	r2, #48	; 0x30
 8002bb0:	f801 2b01 	strb.w	r2, [r1], #1
 8002bb4:	42b1      	cmp	r1, r6
 8002bb6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8002bba:	ee36 6b45 	vsub.f64	d6, d6, d5
 8002bbe:	d11a      	bne.n	8002bf6 <_dtoa_r+0x56e>
 8002bc0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8002bc4:	ee37 4b05 	vadd.f64	d4, d7, d5
 8002bc8:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8002bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bd0:	dc4b      	bgt.n	8002c6a <_dtoa_r+0x5e2>
 8002bd2:	ee35 7b47 	vsub.f64	d7, d5, d7
 8002bd6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bde:	f57f af3e 	bpl.w	8002a5e <_dtoa_r+0x3d6>
 8002be2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8002be6:	2a30      	cmp	r2, #48	; 0x30
 8002be8:	f106 31ff 	add.w	r1, r6, #4294967295
 8002bec:	d001      	beq.n	8002bf2 <_dtoa_r+0x56a>
 8002bee:	469b      	mov	fp, r3
 8002bf0:	e02a      	b.n	8002c48 <_dtoa_r+0x5c0>
 8002bf2:	460e      	mov	r6, r1
 8002bf4:	e7f5      	b.n	8002be2 <_dtoa_r+0x55a>
 8002bf6:	ee26 6b03 	vmul.f64	d6, d6, d3
 8002bfa:	e7d4      	b.n	8002ba6 <_dtoa_r+0x51e>
 8002bfc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002c00:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8002c04:	9e04      	ldr	r6, [sp, #16]
 8002c06:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8002c0a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8002c0e:	ee15 3a10 	vmov	r3, s10
 8002c12:	3330      	adds	r3, #48	; 0x30
 8002c14:	f806 3b01 	strb.w	r3, [r6], #1
 8002c18:	9b04      	ldr	r3, [sp, #16]
 8002c1a:	1af3      	subs	r3, r6, r3
 8002c1c:	4599      	cmp	r9, r3
 8002c1e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8002c22:	eea3 7b46 	vfms.f64	d7, d3, d6
 8002c26:	d133      	bne.n	8002c90 <_dtoa_r+0x608>
 8002c28:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002c2c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c34:	dc18      	bgt.n	8002c68 <_dtoa_r+0x5e0>
 8002c36:	eeb4 7b46 	vcmp.f64	d7, d6
 8002c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c3e:	d103      	bne.n	8002c48 <_dtoa_r+0x5c0>
 8002c40:	ee15 3a10 	vmov	r3, s10
 8002c44:	07db      	lsls	r3, r3, #31
 8002c46:	d40f      	bmi.n	8002c68 <_dtoa_r+0x5e0>
 8002c48:	9901      	ldr	r1, [sp, #4]
 8002c4a:	4620      	mov	r0, r4
 8002c4c:	f000 fabd 	bl	80031ca <_Bfree>
 8002c50:	2300      	movs	r3, #0
 8002c52:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002c54:	7033      	strb	r3, [r6, #0]
 8002c56:	f10b 0301 	add.w	r3, fp, #1
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f43f ad5b 	beq.w	800271a <_dtoa_r+0x92>
 8002c64:	601e      	str	r6, [r3, #0]
 8002c66:	e558      	b.n	800271a <_dtoa_r+0x92>
 8002c68:	465b      	mov	r3, fp
 8002c6a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8002c6e:	2939      	cmp	r1, #57	; 0x39
 8002c70:	f106 32ff 	add.w	r2, r6, #4294967295
 8002c74:	d106      	bne.n	8002c84 <_dtoa_r+0x5fc>
 8002c76:	9904      	ldr	r1, [sp, #16]
 8002c78:	4291      	cmp	r1, r2
 8002c7a:	d107      	bne.n	8002c8c <_dtoa_r+0x604>
 8002c7c:	2230      	movs	r2, #48	; 0x30
 8002c7e:	700a      	strb	r2, [r1, #0]
 8002c80:	3301      	adds	r3, #1
 8002c82:	460a      	mov	r2, r1
 8002c84:	7811      	ldrb	r1, [r2, #0]
 8002c86:	3101      	adds	r1, #1
 8002c88:	7011      	strb	r1, [r2, #0]
 8002c8a:	e7b0      	b.n	8002bee <_dtoa_r+0x566>
 8002c8c:	4616      	mov	r6, r2
 8002c8e:	e7ec      	b.n	8002c6a <_dtoa_r+0x5e2>
 8002c90:	ee27 7b04 	vmul.f64	d7, d7, d4
 8002c94:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8002c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c9c:	d1b3      	bne.n	8002c06 <_dtoa_r+0x57e>
 8002c9e:	e7d3      	b.n	8002c48 <_dtoa_r+0x5c0>
 8002ca0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ca2:	2a00      	cmp	r2, #0
 8002ca4:	f000 808d 	beq.w	8002dc2 <_dtoa_r+0x73a>
 8002ca8:	9a08      	ldr	r2, [sp, #32]
 8002caa:	2a01      	cmp	r2, #1
 8002cac:	dc72      	bgt.n	8002d94 <_dtoa_r+0x70c>
 8002cae:	2f00      	cmp	r7, #0
 8002cb0:	d06c      	beq.n	8002d8c <_dtoa_r+0x704>
 8002cb2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8002cb6:	4645      	mov	r5, r8
 8002cb8:	4656      	mov	r6, sl
 8002cba:	9a07      	ldr	r2, [sp, #28]
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	441a      	add	r2, r3
 8002cc0:	4620      	mov	r0, r4
 8002cc2:	449a      	add	sl, r3
 8002cc4:	9207      	str	r2, [sp, #28]
 8002cc6:	f000 fb20 	bl	800330a <__i2b>
 8002cca:	4607      	mov	r7, r0
 8002ccc:	2e00      	cmp	r6, #0
 8002cce:	dd0b      	ble.n	8002ce8 <_dtoa_r+0x660>
 8002cd0:	9b07      	ldr	r3, [sp, #28]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	dd08      	ble.n	8002ce8 <_dtoa_r+0x660>
 8002cd6:	42b3      	cmp	r3, r6
 8002cd8:	9a07      	ldr	r2, [sp, #28]
 8002cda:	bfa8      	it	ge
 8002cdc:	4633      	movge	r3, r6
 8002cde:	ebaa 0a03 	sub.w	sl, sl, r3
 8002ce2:	1af6      	subs	r6, r6, r3
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	9307      	str	r3, [sp, #28]
 8002ce8:	f1b8 0f00 	cmp.w	r8, #0
 8002cec:	d01d      	beq.n	8002d2a <_dtoa_r+0x6a2>
 8002cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d06a      	beq.n	8002dca <_dtoa_r+0x742>
 8002cf4:	b18d      	cbz	r5, 8002d1a <_dtoa_r+0x692>
 8002cf6:	4639      	mov	r1, r7
 8002cf8:	462a      	mov	r2, r5
 8002cfa:	4620      	mov	r0, r4
 8002cfc:	f000 fba4 	bl	8003448 <__pow5mult>
 8002d00:	9a01      	ldr	r2, [sp, #4]
 8002d02:	4601      	mov	r1, r0
 8002d04:	4607      	mov	r7, r0
 8002d06:	4620      	mov	r0, r4
 8002d08:	f000 fb08 	bl	800331c <__multiply>
 8002d0c:	9901      	ldr	r1, [sp, #4]
 8002d0e:	900c      	str	r0, [sp, #48]	; 0x30
 8002d10:	4620      	mov	r0, r4
 8002d12:	f000 fa5a 	bl	80031ca <_Bfree>
 8002d16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002d18:	9301      	str	r3, [sp, #4]
 8002d1a:	ebb8 0205 	subs.w	r2, r8, r5
 8002d1e:	d004      	beq.n	8002d2a <_dtoa_r+0x6a2>
 8002d20:	9901      	ldr	r1, [sp, #4]
 8002d22:	4620      	mov	r0, r4
 8002d24:	f000 fb90 	bl	8003448 <__pow5mult>
 8002d28:	9001      	str	r0, [sp, #4]
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	4620      	mov	r0, r4
 8002d2e:	f000 faec 	bl	800330a <__i2b>
 8002d32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002d34:	4605      	mov	r5, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 81ca 	beq.w	80030d0 <_dtoa_r+0xa48>
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	4601      	mov	r1, r0
 8002d40:	4620      	mov	r0, r4
 8002d42:	f000 fb81 	bl	8003448 <__pow5mult>
 8002d46:	9b08      	ldr	r3, [sp, #32]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	4605      	mov	r5, r0
 8002d4c:	dc44      	bgt.n	8002dd8 <_dtoa_r+0x750>
 8002d4e:	9b02      	ldr	r3, [sp, #8]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d13c      	bne.n	8002dce <_dtoa_r+0x746>
 8002d54:	9b03      	ldr	r3, [sp, #12]
 8002d56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d137      	bne.n	8002dce <_dtoa_r+0x746>
 8002d5e:	9b03      	ldr	r3, [sp, #12]
 8002d60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d64:	0d1b      	lsrs	r3, r3, #20
 8002d66:	051b      	lsls	r3, r3, #20
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d033      	beq.n	8002dd4 <_dtoa_r+0x74c>
 8002d6c:	9b07      	ldr	r3, [sp, #28]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	f10a 0a01 	add.w	sl, sl, #1
 8002d74:	9307      	str	r3, [sp, #28]
 8002d76:	f04f 0801 	mov.w	r8, #1
 8002d7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002d7c:	bb73      	cbnz	r3, 8002ddc <_dtoa_r+0x754>
 8002d7e:	2001      	movs	r0, #1
 8002d80:	e034      	b.n	8002dec <_dtoa_r+0x764>
 8002d82:	bf00      	nop
 8002d84:	08004070 	.word	0x08004070
 8002d88:	08004048 	.word	0x08004048
 8002d8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002d8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8002d92:	e790      	b.n	8002cb6 <_dtoa_r+0x62e>
 8002d94:	f109 35ff 	add.w	r5, r9, #4294967295
 8002d98:	45a8      	cmp	r8, r5
 8002d9a:	bfbf      	itttt	lt
 8002d9c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8002d9e:	eba5 0808 	sublt.w	r8, r5, r8
 8002da2:	4443      	addlt	r3, r8
 8002da4:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8002da6:	bfb6      	itet	lt
 8002da8:	46a8      	movlt	r8, r5
 8002daa:	eba8 0505 	subge.w	r5, r8, r5
 8002dae:	2500      	movlt	r5, #0
 8002db0:	f1b9 0f00 	cmp.w	r9, #0
 8002db4:	bfb9      	ittee	lt
 8002db6:	ebaa 0609 	sublt.w	r6, sl, r9
 8002dba:	2300      	movlt	r3, #0
 8002dbc:	4656      	movge	r6, sl
 8002dbe:	464b      	movge	r3, r9
 8002dc0:	e77b      	b.n	8002cba <_dtoa_r+0x632>
 8002dc2:	4645      	mov	r5, r8
 8002dc4:	4656      	mov	r6, sl
 8002dc6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002dc8:	e780      	b.n	8002ccc <_dtoa_r+0x644>
 8002dca:	4642      	mov	r2, r8
 8002dcc:	e7a8      	b.n	8002d20 <_dtoa_r+0x698>
 8002dce:	f04f 0800 	mov.w	r8, #0
 8002dd2:	e7d2      	b.n	8002d7a <_dtoa_r+0x6f2>
 8002dd4:	4698      	mov	r8, r3
 8002dd6:	e7d0      	b.n	8002d7a <_dtoa_r+0x6f2>
 8002dd8:	f04f 0800 	mov.w	r8, #0
 8002ddc:	692b      	ldr	r3, [r5, #16]
 8002dde:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8002de2:	6918      	ldr	r0, [r3, #16]
 8002de4:	f000 fa43 	bl	800326e <__hi0bits>
 8002de8:	f1c0 0020 	rsb	r0, r0, #32
 8002dec:	9b07      	ldr	r3, [sp, #28]
 8002dee:	4418      	add	r0, r3
 8002df0:	f010 001f 	ands.w	r0, r0, #31
 8002df4:	d047      	beq.n	8002e86 <_dtoa_r+0x7fe>
 8002df6:	f1c0 0320 	rsb	r3, r0, #32
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	dd3b      	ble.n	8002e76 <_dtoa_r+0x7ee>
 8002dfe:	9b07      	ldr	r3, [sp, #28]
 8002e00:	f1c0 001c 	rsb	r0, r0, #28
 8002e04:	4482      	add	sl, r0
 8002e06:	4406      	add	r6, r0
 8002e08:	4403      	add	r3, r0
 8002e0a:	9307      	str	r3, [sp, #28]
 8002e0c:	f1ba 0f00 	cmp.w	sl, #0
 8002e10:	dd05      	ble.n	8002e1e <_dtoa_r+0x796>
 8002e12:	4652      	mov	r2, sl
 8002e14:	9901      	ldr	r1, [sp, #4]
 8002e16:	4620      	mov	r0, r4
 8002e18:	f000 fb64 	bl	80034e4 <__lshift>
 8002e1c:	9001      	str	r0, [sp, #4]
 8002e1e:	9b07      	ldr	r3, [sp, #28]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	dd05      	ble.n	8002e30 <_dtoa_r+0x7a8>
 8002e24:	4629      	mov	r1, r5
 8002e26:	461a      	mov	r2, r3
 8002e28:	4620      	mov	r0, r4
 8002e2a:	f000 fb5b 	bl	80034e4 <__lshift>
 8002e2e:	4605      	mov	r5, r0
 8002e30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002e32:	b353      	cbz	r3, 8002e8a <_dtoa_r+0x802>
 8002e34:	4629      	mov	r1, r5
 8002e36:	9801      	ldr	r0, [sp, #4]
 8002e38:	f000 fba8 	bl	800358c <__mcmp>
 8002e3c:	2800      	cmp	r0, #0
 8002e3e:	da24      	bge.n	8002e8a <_dtoa_r+0x802>
 8002e40:	2300      	movs	r3, #0
 8002e42:	220a      	movs	r2, #10
 8002e44:	9901      	ldr	r1, [sp, #4]
 8002e46:	4620      	mov	r0, r4
 8002e48:	f000 f9d6 	bl	80031f8 <__multadd>
 8002e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e4e:	9001      	str	r0, [sp, #4]
 8002e50:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 8142 	beq.w	80030de <_dtoa_r+0xa56>
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	4639      	mov	r1, r7
 8002e5e:	220a      	movs	r2, #10
 8002e60:	4620      	mov	r0, r4
 8002e62:	f000 f9c9 	bl	80031f8 <__multadd>
 8002e66:	9b06      	ldr	r3, [sp, #24]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	4607      	mov	r7, r0
 8002e6c:	dc4b      	bgt.n	8002f06 <_dtoa_r+0x87e>
 8002e6e:	9b08      	ldr	r3, [sp, #32]
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	dd48      	ble.n	8002f06 <_dtoa_r+0x87e>
 8002e74:	e011      	b.n	8002e9a <_dtoa_r+0x812>
 8002e76:	d0c9      	beq.n	8002e0c <_dtoa_r+0x784>
 8002e78:	9a07      	ldr	r2, [sp, #28]
 8002e7a:	331c      	adds	r3, #28
 8002e7c:	441a      	add	r2, r3
 8002e7e:	449a      	add	sl, r3
 8002e80:	441e      	add	r6, r3
 8002e82:	4613      	mov	r3, r2
 8002e84:	e7c1      	b.n	8002e0a <_dtoa_r+0x782>
 8002e86:	4603      	mov	r3, r0
 8002e88:	e7f6      	b.n	8002e78 <_dtoa_r+0x7f0>
 8002e8a:	f1b9 0f00 	cmp.w	r9, #0
 8002e8e:	dc34      	bgt.n	8002efa <_dtoa_r+0x872>
 8002e90:	9b08      	ldr	r3, [sp, #32]
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	dd31      	ble.n	8002efa <_dtoa_r+0x872>
 8002e96:	f8cd 9018 	str.w	r9, [sp, #24]
 8002e9a:	9b06      	ldr	r3, [sp, #24]
 8002e9c:	b963      	cbnz	r3, 8002eb8 <_dtoa_r+0x830>
 8002e9e:	4629      	mov	r1, r5
 8002ea0:	2205      	movs	r2, #5
 8002ea2:	4620      	mov	r0, r4
 8002ea4:	f000 f9a8 	bl	80031f8 <__multadd>
 8002ea8:	4601      	mov	r1, r0
 8002eaa:	4605      	mov	r5, r0
 8002eac:	9801      	ldr	r0, [sp, #4]
 8002eae:	f000 fb6d 	bl	800358c <__mcmp>
 8002eb2:	2800      	cmp	r0, #0
 8002eb4:	f73f adfc 	bgt.w	8002ab0 <_dtoa_r+0x428>
 8002eb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002eba:	9e04      	ldr	r6, [sp, #16]
 8002ebc:	ea6f 0b03 	mvn.w	fp, r3
 8002ec0:	f04f 0900 	mov.w	r9, #0
 8002ec4:	4629      	mov	r1, r5
 8002ec6:	4620      	mov	r0, r4
 8002ec8:	f000 f97f 	bl	80031ca <_Bfree>
 8002ecc:	2f00      	cmp	r7, #0
 8002ece:	f43f aebb 	beq.w	8002c48 <_dtoa_r+0x5c0>
 8002ed2:	f1b9 0f00 	cmp.w	r9, #0
 8002ed6:	d005      	beq.n	8002ee4 <_dtoa_r+0x85c>
 8002ed8:	45b9      	cmp	r9, r7
 8002eda:	d003      	beq.n	8002ee4 <_dtoa_r+0x85c>
 8002edc:	4649      	mov	r1, r9
 8002ede:	4620      	mov	r0, r4
 8002ee0:	f000 f973 	bl	80031ca <_Bfree>
 8002ee4:	4639      	mov	r1, r7
 8002ee6:	4620      	mov	r0, r4
 8002ee8:	f000 f96f 	bl	80031ca <_Bfree>
 8002eec:	e6ac      	b.n	8002c48 <_dtoa_r+0x5c0>
 8002eee:	2500      	movs	r5, #0
 8002ef0:	462f      	mov	r7, r5
 8002ef2:	e7e1      	b.n	8002eb8 <_dtoa_r+0x830>
 8002ef4:	469b      	mov	fp, r3
 8002ef6:	462f      	mov	r7, r5
 8002ef8:	e5da      	b.n	8002ab0 <_dtoa_r+0x428>
 8002efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002efc:	f8cd 9018 	str.w	r9, [sp, #24]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 80f3 	beq.w	80030ec <_dtoa_r+0xa64>
 8002f06:	2e00      	cmp	r6, #0
 8002f08:	dd05      	ble.n	8002f16 <_dtoa_r+0x88e>
 8002f0a:	4639      	mov	r1, r7
 8002f0c:	4632      	mov	r2, r6
 8002f0e:	4620      	mov	r0, r4
 8002f10:	f000 fae8 	bl	80034e4 <__lshift>
 8002f14:	4607      	mov	r7, r0
 8002f16:	f1b8 0f00 	cmp.w	r8, #0
 8002f1a:	d04c      	beq.n	8002fb6 <_dtoa_r+0x92e>
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	4620      	mov	r0, r4
 8002f20:	f000 f91f 	bl	8003162 <_Balloc>
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	3202      	adds	r2, #2
 8002f28:	4606      	mov	r6, r0
 8002f2a:	0092      	lsls	r2, r2, #2
 8002f2c:	f107 010c 	add.w	r1, r7, #12
 8002f30:	300c      	adds	r0, #12
 8002f32:	f000 f90b 	bl	800314c <memcpy>
 8002f36:	2201      	movs	r2, #1
 8002f38:	4631      	mov	r1, r6
 8002f3a:	4620      	mov	r0, r4
 8002f3c:	f000 fad2 	bl	80034e4 <__lshift>
 8002f40:	9b02      	ldr	r3, [sp, #8]
 8002f42:	f8dd a010 	ldr.w	sl, [sp, #16]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	46b9      	mov	r9, r7
 8002f4c:	9307      	str	r3, [sp, #28]
 8002f4e:	4607      	mov	r7, r0
 8002f50:	4629      	mov	r1, r5
 8002f52:	9801      	ldr	r0, [sp, #4]
 8002f54:	f7ff fb0c 	bl	8002570 <quorem>
 8002f58:	4649      	mov	r1, r9
 8002f5a:	4606      	mov	r6, r0
 8002f5c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8002f60:	9801      	ldr	r0, [sp, #4]
 8002f62:	f000 fb13 	bl	800358c <__mcmp>
 8002f66:	463a      	mov	r2, r7
 8002f68:	9002      	str	r0, [sp, #8]
 8002f6a:	4629      	mov	r1, r5
 8002f6c:	4620      	mov	r0, r4
 8002f6e:	f000 fb27 	bl	80035c0 <__mdiff>
 8002f72:	68c3      	ldr	r3, [r0, #12]
 8002f74:	4602      	mov	r2, r0
 8002f76:	bb03      	cbnz	r3, 8002fba <_dtoa_r+0x932>
 8002f78:	4601      	mov	r1, r0
 8002f7a:	9009      	str	r0, [sp, #36]	; 0x24
 8002f7c:	9801      	ldr	r0, [sp, #4]
 8002f7e:	f000 fb05 	bl	800358c <__mcmp>
 8002f82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f84:	4603      	mov	r3, r0
 8002f86:	4611      	mov	r1, r2
 8002f88:	4620      	mov	r0, r4
 8002f8a:	9309      	str	r3, [sp, #36]	; 0x24
 8002f8c:	f000 f91d 	bl	80031ca <_Bfree>
 8002f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f92:	b9a3      	cbnz	r3, 8002fbe <_dtoa_r+0x936>
 8002f94:	9a08      	ldr	r2, [sp, #32]
 8002f96:	b992      	cbnz	r2, 8002fbe <_dtoa_r+0x936>
 8002f98:	9a07      	ldr	r2, [sp, #28]
 8002f9a:	b982      	cbnz	r2, 8002fbe <_dtoa_r+0x936>
 8002f9c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8002fa0:	d029      	beq.n	8002ff6 <_dtoa_r+0x96e>
 8002fa2:	9b02      	ldr	r3, [sp, #8]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	dd01      	ble.n	8002fac <_dtoa_r+0x924>
 8002fa8:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8002fac:	f10a 0601 	add.w	r6, sl, #1
 8002fb0:	f88a 8000 	strb.w	r8, [sl]
 8002fb4:	e786      	b.n	8002ec4 <_dtoa_r+0x83c>
 8002fb6:	4638      	mov	r0, r7
 8002fb8:	e7c2      	b.n	8002f40 <_dtoa_r+0x8b8>
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e7e3      	b.n	8002f86 <_dtoa_r+0x8fe>
 8002fbe:	9a02      	ldr	r2, [sp, #8]
 8002fc0:	2a00      	cmp	r2, #0
 8002fc2:	db04      	blt.n	8002fce <_dtoa_r+0x946>
 8002fc4:	d124      	bne.n	8003010 <_dtoa_r+0x988>
 8002fc6:	9a08      	ldr	r2, [sp, #32]
 8002fc8:	bb12      	cbnz	r2, 8003010 <_dtoa_r+0x988>
 8002fca:	9a07      	ldr	r2, [sp, #28]
 8002fcc:	bb02      	cbnz	r2, 8003010 <_dtoa_r+0x988>
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	ddec      	ble.n	8002fac <_dtoa_r+0x924>
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	9901      	ldr	r1, [sp, #4]
 8002fd6:	4620      	mov	r0, r4
 8002fd8:	f000 fa84 	bl	80034e4 <__lshift>
 8002fdc:	4629      	mov	r1, r5
 8002fde:	9001      	str	r0, [sp, #4]
 8002fe0:	f000 fad4 	bl	800358c <__mcmp>
 8002fe4:	2800      	cmp	r0, #0
 8002fe6:	dc03      	bgt.n	8002ff0 <_dtoa_r+0x968>
 8002fe8:	d1e0      	bne.n	8002fac <_dtoa_r+0x924>
 8002fea:	f018 0f01 	tst.w	r8, #1
 8002fee:	d0dd      	beq.n	8002fac <_dtoa_r+0x924>
 8002ff0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8002ff4:	d1d8      	bne.n	8002fa8 <_dtoa_r+0x920>
 8002ff6:	2339      	movs	r3, #57	; 0x39
 8002ff8:	f10a 0601 	add.w	r6, sl, #1
 8002ffc:	f88a 3000 	strb.w	r3, [sl]
 8003000:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8003004:	2b39      	cmp	r3, #57	; 0x39
 8003006:	f106 32ff 	add.w	r2, r6, #4294967295
 800300a:	d04c      	beq.n	80030a6 <_dtoa_r+0xa1e>
 800300c:	3301      	adds	r3, #1
 800300e:	e051      	b.n	80030b4 <_dtoa_r+0xa2c>
 8003010:	2b00      	cmp	r3, #0
 8003012:	f10a 0601 	add.w	r6, sl, #1
 8003016:	dd05      	ble.n	8003024 <_dtoa_r+0x99c>
 8003018:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800301c:	d0eb      	beq.n	8002ff6 <_dtoa_r+0x96e>
 800301e:	f108 0801 	add.w	r8, r8, #1
 8003022:	e7c5      	b.n	8002fb0 <_dtoa_r+0x928>
 8003024:	9b04      	ldr	r3, [sp, #16]
 8003026:	9a06      	ldr	r2, [sp, #24]
 8003028:	f806 8c01 	strb.w	r8, [r6, #-1]
 800302c:	1af3      	subs	r3, r6, r3
 800302e:	4293      	cmp	r3, r2
 8003030:	d021      	beq.n	8003076 <_dtoa_r+0x9ee>
 8003032:	2300      	movs	r3, #0
 8003034:	220a      	movs	r2, #10
 8003036:	9901      	ldr	r1, [sp, #4]
 8003038:	4620      	mov	r0, r4
 800303a:	f000 f8dd 	bl	80031f8 <__multadd>
 800303e:	45b9      	cmp	r9, r7
 8003040:	9001      	str	r0, [sp, #4]
 8003042:	f04f 0300 	mov.w	r3, #0
 8003046:	f04f 020a 	mov.w	r2, #10
 800304a:	4649      	mov	r1, r9
 800304c:	4620      	mov	r0, r4
 800304e:	d105      	bne.n	800305c <_dtoa_r+0x9d4>
 8003050:	f000 f8d2 	bl	80031f8 <__multadd>
 8003054:	4681      	mov	r9, r0
 8003056:	4607      	mov	r7, r0
 8003058:	46b2      	mov	sl, r6
 800305a:	e779      	b.n	8002f50 <_dtoa_r+0x8c8>
 800305c:	f000 f8cc 	bl	80031f8 <__multadd>
 8003060:	4639      	mov	r1, r7
 8003062:	4681      	mov	r9, r0
 8003064:	2300      	movs	r3, #0
 8003066:	220a      	movs	r2, #10
 8003068:	4620      	mov	r0, r4
 800306a:	f000 f8c5 	bl	80031f8 <__multadd>
 800306e:	4607      	mov	r7, r0
 8003070:	e7f2      	b.n	8003058 <_dtoa_r+0x9d0>
 8003072:	f04f 0900 	mov.w	r9, #0
 8003076:	2201      	movs	r2, #1
 8003078:	9901      	ldr	r1, [sp, #4]
 800307a:	4620      	mov	r0, r4
 800307c:	f000 fa32 	bl	80034e4 <__lshift>
 8003080:	4629      	mov	r1, r5
 8003082:	9001      	str	r0, [sp, #4]
 8003084:	f000 fa82 	bl	800358c <__mcmp>
 8003088:	2800      	cmp	r0, #0
 800308a:	dcb9      	bgt.n	8003000 <_dtoa_r+0x978>
 800308c:	d102      	bne.n	8003094 <_dtoa_r+0xa0c>
 800308e:	f018 0f01 	tst.w	r8, #1
 8003092:	d1b5      	bne.n	8003000 <_dtoa_r+0x978>
 8003094:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8003098:	2b30      	cmp	r3, #48	; 0x30
 800309a:	f106 32ff 	add.w	r2, r6, #4294967295
 800309e:	f47f af11 	bne.w	8002ec4 <_dtoa_r+0x83c>
 80030a2:	4616      	mov	r6, r2
 80030a4:	e7f6      	b.n	8003094 <_dtoa_r+0xa0c>
 80030a6:	9b04      	ldr	r3, [sp, #16]
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d105      	bne.n	80030b8 <_dtoa_r+0xa30>
 80030ac:	9a04      	ldr	r2, [sp, #16]
 80030ae:	f10b 0b01 	add.w	fp, fp, #1
 80030b2:	2331      	movs	r3, #49	; 0x31
 80030b4:	7013      	strb	r3, [r2, #0]
 80030b6:	e705      	b.n	8002ec4 <_dtoa_r+0x83c>
 80030b8:	4616      	mov	r6, r2
 80030ba:	e7a1      	b.n	8003000 <_dtoa_r+0x978>
 80030bc:	4b16      	ldr	r3, [pc, #88]	; (8003118 <_dtoa_r+0xa90>)
 80030be:	f7ff bb48 	b.w	8002752 <_dtoa_r+0xca>
 80030c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f47f ab23 	bne.w	8002710 <_dtoa_r+0x88>
 80030ca:	4b14      	ldr	r3, [pc, #80]	; (800311c <_dtoa_r+0xa94>)
 80030cc:	f7ff bb41 	b.w	8002752 <_dtoa_r+0xca>
 80030d0:	9b08      	ldr	r3, [sp, #32]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	f77f ae3b 	ble.w	8002d4e <_dtoa_r+0x6c6>
 80030d8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80030dc:	e64f      	b.n	8002d7e <_dtoa_r+0x6f6>
 80030de:	9b06      	ldr	r3, [sp, #24]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	dc03      	bgt.n	80030ec <_dtoa_r+0xa64>
 80030e4:	9b08      	ldr	r3, [sp, #32]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	f73f aed7 	bgt.w	8002e9a <_dtoa_r+0x812>
 80030ec:	9e04      	ldr	r6, [sp, #16]
 80030ee:	9801      	ldr	r0, [sp, #4]
 80030f0:	4629      	mov	r1, r5
 80030f2:	f7ff fa3d 	bl	8002570 <quorem>
 80030f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80030fa:	f806 8b01 	strb.w	r8, [r6], #1
 80030fe:	9b04      	ldr	r3, [sp, #16]
 8003100:	9a06      	ldr	r2, [sp, #24]
 8003102:	1af3      	subs	r3, r6, r3
 8003104:	429a      	cmp	r2, r3
 8003106:	ddb4      	ble.n	8003072 <_dtoa_r+0x9ea>
 8003108:	2300      	movs	r3, #0
 800310a:	220a      	movs	r2, #10
 800310c:	9901      	ldr	r1, [sp, #4]
 800310e:	4620      	mov	r0, r4
 8003110:	f000 f872 	bl	80031f8 <__multadd>
 8003114:	9001      	str	r0, [sp, #4]
 8003116:	e7ea      	b.n	80030ee <_dtoa_r+0xa66>
 8003118:	08004010 	.word	0x08004010
 800311c:	08004034 	.word	0x08004034

08003120 <_localeconv_r>:
 8003120:	4b04      	ldr	r3, [pc, #16]	; (8003134 <_localeconv_r+0x14>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6a18      	ldr	r0, [r3, #32]
 8003126:	4b04      	ldr	r3, [pc, #16]	; (8003138 <_localeconv_r+0x18>)
 8003128:	2800      	cmp	r0, #0
 800312a:	bf08      	it	eq
 800312c:	4618      	moveq	r0, r3
 800312e:	30f0      	adds	r0, #240	; 0xf0
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	2000002c 	.word	0x2000002c
 8003138:	20000090 	.word	0x20000090

0800313c <malloc>:
 800313c:	4b02      	ldr	r3, [pc, #8]	; (8003148 <malloc+0xc>)
 800313e:	4601      	mov	r1, r0
 8003140:	6818      	ldr	r0, [r3, #0]
 8003142:	f000 bb45 	b.w	80037d0 <_malloc_r>
 8003146:	bf00      	nop
 8003148:	2000002c 	.word	0x2000002c

0800314c <memcpy>:
 800314c:	b510      	push	{r4, lr}
 800314e:	1e43      	subs	r3, r0, #1
 8003150:	440a      	add	r2, r1
 8003152:	4291      	cmp	r1, r2
 8003154:	d100      	bne.n	8003158 <memcpy+0xc>
 8003156:	bd10      	pop	{r4, pc}
 8003158:	f811 4b01 	ldrb.w	r4, [r1], #1
 800315c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003160:	e7f7      	b.n	8003152 <memcpy+0x6>

08003162 <_Balloc>:
 8003162:	b570      	push	{r4, r5, r6, lr}
 8003164:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003166:	4604      	mov	r4, r0
 8003168:	460e      	mov	r6, r1
 800316a:	b93d      	cbnz	r5, 800317c <_Balloc+0x1a>
 800316c:	2010      	movs	r0, #16
 800316e:	f7ff ffe5 	bl	800313c <malloc>
 8003172:	6260      	str	r0, [r4, #36]	; 0x24
 8003174:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003178:	6005      	str	r5, [r0, #0]
 800317a:	60c5      	str	r5, [r0, #12]
 800317c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800317e:	68eb      	ldr	r3, [r5, #12]
 8003180:	b183      	cbz	r3, 80031a4 <_Balloc+0x42>
 8003182:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800318a:	b9b8      	cbnz	r0, 80031bc <_Balloc+0x5a>
 800318c:	2101      	movs	r1, #1
 800318e:	fa01 f506 	lsl.w	r5, r1, r6
 8003192:	1d6a      	adds	r2, r5, #5
 8003194:	0092      	lsls	r2, r2, #2
 8003196:	4620      	mov	r0, r4
 8003198:	f000 fabe 	bl	8003718 <_calloc_r>
 800319c:	b160      	cbz	r0, 80031b8 <_Balloc+0x56>
 800319e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80031a2:	e00e      	b.n	80031c2 <_Balloc+0x60>
 80031a4:	2221      	movs	r2, #33	; 0x21
 80031a6:	2104      	movs	r1, #4
 80031a8:	4620      	mov	r0, r4
 80031aa:	f000 fab5 	bl	8003718 <_calloc_r>
 80031ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80031b0:	60e8      	str	r0, [r5, #12]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1e4      	bne.n	8003182 <_Balloc+0x20>
 80031b8:	2000      	movs	r0, #0
 80031ba:	bd70      	pop	{r4, r5, r6, pc}
 80031bc:	6802      	ldr	r2, [r0, #0]
 80031be:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80031c2:	2300      	movs	r3, #0
 80031c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80031c8:	e7f7      	b.n	80031ba <_Balloc+0x58>

080031ca <_Bfree>:
 80031ca:	b570      	push	{r4, r5, r6, lr}
 80031cc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80031ce:	4606      	mov	r6, r0
 80031d0:	460d      	mov	r5, r1
 80031d2:	b93c      	cbnz	r4, 80031e4 <_Bfree+0x1a>
 80031d4:	2010      	movs	r0, #16
 80031d6:	f7ff ffb1 	bl	800313c <malloc>
 80031da:	6270      	str	r0, [r6, #36]	; 0x24
 80031dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80031e0:	6004      	str	r4, [r0, #0]
 80031e2:	60c4      	str	r4, [r0, #12]
 80031e4:	b13d      	cbz	r5, 80031f6 <_Bfree+0x2c>
 80031e6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80031e8:	686a      	ldr	r2, [r5, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80031f0:	6029      	str	r1, [r5, #0]
 80031f2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80031f6:	bd70      	pop	{r4, r5, r6, pc}

080031f8 <__multadd>:
 80031f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031fc:	690d      	ldr	r5, [r1, #16]
 80031fe:	461f      	mov	r7, r3
 8003200:	4606      	mov	r6, r0
 8003202:	460c      	mov	r4, r1
 8003204:	f101 0c14 	add.w	ip, r1, #20
 8003208:	2300      	movs	r3, #0
 800320a:	f8dc 0000 	ldr.w	r0, [ip]
 800320e:	b281      	uxth	r1, r0
 8003210:	fb02 7101 	mla	r1, r2, r1, r7
 8003214:	0c0f      	lsrs	r7, r1, #16
 8003216:	0c00      	lsrs	r0, r0, #16
 8003218:	fb02 7000 	mla	r0, r2, r0, r7
 800321c:	b289      	uxth	r1, r1
 800321e:	3301      	adds	r3, #1
 8003220:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8003224:	429d      	cmp	r5, r3
 8003226:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800322a:	f84c 1b04 	str.w	r1, [ip], #4
 800322e:	dcec      	bgt.n	800320a <__multadd+0x12>
 8003230:	b1d7      	cbz	r7, 8003268 <__multadd+0x70>
 8003232:	68a3      	ldr	r3, [r4, #8]
 8003234:	42ab      	cmp	r3, r5
 8003236:	dc12      	bgt.n	800325e <__multadd+0x66>
 8003238:	6861      	ldr	r1, [r4, #4]
 800323a:	4630      	mov	r0, r6
 800323c:	3101      	adds	r1, #1
 800323e:	f7ff ff90 	bl	8003162 <_Balloc>
 8003242:	6922      	ldr	r2, [r4, #16]
 8003244:	3202      	adds	r2, #2
 8003246:	f104 010c 	add.w	r1, r4, #12
 800324a:	4680      	mov	r8, r0
 800324c:	0092      	lsls	r2, r2, #2
 800324e:	300c      	adds	r0, #12
 8003250:	f7ff ff7c 	bl	800314c <memcpy>
 8003254:	4621      	mov	r1, r4
 8003256:	4630      	mov	r0, r6
 8003258:	f7ff ffb7 	bl	80031ca <_Bfree>
 800325c:	4644      	mov	r4, r8
 800325e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003262:	3501      	adds	r5, #1
 8003264:	615f      	str	r7, [r3, #20]
 8003266:	6125      	str	r5, [r4, #16]
 8003268:	4620      	mov	r0, r4
 800326a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800326e <__hi0bits>:
 800326e:	0c02      	lsrs	r2, r0, #16
 8003270:	0412      	lsls	r2, r2, #16
 8003272:	4603      	mov	r3, r0
 8003274:	b9b2      	cbnz	r2, 80032a4 <__hi0bits+0x36>
 8003276:	0403      	lsls	r3, r0, #16
 8003278:	2010      	movs	r0, #16
 800327a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800327e:	bf04      	itt	eq
 8003280:	021b      	lsleq	r3, r3, #8
 8003282:	3008      	addeq	r0, #8
 8003284:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003288:	bf04      	itt	eq
 800328a:	011b      	lsleq	r3, r3, #4
 800328c:	3004      	addeq	r0, #4
 800328e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8003292:	bf04      	itt	eq
 8003294:	009b      	lsleq	r3, r3, #2
 8003296:	3002      	addeq	r0, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	db06      	blt.n	80032aa <__hi0bits+0x3c>
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	d503      	bpl.n	80032a8 <__hi0bits+0x3a>
 80032a0:	3001      	adds	r0, #1
 80032a2:	4770      	bx	lr
 80032a4:	2000      	movs	r0, #0
 80032a6:	e7e8      	b.n	800327a <__hi0bits+0xc>
 80032a8:	2020      	movs	r0, #32
 80032aa:	4770      	bx	lr

080032ac <__lo0bits>:
 80032ac:	6803      	ldr	r3, [r0, #0]
 80032ae:	f013 0207 	ands.w	r2, r3, #7
 80032b2:	4601      	mov	r1, r0
 80032b4:	d00b      	beq.n	80032ce <__lo0bits+0x22>
 80032b6:	07da      	lsls	r2, r3, #31
 80032b8:	d423      	bmi.n	8003302 <__lo0bits+0x56>
 80032ba:	0798      	lsls	r0, r3, #30
 80032bc:	bf49      	itett	mi
 80032be:	085b      	lsrmi	r3, r3, #1
 80032c0:	089b      	lsrpl	r3, r3, #2
 80032c2:	2001      	movmi	r0, #1
 80032c4:	600b      	strmi	r3, [r1, #0]
 80032c6:	bf5c      	itt	pl
 80032c8:	600b      	strpl	r3, [r1, #0]
 80032ca:	2002      	movpl	r0, #2
 80032cc:	4770      	bx	lr
 80032ce:	b298      	uxth	r0, r3
 80032d0:	b9a8      	cbnz	r0, 80032fe <__lo0bits+0x52>
 80032d2:	0c1b      	lsrs	r3, r3, #16
 80032d4:	2010      	movs	r0, #16
 80032d6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80032da:	bf04      	itt	eq
 80032dc:	0a1b      	lsreq	r3, r3, #8
 80032de:	3008      	addeq	r0, #8
 80032e0:	071a      	lsls	r2, r3, #28
 80032e2:	bf04      	itt	eq
 80032e4:	091b      	lsreq	r3, r3, #4
 80032e6:	3004      	addeq	r0, #4
 80032e8:	079a      	lsls	r2, r3, #30
 80032ea:	bf04      	itt	eq
 80032ec:	089b      	lsreq	r3, r3, #2
 80032ee:	3002      	addeq	r0, #2
 80032f0:	07da      	lsls	r2, r3, #31
 80032f2:	d402      	bmi.n	80032fa <__lo0bits+0x4e>
 80032f4:	085b      	lsrs	r3, r3, #1
 80032f6:	d006      	beq.n	8003306 <__lo0bits+0x5a>
 80032f8:	3001      	adds	r0, #1
 80032fa:	600b      	str	r3, [r1, #0]
 80032fc:	4770      	bx	lr
 80032fe:	4610      	mov	r0, r2
 8003300:	e7e9      	b.n	80032d6 <__lo0bits+0x2a>
 8003302:	2000      	movs	r0, #0
 8003304:	4770      	bx	lr
 8003306:	2020      	movs	r0, #32
 8003308:	4770      	bx	lr

0800330a <__i2b>:
 800330a:	b510      	push	{r4, lr}
 800330c:	460c      	mov	r4, r1
 800330e:	2101      	movs	r1, #1
 8003310:	f7ff ff27 	bl	8003162 <_Balloc>
 8003314:	2201      	movs	r2, #1
 8003316:	6144      	str	r4, [r0, #20]
 8003318:	6102      	str	r2, [r0, #16]
 800331a:	bd10      	pop	{r4, pc}

0800331c <__multiply>:
 800331c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003320:	4614      	mov	r4, r2
 8003322:	690a      	ldr	r2, [r1, #16]
 8003324:	6923      	ldr	r3, [r4, #16]
 8003326:	429a      	cmp	r2, r3
 8003328:	bfb8      	it	lt
 800332a:	460b      	movlt	r3, r1
 800332c:	4688      	mov	r8, r1
 800332e:	bfbc      	itt	lt
 8003330:	46a0      	movlt	r8, r4
 8003332:	461c      	movlt	r4, r3
 8003334:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8003338:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800333c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8003340:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003344:	eb07 0609 	add.w	r6, r7, r9
 8003348:	42b3      	cmp	r3, r6
 800334a:	bfb8      	it	lt
 800334c:	3101      	addlt	r1, #1
 800334e:	f7ff ff08 	bl	8003162 <_Balloc>
 8003352:	f100 0514 	add.w	r5, r0, #20
 8003356:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800335a:	462b      	mov	r3, r5
 800335c:	2200      	movs	r2, #0
 800335e:	4573      	cmp	r3, lr
 8003360:	d316      	bcc.n	8003390 <__multiply+0x74>
 8003362:	f104 0214 	add.w	r2, r4, #20
 8003366:	f108 0114 	add.w	r1, r8, #20
 800336a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800336e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	9b00      	ldr	r3, [sp, #0]
 8003376:	9201      	str	r2, [sp, #4]
 8003378:	4293      	cmp	r3, r2
 800337a:	d80c      	bhi.n	8003396 <__multiply+0x7a>
 800337c:	2e00      	cmp	r6, #0
 800337e:	dd03      	ble.n	8003388 <__multiply+0x6c>
 8003380:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8003384:	2b00      	cmp	r3, #0
 8003386:	d05d      	beq.n	8003444 <__multiply+0x128>
 8003388:	6106      	str	r6, [r0, #16]
 800338a:	b003      	add	sp, #12
 800338c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003390:	f843 2b04 	str.w	r2, [r3], #4
 8003394:	e7e3      	b.n	800335e <__multiply+0x42>
 8003396:	f8b2 b000 	ldrh.w	fp, [r2]
 800339a:	f1bb 0f00 	cmp.w	fp, #0
 800339e:	d023      	beq.n	80033e8 <__multiply+0xcc>
 80033a0:	4689      	mov	r9, r1
 80033a2:	46ac      	mov	ip, r5
 80033a4:	f04f 0800 	mov.w	r8, #0
 80033a8:	f859 4b04 	ldr.w	r4, [r9], #4
 80033ac:	f8dc a000 	ldr.w	sl, [ip]
 80033b0:	b2a3      	uxth	r3, r4
 80033b2:	fa1f fa8a 	uxth.w	sl, sl
 80033b6:	fb0b a303 	mla	r3, fp, r3, sl
 80033ba:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80033be:	f8dc 4000 	ldr.w	r4, [ip]
 80033c2:	4443      	add	r3, r8
 80033c4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80033c8:	fb0b 840a 	mla	r4, fp, sl, r8
 80033cc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80033d0:	46e2      	mov	sl, ip
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80033d8:	454f      	cmp	r7, r9
 80033da:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80033de:	f84a 3b04 	str.w	r3, [sl], #4
 80033e2:	d82b      	bhi.n	800343c <__multiply+0x120>
 80033e4:	f8cc 8004 	str.w	r8, [ip, #4]
 80033e8:	9b01      	ldr	r3, [sp, #4]
 80033ea:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80033ee:	3204      	adds	r2, #4
 80033f0:	f1ba 0f00 	cmp.w	sl, #0
 80033f4:	d020      	beq.n	8003438 <__multiply+0x11c>
 80033f6:	682b      	ldr	r3, [r5, #0]
 80033f8:	4689      	mov	r9, r1
 80033fa:	46a8      	mov	r8, r5
 80033fc:	f04f 0b00 	mov.w	fp, #0
 8003400:	f8b9 c000 	ldrh.w	ip, [r9]
 8003404:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8003408:	fb0a 440c 	mla	r4, sl, ip, r4
 800340c:	445c      	add	r4, fp
 800340e:	46c4      	mov	ip, r8
 8003410:	b29b      	uxth	r3, r3
 8003412:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003416:	f84c 3b04 	str.w	r3, [ip], #4
 800341a:	f859 3b04 	ldr.w	r3, [r9], #4
 800341e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8003422:	0c1b      	lsrs	r3, r3, #16
 8003424:	fb0a b303 	mla	r3, sl, r3, fp
 8003428:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800342c:	454f      	cmp	r7, r9
 800342e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8003432:	d805      	bhi.n	8003440 <__multiply+0x124>
 8003434:	f8c8 3004 	str.w	r3, [r8, #4]
 8003438:	3504      	adds	r5, #4
 800343a:	e79b      	b.n	8003374 <__multiply+0x58>
 800343c:	46d4      	mov	ip, sl
 800343e:	e7b3      	b.n	80033a8 <__multiply+0x8c>
 8003440:	46e0      	mov	r8, ip
 8003442:	e7dd      	b.n	8003400 <__multiply+0xe4>
 8003444:	3e01      	subs	r6, #1
 8003446:	e799      	b.n	800337c <__multiply+0x60>

08003448 <__pow5mult>:
 8003448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800344c:	4615      	mov	r5, r2
 800344e:	f012 0203 	ands.w	r2, r2, #3
 8003452:	4606      	mov	r6, r0
 8003454:	460f      	mov	r7, r1
 8003456:	d007      	beq.n	8003468 <__pow5mult+0x20>
 8003458:	3a01      	subs	r2, #1
 800345a:	4c21      	ldr	r4, [pc, #132]	; (80034e0 <__pow5mult+0x98>)
 800345c:	2300      	movs	r3, #0
 800345e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003462:	f7ff fec9 	bl	80031f8 <__multadd>
 8003466:	4607      	mov	r7, r0
 8003468:	10ad      	asrs	r5, r5, #2
 800346a:	d035      	beq.n	80034d8 <__pow5mult+0x90>
 800346c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800346e:	b93c      	cbnz	r4, 8003480 <__pow5mult+0x38>
 8003470:	2010      	movs	r0, #16
 8003472:	f7ff fe63 	bl	800313c <malloc>
 8003476:	6270      	str	r0, [r6, #36]	; 0x24
 8003478:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800347c:	6004      	str	r4, [r0, #0]
 800347e:	60c4      	str	r4, [r0, #12]
 8003480:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003484:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003488:	b94c      	cbnz	r4, 800349e <__pow5mult+0x56>
 800348a:	f240 2171 	movw	r1, #625	; 0x271
 800348e:	4630      	mov	r0, r6
 8003490:	f7ff ff3b 	bl	800330a <__i2b>
 8003494:	2300      	movs	r3, #0
 8003496:	f8c8 0008 	str.w	r0, [r8, #8]
 800349a:	4604      	mov	r4, r0
 800349c:	6003      	str	r3, [r0, #0]
 800349e:	f04f 0800 	mov.w	r8, #0
 80034a2:	07eb      	lsls	r3, r5, #31
 80034a4:	d50a      	bpl.n	80034bc <__pow5mult+0x74>
 80034a6:	4639      	mov	r1, r7
 80034a8:	4622      	mov	r2, r4
 80034aa:	4630      	mov	r0, r6
 80034ac:	f7ff ff36 	bl	800331c <__multiply>
 80034b0:	4639      	mov	r1, r7
 80034b2:	4681      	mov	r9, r0
 80034b4:	4630      	mov	r0, r6
 80034b6:	f7ff fe88 	bl	80031ca <_Bfree>
 80034ba:	464f      	mov	r7, r9
 80034bc:	106d      	asrs	r5, r5, #1
 80034be:	d00b      	beq.n	80034d8 <__pow5mult+0x90>
 80034c0:	6820      	ldr	r0, [r4, #0]
 80034c2:	b938      	cbnz	r0, 80034d4 <__pow5mult+0x8c>
 80034c4:	4622      	mov	r2, r4
 80034c6:	4621      	mov	r1, r4
 80034c8:	4630      	mov	r0, r6
 80034ca:	f7ff ff27 	bl	800331c <__multiply>
 80034ce:	6020      	str	r0, [r4, #0]
 80034d0:	f8c0 8000 	str.w	r8, [r0]
 80034d4:	4604      	mov	r4, r0
 80034d6:	e7e4      	b.n	80034a2 <__pow5mult+0x5a>
 80034d8:	4638      	mov	r0, r7
 80034da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034de:	bf00      	nop
 80034e0:	08004138 	.word	0x08004138

080034e4 <__lshift>:
 80034e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034e8:	460c      	mov	r4, r1
 80034ea:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80034ee:	6923      	ldr	r3, [r4, #16]
 80034f0:	6849      	ldr	r1, [r1, #4]
 80034f2:	eb0a 0903 	add.w	r9, sl, r3
 80034f6:	68a3      	ldr	r3, [r4, #8]
 80034f8:	4607      	mov	r7, r0
 80034fa:	4616      	mov	r6, r2
 80034fc:	f109 0501 	add.w	r5, r9, #1
 8003500:	42ab      	cmp	r3, r5
 8003502:	db32      	blt.n	800356a <__lshift+0x86>
 8003504:	4638      	mov	r0, r7
 8003506:	f7ff fe2c 	bl	8003162 <_Balloc>
 800350a:	2300      	movs	r3, #0
 800350c:	4680      	mov	r8, r0
 800350e:	f100 0114 	add.w	r1, r0, #20
 8003512:	461a      	mov	r2, r3
 8003514:	4553      	cmp	r3, sl
 8003516:	db2b      	blt.n	8003570 <__lshift+0x8c>
 8003518:	6920      	ldr	r0, [r4, #16]
 800351a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800351e:	f104 0314 	add.w	r3, r4, #20
 8003522:	f016 021f 	ands.w	r2, r6, #31
 8003526:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800352a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800352e:	d025      	beq.n	800357c <__lshift+0x98>
 8003530:	f1c2 0e20 	rsb	lr, r2, #32
 8003534:	2000      	movs	r0, #0
 8003536:	681e      	ldr	r6, [r3, #0]
 8003538:	468a      	mov	sl, r1
 800353a:	4096      	lsls	r6, r2
 800353c:	4330      	orrs	r0, r6
 800353e:	f84a 0b04 	str.w	r0, [sl], #4
 8003542:	f853 0b04 	ldr.w	r0, [r3], #4
 8003546:	459c      	cmp	ip, r3
 8003548:	fa20 f00e 	lsr.w	r0, r0, lr
 800354c:	d814      	bhi.n	8003578 <__lshift+0x94>
 800354e:	6048      	str	r0, [r1, #4]
 8003550:	b108      	cbz	r0, 8003556 <__lshift+0x72>
 8003552:	f109 0502 	add.w	r5, r9, #2
 8003556:	3d01      	subs	r5, #1
 8003558:	4638      	mov	r0, r7
 800355a:	f8c8 5010 	str.w	r5, [r8, #16]
 800355e:	4621      	mov	r1, r4
 8003560:	f7ff fe33 	bl	80031ca <_Bfree>
 8003564:	4640      	mov	r0, r8
 8003566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800356a:	3101      	adds	r1, #1
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	e7c7      	b.n	8003500 <__lshift+0x1c>
 8003570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003574:	3301      	adds	r3, #1
 8003576:	e7cd      	b.n	8003514 <__lshift+0x30>
 8003578:	4651      	mov	r1, sl
 800357a:	e7dc      	b.n	8003536 <__lshift+0x52>
 800357c:	3904      	subs	r1, #4
 800357e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003582:	f841 2f04 	str.w	r2, [r1, #4]!
 8003586:	459c      	cmp	ip, r3
 8003588:	d8f9      	bhi.n	800357e <__lshift+0x9a>
 800358a:	e7e4      	b.n	8003556 <__lshift+0x72>

0800358c <__mcmp>:
 800358c:	6903      	ldr	r3, [r0, #16]
 800358e:	690a      	ldr	r2, [r1, #16]
 8003590:	1a9b      	subs	r3, r3, r2
 8003592:	b530      	push	{r4, r5, lr}
 8003594:	d10c      	bne.n	80035b0 <__mcmp+0x24>
 8003596:	0092      	lsls	r2, r2, #2
 8003598:	3014      	adds	r0, #20
 800359a:	3114      	adds	r1, #20
 800359c:	1884      	adds	r4, r0, r2
 800359e:	4411      	add	r1, r2
 80035a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80035a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80035a8:	4295      	cmp	r5, r2
 80035aa:	d003      	beq.n	80035b4 <__mcmp+0x28>
 80035ac:	d305      	bcc.n	80035ba <__mcmp+0x2e>
 80035ae:	2301      	movs	r3, #1
 80035b0:	4618      	mov	r0, r3
 80035b2:	bd30      	pop	{r4, r5, pc}
 80035b4:	42a0      	cmp	r0, r4
 80035b6:	d3f3      	bcc.n	80035a0 <__mcmp+0x14>
 80035b8:	e7fa      	b.n	80035b0 <__mcmp+0x24>
 80035ba:	f04f 33ff 	mov.w	r3, #4294967295
 80035be:	e7f7      	b.n	80035b0 <__mcmp+0x24>

080035c0 <__mdiff>:
 80035c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035c4:	460d      	mov	r5, r1
 80035c6:	4607      	mov	r7, r0
 80035c8:	4611      	mov	r1, r2
 80035ca:	4628      	mov	r0, r5
 80035cc:	4614      	mov	r4, r2
 80035ce:	f7ff ffdd 	bl	800358c <__mcmp>
 80035d2:	1e06      	subs	r6, r0, #0
 80035d4:	d108      	bne.n	80035e8 <__mdiff+0x28>
 80035d6:	4631      	mov	r1, r6
 80035d8:	4638      	mov	r0, r7
 80035da:	f7ff fdc2 	bl	8003162 <_Balloc>
 80035de:	2301      	movs	r3, #1
 80035e0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80035e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035e8:	bfa4      	itt	ge
 80035ea:	4623      	movge	r3, r4
 80035ec:	462c      	movge	r4, r5
 80035ee:	4638      	mov	r0, r7
 80035f0:	6861      	ldr	r1, [r4, #4]
 80035f2:	bfa6      	itte	ge
 80035f4:	461d      	movge	r5, r3
 80035f6:	2600      	movge	r6, #0
 80035f8:	2601      	movlt	r6, #1
 80035fa:	f7ff fdb2 	bl	8003162 <_Balloc>
 80035fe:	692b      	ldr	r3, [r5, #16]
 8003600:	60c6      	str	r6, [r0, #12]
 8003602:	6926      	ldr	r6, [r4, #16]
 8003604:	f105 0914 	add.w	r9, r5, #20
 8003608:	f104 0214 	add.w	r2, r4, #20
 800360c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8003610:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8003614:	f100 0514 	add.w	r5, r0, #20
 8003618:	f04f 0e00 	mov.w	lr, #0
 800361c:	f852 ab04 	ldr.w	sl, [r2], #4
 8003620:	f859 4b04 	ldr.w	r4, [r9], #4
 8003624:	fa1e f18a 	uxtah	r1, lr, sl
 8003628:	b2a3      	uxth	r3, r4
 800362a:	1ac9      	subs	r1, r1, r3
 800362c:	0c23      	lsrs	r3, r4, #16
 800362e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8003632:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8003636:	b289      	uxth	r1, r1
 8003638:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800363c:	45c8      	cmp	r8, r9
 800363e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8003642:	4694      	mov	ip, r2
 8003644:	f845 3b04 	str.w	r3, [r5], #4
 8003648:	d8e8      	bhi.n	800361c <__mdiff+0x5c>
 800364a:	45bc      	cmp	ip, r7
 800364c:	d304      	bcc.n	8003658 <__mdiff+0x98>
 800364e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8003652:	b183      	cbz	r3, 8003676 <__mdiff+0xb6>
 8003654:	6106      	str	r6, [r0, #16]
 8003656:	e7c5      	b.n	80035e4 <__mdiff+0x24>
 8003658:	f85c 1b04 	ldr.w	r1, [ip], #4
 800365c:	fa1e f381 	uxtah	r3, lr, r1
 8003660:	141a      	asrs	r2, r3, #16
 8003662:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8003666:	b29b      	uxth	r3, r3
 8003668:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800366c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8003670:	f845 3b04 	str.w	r3, [r5], #4
 8003674:	e7e9      	b.n	800364a <__mdiff+0x8a>
 8003676:	3e01      	subs	r6, #1
 8003678:	e7e9      	b.n	800364e <__mdiff+0x8e>

0800367a <__d2b>:
 800367a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800367e:	460e      	mov	r6, r1
 8003680:	2101      	movs	r1, #1
 8003682:	ec59 8b10 	vmov	r8, r9, d0
 8003686:	4615      	mov	r5, r2
 8003688:	f7ff fd6b 	bl	8003162 <_Balloc>
 800368c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003690:	4607      	mov	r7, r0
 8003692:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003696:	bb34      	cbnz	r4, 80036e6 <__d2b+0x6c>
 8003698:	9301      	str	r3, [sp, #4]
 800369a:	f1b8 0300 	subs.w	r3, r8, #0
 800369e:	d027      	beq.n	80036f0 <__d2b+0x76>
 80036a0:	a802      	add	r0, sp, #8
 80036a2:	f840 3d08 	str.w	r3, [r0, #-8]!
 80036a6:	f7ff fe01 	bl	80032ac <__lo0bits>
 80036aa:	9900      	ldr	r1, [sp, #0]
 80036ac:	b1f0      	cbz	r0, 80036ec <__d2b+0x72>
 80036ae:	9a01      	ldr	r2, [sp, #4]
 80036b0:	f1c0 0320 	rsb	r3, r0, #32
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	430b      	orrs	r3, r1
 80036ba:	40c2      	lsrs	r2, r0
 80036bc:	617b      	str	r3, [r7, #20]
 80036be:	9201      	str	r2, [sp, #4]
 80036c0:	9b01      	ldr	r3, [sp, #4]
 80036c2:	61bb      	str	r3, [r7, #24]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	bf14      	ite	ne
 80036c8:	2102      	movne	r1, #2
 80036ca:	2101      	moveq	r1, #1
 80036cc:	6139      	str	r1, [r7, #16]
 80036ce:	b1c4      	cbz	r4, 8003702 <__d2b+0x88>
 80036d0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80036d4:	4404      	add	r4, r0
 80036d6:	6034      	str	r4, [r6, #0]
 80036d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80036dc:	6028      	str	r0, [r5, #0]
 80036de:	4638      	mov	r0, r7
 80036e0:	b003      	add	sp, #12
 80036e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80036e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036ea:	e7d5      	b.n	8003698 <__d2b+0x1e>
 80036ec:	6179      	str	r1, [r7, #20]
 80036ee:	e7e7      	b.n	80036c0 <__d2b+0x46>
 80036f0:	a801      	add	r0, sp, #4
 80036f2:	f7ff fddb 	bl	80032ac <__lo0bits>
 80036f6:	9b01      	ldr	r3, [sp, #4]
 80036f8:	617b      	str	r3, [r7, #20]
 80036fa:	2101      	movs	r1, #1
 80036fc:	6139      	str	r1, [r7, #16]
 80036fe:	3020      	adds	r0, #32
 8003700:	e7e5      	b.n	80036ce <__d2b+0x54>
 8003702:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8003706:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800370a:	6030      	str	r0, [r6, #0]
 800370c:	6918      	ldr	r0, [r3, #16]
 800370e:	f7ff fdae 	bl	800326e <__hi0bits>
 8003712:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8003716:	e7e1      	b.n	80036dc <__d2b+0x62>

08003718 <_calloc_r>:
 8003718:	b538      	push	{r3, r4, r5, lr}
 800371a:	fb02 f401 	mul.w	r4, r2, r1
 800371e:	4621      	mov	r1, r4
 8003720:	f000 f856 	bl	80037d0 <_malloc_r>
 8003724:	4605      	mov	r5, r0
 8003726:	b118      	cbz	r0, 8003730 <_calloc_r+0x18>
 8003728:	4622      	mov	r2, r4
 800372a:	2100      	movs	r1, #0
 800372c:	f7fe fabe 	bl	8001cac <memset>
 8003730:	4628      	mov	r0, r5
 8003732:	bd38      	pop	{r3, r4, r5, pc}

08003734 <_free_r>:
 8003734:	b538      	push	{r3, r4, r5, lr}
 8003736:	4605      	mov	r5, r0
 8003738:	2900      	cmp	r1, #0
 800373a:	d045      	beq.n	80037c8 <_free_r+0x94>
 800373c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003740:	1f0c      	subs	r4, r1, #4
 8003742:	2b00      	cmp	r3, #0
 8003744:	bfb8      	it	lt
 8003746:	18e4      	addlt	r4, r4, r3
 8003748:	f000 fa29 	bl	8003b9e <__malloc_lock>
 800374c:	4a1f      	ldr	r2, [pc, #124]	; (80037cc <_free_r+0x98>)
 800374e:	6813      	ldr	r3, [r2, #0]
 8003750:	4610      	mov	r0, r2
 8003752:	b933      	cbnz	r3, 8003762 <_free_r+0x2e>
 8003754:	6063      	str	r3, [r4, #4]
 8003756:	6014      	str	r4, [r2, #0]
 8003758:	4628      	mov	r0, r5
 800375a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800375e:	f000 ba1f 	b.w	8003ba0 <__malloc_unlock>
 8003762:	42a3      	cmp	r3, r4
 8003764:	d90c      	bls.n	8003780 <_free_r+0x4c>
 8003766:	6821      	ldr	r1, [r4, #0]
 8003768:	1862      	adds	r2, r4, r1
 800376a:	4293      	cmp	r3, r2
 800376c:	bf04      	itt	eq
 800376e:	681a      	ldreq	r2, [r3, #0]
 8003770:	685b      	ldreq	r3, [r3, #4]
 8003772:	6063      	str	r3, [r4, #4]
 8003774:	bf04      	itt	eq
 8003776:	1852      	addeq	r2, r2, r1
 8003778:	6022      	streq	r2, [r4, #0]
 800377a:	6004      	str	r4, [r0, #0]
 800377c:	e7ec      	b.n	8003758 <_free_r+0x24>
 800377e:	4613      	mov	r3, r2
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	b10a      	cbz	r2, 8003788 <_free_r+0x54>
 8003784:	42a2      	cmp	r2, r4
 8003786:	d9fa      	bls.n	800377e <_free_r+0x4a>
 8003788:	6819      	ldr	r1, [r3, #0]
 800378a:	1858      	adds	r0, r3, r1
 800378c:	42a0      	cmp	r0, r4
 800378e:	d10b      	bne.n	80037a8 <_free_r+0x74>
 8003790:	6820      	ldr	r0, [r4, #0]
 8003792:	4401      	add	r1, r0
 8003794:	1858      	adds	r0, r3, r1
 8003796:	4282      	cmp	r2, r0
 8003798:	6019      	str	r1, [r3, #0]
 800379a:	d1dd      	bne.n	8003758 <_free_r+0x24>
 800379c:	6810      	ldr	r0, [r2, #0]
 800379e:	6852      	ldr	r2, [r2, #4]
 80037a0:	605a      	str	r2, [r3, #4]
 80037a2:	4401      	add	r1, r0
 80037a4:	6019      	str	r1, [r3, #0]
 80037a6:	e7d7      	b.n	8003758 <_free_r+0x24>
 80037a8:	d902      	bls.n	80037b0 <_free_r+0x7c>
 80037aa:	230c      	movs	r3, #12
 80037ac:	602b      	str	r3, [r5, #0]
 80037ae:	e7d3      	b.n	8003758 <_free_r+0x24>
 80037b0:	6820      	ldr	r0, [r4, #0]
 80037b2:	1821      	adds	r1, r4, r0
 80037b4:	428a      	cmp	r2, r1
 80037b6:	bf04      	itt	eq
 80037b8:	6811      	ldreq	r1, [r2, #0]
 80037ba:	6852      	ldreq	r2, [r2, #4]
 80037bc:	6062      	str	r2, [r4, #4]
 80037be:	bf04      	itt	eq
 80037c0:	1809      	addeq	r1, r1, r0
 80037c2:	6021      	streq	r1, [r4, #0]
 80037c4:	605c      	str	r4, [r3, #4]
 80037c6:	e7c7      	b.n	8003758 <_free_r+0x24>
 80037c8:	bd38      	pop	{r3, r4, r5, pc}
 80037ca:	bf00      	nop
 80037cc:	2000021c 	.word	0x2000021c

080037d0 <_malloc_r>:
 80037d0:	b570      	push	{r4, r5, r6, lr}
 80037d2:	1ccd      	adds	r5, r1, #3
 80037d4:	f025 0503 	bic.w	r5, r5, #3
 80037d8:	3508      	adds	r5, #8
 80037da:	2d0c      	cmp	r5, #12
 80037dc:	bf38      	it	cc
 80037de:	250c      	movcc	r5, #12
 80037e0:	2d00      	cmp	r5, #0
 80037e2:	4606      	mov	r6, r0
 80037e4:	db01      	blt.n	80037ea <_malloc_r+0x1a>
 80037e6:	42a9      	cmp	r1, r5
 80037e8:	d903      	bls.n	80037f2 <_malloc_r+0x22>
 80037ea:	230c      	movs	r3, #12
 80037ec:	6033      	str	r3, [r6, #0]
 80037ee:	2000      	movs	r0, #0
 80037f0:	bd70      	pop	{r4, r5, r6, pc}
 80037f2:	f000 f9d4 	bl	8003b9e <__malloc_lock>
 80037f6:	4a21      	ldr	r2, [pc, #132]	; (800387c <_malloc_r+0xac>)
 80037f8:	6814      	ldr	r4, [r2, #0]
 80037fa:	4621      	mov	r1, r4
 80037fc:	b991      	cbnz	r1, 8003824 <_malloc_r+0x54>
 80037fe:	4c20      	ldr	r4, [pc, #128]	; (8003880 <_malloc_r+0xb0>)
 8003800:	6823      	ldr	r3, [r4, #0]
 8003802:	b91b      	cbnz	r3, 800380c <_malloc_r+0x3c>
 8003804:	4630      	mov	r0, r6
 8003806:	f000 f98f 	bl	8003b28 <_sbrk_r>
 800380a:	6020      	str	r0, [r4, #0]
 800380c:	4629      	mov	r1, r5
 800380e:	4630      	mov	r0, r6
 8003810:	f000 f98a 	bl	8003b28 <_sbrk_r>
 8003814:	1c43      	adds	r3, r0, #1
 8003816:	d124      	bne.n	8003862 <_malloc_r+0x92>
 8003818:	230c      	movs	r3, #12
 800381a:	6033      	str	r3, [r6, #0]
 800381c:	4630      	mov	r0, r6
 800381e:	f000 f9bf 	bl	8003ba0 <__malloc_unlock>
 8003822:	e7e4      	b.n	80037ee <_malloc_r+0x1e>
 8003824:	680b      	ldr	r3, [r1, #0]
 8003826:	1b5b      	subs	r3, r3, r5
 8003828:	d418      	bmi.n	800385c <_malloc_r+0x8c>
 800382a:	2b0b      	cmp	r3, #11
 800382c:	d90f      	bls.n	800384e <_malloc_r+0x7e>
 800382e:	600b      	str	r3, [r1, #0]
 8003830:	50cd      	str	r5, [r1, r3]
 8003832:	18cc      	adds	r4, r1, r3
 8003834:	4630      	mov	r0, r6
 8003836:	f000 f9b3 	bl	8003ba0 <__malloc_unlock>
 800383a:	f104 000b 	add.w	r0, r4, #11
 800383e:	1d23      	adds	r3, r4, #4
 8003840:	f020 0007 	bic.w	r0, r0, #7
 8003844:	1ac3      	subs	r3, r0, r3
 8003846:	d0d3      	beq.n	80037f0 <_malloc_r+0x20>
 8003848:	425a      	negs	r2, r3
 800384a:	50e2      	str	r2, [r4, r3]
 800384c:	e7d0      	b.n	80037f0 <_malloc_r+0x20>
 800384e:	428c      	cmp	r4, r1
 8003850:	684b      	ldr	r3, [r1, #4]
 8003852:	bf16      	itet	ne
 8003854:	6063      	strne	r3, [r4, #4]
 8003856:	6013      	streq	r3, [r2, #0]
 8003858:	460c      	movne	r4, r1
 800385a:	e7eb      	b.n	8003834 <_malloc_r+0x64>
 800385c:	460c      	mov	r4, r1
 800385e:	6849      	ldr	r1, [r1, #4]
 8003860:	e7cc      	b.n	80037fc <_malloc_r+0x2c>
 8003862:	1cc4      	adds	r4, r0, #3
 8003864:	f024 0403 	bic.w	r4, r4, #3
 8003868:	42a0      	cmp	r0, r4
 800386a:	d005      	beq.n	8003878 <_malloc_r+0xa8>
 800386c:	1a21      	subs	r1, r4, r0
 800386e:	4630      	mov	r0, r6
 8003870:	f000 f95a 	bl	8003b28 <_sbrk_r>
 8003874:	3001      	adds	r0, #1
 8003876:	d0cf      	beq.n	8003818 <_malloc_r+0x48>
 8003878:	6025      	str	r5, [r4, #0]
 800387a:	e7db      	b.n	8003834 <_malloc_r+0x64>
 800387c:	2000021c 	.word	0x2000021c
 8003880:	20000220 	.word	0x20000220

08003884 <__ssputs_r>:
 8003884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003888:	688e      	ldr	r6, [r1, #8]
 800388a:	429e      	cmp	r6, r3
 800388c:	4682      	mov	sl, r0
 800388e:	460c      	mov	r4, r1
 8003890:	4690      	mov	r8, r2
 8003892:	4699      	mov	r9, r3
 8003894:	d837      	bhi.n	8003906 <__ssputs_r+0x82>
 8003896:	898a      	ldrh	r2, [r1, #12]
 8003898:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800389c:	d031      	beq.n	8003902 <__ssputs_r+0x7e>
 800389e:	6825      	ldr	r5, [r4, #0]
 80038a0:	6909      	ldr	r1, [r1, #16]
 80038a2:	1a6f      	subs	r7, r5, r1
 80038a4:	6965      	ldr	r5, [r4, #20]
 80038a6:	2302      	movs	r3, #2
 80038a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80038ac:	fb95 f5f3 	sdiv	r5, r5, r3
 80038b0:	f109 0301 	add.w	r3, r9, #1
 80038b4:	443b      	add	r3, r7
 80038b6:	429d      	cmp	r5, r3
 80038b8:	bf38      	it	cc
 80038ba:	461d      	movcc	r5, r3
 80038bc:	0553      	lsls	r3, r2, #21
 80038be:	d530      	bpl.n	8003922 <__ssputs_r+0x9e>
 80038c0:	4629      	mov	r1, r5
 80038c2:	f7ff ff85 	bl	80037d0 <_malloc_r>
 80038c6:	4606      	mov	r6, r0
 80038c8:	b950      	cbnz	r0, 80038e0 <__ssputs_r+0x5c>
 80038ca:	230c      	movs	r3, #12
 80038cc:	f8ca 3000 	str.w	r3, [sl]
 80038d0:	89a3      	ldrh	r3, [r4, #12]
 80038d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038d6:	81a3      	strh	r3, [r4, #12]
 80038d8:	f04f 30ff 	mov.w	r0, #4294967295
 80038dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038e0:	463a      	mov	r2, r7
 80038e2:	6921      	ldr	r1, [r4, #16]
 80038e4:	f7ff fc32 	bl	800314c <memcpy>
 80038e8:	89a3      	ldrh	r3, [r4, #12]
 80038ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80038ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038f2:	81a3      	strh	r3, [r4, #12]
 80038f4:	6126      	str	r6, [r4, #16]
 80038f6:	6165      	str	r5, [r4, #20]
 80038f8:	443e      	add	r6, r7
 80038fa:	1bed      	subs	r5, r5, r7
 80038fc:	6026      	str	r6, [r4, #0]
 80038fe:	60a5      	str	r5, [r4, #8]
 8003900:	464e      	mov	r6, r9
 8003902:	454e      	cmp	r6, r9
 8003904:	d900      	bls.n	8003908 <__ssputs_r+0x84>
 8003906:	464e      	mov	r6, r9
 8003908:	4632      	mov	r2, r6
 800390a:	4641      	mov	r1, r8
 800390c:	6820      	ldr	r0, [r4, #0]
 800390e:	f000 f92d 	bl	8003b6c <memmove>
 8003912:	68a3      	ldr	r3, [r4, #8]
 8003914:	1b9b      	subs	r3, r3, r6
 8003916:	60a3      	str	r3, [r4, #8]
 8003918:	6823      	ldr	r3, [r4, #0]
 800391a:	441e      	add	r6, r3
 800391c:	6026      	str	r6, [r4, #0]
 800391e:	2000      	movs	r0, #0
 8003920:	e7dc      	b.n	80038dc <__ssputs_r+0x58>
 8003922:	462a      	mov	r2, r5
 8003924:	f000 f93d 	bl	8003ba2 <_realloc_r>
 8003928:	4606      	mov	r6, r0
 800392a:	2800      	cmp	r0, #0
 800392c:	d1e2      	bne.n	80038f4 <__ssputs_r+0x70>
 800392e:	6921      	ldr	r1, [r4, #16]
 8003930:	4650      	mov	r0, sl
 8003932:	f7ff feff 	bl	8003734 <_free_r>
 8003936:	e7c8      	b.n	80038ca <__ssputs_r+0x46>

08003938 <_svfiprintf_r>:
 8003938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800393c:	461d      	mov	r5, r3
 800393e:	898b      	ldrh	r3, [r1, #12]
 8003940:	061f      	lsls	r7, r3, #24
 8003942:	b09d      	sub	sp, #116	; 0x74
 8003944:	4680      	mov	r8, r0
 8003946:	460c      	mov	r4, r1
 8003948:	4616      	mov	r6, r2
 800394a:	d50f      	bpl.n	800396c <_svfiprintf_r+0x34>
 800394c:	690b      	ldr	r3, [r1, #16]
 800394e:	b96b      	cbnz	r3, 800396c <_svfiprintf_r+0x34>
 8003950:	2140      	movs	r1, #64	; 0x40
 8003952:	f7ff ff3d 	bl	80037d0 <_malloc_r>
 8003956:	6020      	str	r0, [r4, #0]
 8003958:	6120      	str	r0, [r4, #16]
 800395a:	b928      	cbnz	r0, 8003968 <_svfiprintf_r+0x30>
 800395c:	230c      	movs	r3, #12
 800395e:	f8c8 3000 	str.w	r3, [r8]
 8003962:	f04f 30ff 	mov.w	r0, #4294967295
 8003966:	e0c8      	b.n	8003afa <_svfiprintf_r+0x1c2>
 8003968:	2340      	movs	r3, #64	; 0x40
 800396a:	6163      	str	r3, [r4, #20]
 800396c:	2300      	movs	r3, #0
 800396e:	9309      	str	r3, [sp, #36]	; 0x24
 8003970:	2320      	movs	r3, #32
 8003972:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003976:	2330      	movs	r3, #48	; 0x30
 8003978:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800397c:	9503      	str	r5, [sp, #12]
 800397e:	f04f 0b01 	mov.w	fp, #1
 8003982:	4637      	mov	r7, r6
 8003984:	463d      	mov	r5, r7
 8003986:	f815 3b01 	ldrb.w	r3, [r5], #1
 800398a:	b10b      	cbz	r3, 8003990 <_svfiprintf_r+0x58>
 800398c:	2b25      	cmp	r3, #37	; 0x25
 800398e:	d13e      	bne.n	8003a0e <_svfiprintf_r+0xd6>
 8003990:	ebb7 0a06 	subs.w	sl, r7, r6
 8003994:	d00b      	beq.n	80039ae <_svfiprintf_r+0x76>
 8003996:	4653      	mov	r3, sl
 8003998:	4632      	mov	r2, r6
 800399a:	4621      	mov	r1, r4
 800399c:	4640      	mov	r0, r8
 800399e:	f7ff ff71 	bl	8003884 <__ssputs_r>
 80039a2:	3001      	adds	r0, #1
 80039a4:	f000 80a4 	beq.w	8003af0 <_svfiprintf_r+0x1b8>
 80039a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039aa:	4453      	add	r3, sl
 80039ac:	9309      	str	r3, [sp, #36]	; 0x24
 80039ae:	783b      	ldrb	r3, [r7, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 809d 	beq.w	8003af0 <_svfiprintf_r+0x1b8>
 80039b6:	2300      	movs	r3, #0
 80039b8:	f04f 32ff 	mov.w	r2, #4294967295
 80039bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039c0:	9304      	str	r3, [sp, #16]
 80039c2:	9307      	str	r3, [sp, #28]
 80039c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80039c8:	931a      	str	r3, [sp, #104]	; 0x68
 80039ca:	462f      	mov	r7, r5
 80039cc:	2205      	movs	r2, #5
 80039ce:	f817 1b01 	ldrb.w	r1, [r7], #1
 80039d2:	4850      	ldr	r0, [pc, #320]	; (8003b14 <_svfiprintf_r+0x1dc>)
 80039d4:	f7fc fc3c 	bl	8000250 <memchr>
 80039d8:	9b04      	ldr	r3, [sp, #16]
 80039da:	b9d0      	cbnz	r0, 8003a12 <_svfiprintf_r+0xda>
 80039dc:	06d9      	lsls	r1, r3, #27
 80039de:	bf44      	itt	mi
 80039e0:	2220      	movmi	r2, #32
 80039e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80039e6:	071a      	lsls	r2, r3, #28
 80039e8:	bf44      	itt	mi
 80039ea:	222b      	movmi	r2, #43	; 0x2b
 80039ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80039f0:	782a      	ldrb	r2, [r5, #0]
 80039f2:	2a2a      	cmp	r2, #42	; 0x2a
 80039f4:	d015      	beq.n	8003a22 <_svfiprintf_r+0xea>
 80039f6:	9a07      	ldr	r2, [sp, #28]
 80039f8:	462f      	mov	r7, r5
 80039fa:	2000      	movs	r0, #0
 80039fc:	250a      	movs	r5, #10
 80039fe:	4639      	mov	r1, r7
 8003a00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a04:	3b30      	subs	r3, #48	; 0x30
 8003a06:	2b09      	cmp	r3, #9
 8003a08:	d94d      	bls.n	8003aa6 <_svfiprintf_r+0x16e>
 8003a0a:	b1b8      	cbz	r0, 8003a3c <_svfiprintf_r+0x104>
 8003a0c:	e00f      	b.n	8003a2e <_svfiprintf_r+0xf6>
 8003a0e:	462f      	mov	r7, r5
 8003a10:	e7b8      	b.n	8003984 <_svfiprintf_r+0x4c>
 8003a12:	4a40      	ldr	r2, [pc, #256]	; (8003b14 <_svfiprintf_r+0x1dc>)
 8003a14:	1a80      	subs	r0, r0, r2
 8003a16:	fa0b f000 	lsl.w	r0, fp, r0
 8003a1a:	4318      	orrs	r0, r3
 8003a1c:	9004      	str	r0, [sp, #16]
 8003a1e:	463d      	mov	r5, r7
 8003a20:	e7d3      	b.n	80039ca <_svfiprintf_r+0x92>
 8003a22:	9a03      	ldr	r2, [sp, #12]
 8003a24:	1d11      	adds	r1, r2, #4
 8003a26:	6812      	ldr	r2, [r2, #0]
 8003a28:	9103      	str	r1, [sp, #12]
 8003a2a:	2a00      	cmp	r2, #0
 8003a2c:	db01      	blt.n	8003a32 <_svfiprintf_r+0xfa>
 8003a2e:	9207      	str	r2, [sp, #28]
 8003a30:	e004      	b.n	8003a3c <_svfiprintf_r+0x104>
 8003a32:	4252      	negs	r2, r2
 8003a34:	f043 0302 	orr.w	r3, r3, #2
 8003a38:	9207      	str	r2, [sp, #28]
 8003a3a:	9304      	str	r3, [sp, #16]
 8003a3c:	783b      	ldrb	r3, [r7, #0]
 8003a3e:	2b2e      	cmp	r3, #46	; 0x2e
 8003a40:	d10c      	bne.n	8003a5c <_svfiprintf_r+0x124>
 8003a42:	787b      	ldrb	r3, [r7, #1]
 8003a44:	2b2a      	cmp	r3, #42	; 0x2a
 8003a46:	d133      	bne.n	8003ab0 <_svfiprintf_r+0x178>
 8003a48:	9b03      	ldr	r3, [sp, #12]
 8003a4a:	1d1a      	adds	r2, r3, #4
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	9203      	str	r2, [sp, #12]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	bfb8      	it	lt
 8003a54:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a58:	3702      	adds	r7, #2
 8003a5a:	9305      	str	r3, [sp, #20]
 8003a5c:	4d2e      	ldr	r5, [pc, #184]	; (8003b18 <_svfiprintf_r+0x1e0>)
 8003a5e:	7839      	ldrb	r1, [r7, #0]
 8003a60:	2203      	movs	r2, #3
 8003a62:	4628      	mov	r0, r5
 8003a64:	f7fc fbf4 	bl	8000250 <memchr>
 8003a68:	b138      	cbz	r0, 8003a7a <_svfiprintf_r+0x142>
 8003a6a:	2340      	movs	r3, #64	; 0x40
 8003a6c:	1b40      	subs	r0, r0, r5
 8003a6e:	fa03 f000 	lsl.w	r0, r3, r0
 8003a72:	9b04      	ldr	r3, [sp, #16]
 8003a74:	4303      	orrs	r3, r0
 8003a76:	3701      	adds	r7, #1
 8003a78:	9304      	str	r3, [sp, #16]
 8003a7a:	7839      	ldrb	r1, [r7, #0]
 8003a7c:	4827      	ldr	r0, [pc, #156]	; (8003b1c <_svfiprintf_r+0x1e4>)
 8003a7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a82:	2206      	movs	r2, #6
 8003a84:	1c7e      	adds	r6, r7, #1
 8003a86:	f7fc fbe3 	bl	8000250 <memchr>
 8003a8a:	2800      	cmp	r0, #0
 8003a8c:	d038      	beq.n	8003b00 <_svfiprintf_r+0x1c8>
 8003a8e:	4b24      	ldr	r3, [pc, #144]	; (8003b20 <_svfiprintf_r+0x1e8>)
 8003a90:	bb13      	cbnz	r3, 8003ad8 <_svfiprintf_r+0x1a0>
 8003a92:	9b03      	ldr	r3, [sp, #12]
 8003a94:	3307      	adds	r3, #7
 8003a96:	f023 0307 	bic.w	r3, r3, #7
 8003a9a:	3308      	adds	r3, #8
 8003a9c:	9303      	str	r3, [sp, #12]
 8003a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003aa0:	444b      	add	r3, r9
 8003aa2:	9309      	str	r3, [sp, #36]	; 0x24
 8003aa4:	e76d      	b.n	8003982 <_svfiprintf_r+0x4a>
 8003aa6:	fb05 3202 	mla	r2, r5, r2, r3
 8003aaa:	2001      	movs	r0, #1
 8003aac:	460f      	mov	r7, r1
 8003aae:	e7a6      	b.n	80039fe <_svfiprintf_r+0xc6>
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	3701      	adds	r7, #1
 8003ab4:	9305      	str	r3, [sp, #20]
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	250a      	movs	r5, #10
 8003aba:	4638      	mov	r0, r7
 8003abc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ac0:	3a30      	subs	r2, #48	; 0x30
 8003ac2:	2a09      	cmp	r2, #9
 8003ac4:	d903      	bls.n	8003ace <_svfiprintf_r+0x196>
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0c8      	beq.n	8003a5c <_svfiprintf_r+0x124>
 8003aca:	9105      	str	r1, [sp, #20]
 8003acc:	e7c6      	b.n	8003a5c <_svfiprintf_r+0x124>
 8003ace:	fb05 2101 	mla	r1, r5, r1, r2
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	4607      	mov	r7, r0
 8003ad6:	e7f0      	b.n	8003aba <_svfiprintf_r+0x182>
 8003ad8:	ab03      	add	r3, sp, #12
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	4622      	mov	r2, r4
 8003ade:	4b11      	ldr	r3, [pc, #68]	; (8003b24 <_svfiprintf_r+0x1ec>)
 8003ae0:	a904      	add	r1, sp, #16
 8003ae2:	4640      	mov	r0, r8
 8003ae4:	f7fe f970 	bl	8001dc8 <_printf_float>
 8003ae8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003aec:	4681      	mov	r9, r0
 8003aee:	d1d6      	bne.n	8003a9e <_svfiprintf_r+0x166>
 8003af0:	89a3      	ldrh	r3, [r4, #12]
 8003af2:	065b      	lsls	r3, r3, #25
 8003af4:	f53f af35 	bmi.w	8003962 <_svfiprintf_r+0x2a>
 8003af8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003afa:	b01d      	add	sp, #116	; 0x74
 8003afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b00:	ab03      	add	r3, sp, #12
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	4622      	mov	r2, r4
 8003b06:	4b07      	ldr	r3, [pc, #28]	; (8003b24 <_svfiprintf_r+0x1ec>)
 8003b08:	a904      	add	r1, sp, #16
 8003b0a:	4640      	mov	r0, r8
 8003b0c:	f7fe fbfe 	bl	800230c <_printf_i>
 8003b10:	e7ea      	b.n	8003ae8 <_svfiprintf_r+0x1b0>
 8003b12:	bf00      	nop
 8003b14:	08004144 	.word	0x08004144
 8003b18:	0800414a 	.word	0x0800414a
 8003b1c:	0800414e 	.word	0x0800414e
 8003b20:	08001dc9 	.word	0x08001dc9
 8003b24:	08003885 	.word	0x08003885

08003b28 <_sbrk_r>:
 8003b28:	b538      	push	{r3, r4, r5, lr}
 8003b2a:	4c06      	ldr	r4, [pc, #24]	; (8003b44 <_sbrk_r+0x1c>)
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	4605      	mov	r5, r0
 8003b30:	4608      	mov	r0, r1
 8003b32:	6023      	str	r3, [r4, #0]
 8003b34:	f7fc ff0a 	bl	800094c <_sbrk>
 8003b38:	1c43      	adds	r3, r0, #1
 8003b3a:	d102      	bne.n	8003b42 <_sbrk_r+0x1a>
 8003b3c:	6823      	ldr	r3, [r4, #0]
 8003b3e:	b103      	cbz	r3, 8003b42 <_sbrk_r+0x1a>
 8003b40:	602b      	str	r3, [r5, #0]
 8003b42:	bd38      	pop	{r3, r4, r5, pc}
 8003b44:	200002a8 	.word	0x200002a8

08003b48 <__ascii_mbtowc>:
 8003b48:	b082      	sub	sp, #8
 8003b4a:	b901      	cbnz	r1, 8003b4e <__ascii_mbtowc+0x6>
 8003b4c:	a901      	add	r1, sp, #4
 8003b4e:	b142      	cbz	r2, 8003b62 <__ascii_mbtowc+0x1a>
 8003b50:	b14b      	cbz	r3, 8003b66 <__ascii_mbtowc+0x1e>
 8003b52:	7813      	ldrb	r3, [r2, #0]
 8003b54:	600b      	str	r3, [r1, #0]
 8003b56:	7812      	ldrb	r2, [r2, #0]
 8003b58:	1c10      	adds	r0, r2, #0
 8003b5a:	bf18      	it	ne
 8003b5c:	2001      	movne	r0, #1
 8003b5e:	b002      	add	sp, #8
 8003b60:	4770      	bx	lr
 8003b62:	4610      	mov	r0, r2
 8003b64:	e7fb      	b.n	8003b5e <__ascii_mbtowc+0x16>
 8003b66:	f06f 0001 	mvn.w	r0, #1
 8003b6a:	e7f8      	b.n	8003b5e <__ascii_mbtowc+0x16>

08003b6c <memmove>:
 8003b6c:	4288      	cmp	r0, r1
 8003b6e:	b510      	push	{r4, lr}
 8003b70:	eb01 0302 	add.w	r3, r1, r2
 8003b74:	d807      	bhi.n	8003b86 <memmove+0x1a>
 8003b76:	1e42      	subs	r2, r0, #1
 8003b78:	4299      	cmp	r1, r3
 8003b7a:	d00a      	beq.n	8003b92 <memmove+0x26>
 8003b7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b80:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003b84:	e7f8      	b.n	8003b78 <memmove+0xc>
 8003b86:	4283      	cmp	r3, r0
 8003b88:	d9f5      	bls.n	8003b76 <memmove+0xa>
 8003b8a:	1881      	adds	r1, r0, r2
 8003b8c:	1ad2      	subs	r2, r2, r3
 8003b8e:	42d3      	cmn	r3, r2
 8003b90:	d100      	bne.n	8003b94 <memmove+0x28>
 8003b92:	bd10      	pop	{r4, pc}
 8003b94:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b98:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003b9c:	e7f7      	b.n	8003b8e <memmove+0x22>

08003b9e <__malloc_lock>:
 8003b9e:	4770      	bx	lr

08003ba0 <__malloc_unlock>:
 8003ba0:	4770      	bx	lr

08003ba2 <_realloc_r>:
 8003ba2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba4:	4607      	mov	r7, r0
 8003ba6:	4614      	mov	r4, r2
 8003ba8:	460e      	mov	r6, r1
 8003baa:	b921      	cbnz	r1, 8003bb6 <_realloc_r+0x14>
 8003bac:	4611      	mov	r1, r2
 8003bae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003bb2:	f7ff be0d 	b.w	80037d0 <_malloc_r>
 8003bb6:	b922      	cbnz	r2, 8003bc2 <_realloc_r+0x20>
 8003bb8:	f7ff fdbc 	bl	8003734 <_free_r>
 8003bbc:	4625      	mov	r5, r4
 8003bbe:	4628      	mov	r0, r5
 8003bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bc2:	f000 f821 	bl	8003c08 <_malloc_usable_size_r>
 8003bc6:	42a0      	cmp	r0, r4
 8003bc8:	d20f      	bcs.n	8003bea <_realloc_r+0x48>
 8003bca:	4621      	mov	r1, r4
 8003bcc:	4638      	mov	r0, r7
 8003bce:	f7ff fdff 	bl	80037d0 <_malloc_r>
 8003bd2:	4605      	mov	r5, r0
 8003bd4:	2800      	cmp	r0, #0
 8003bd6:	d0f2      	beq.n	8003bbe <_realloc_r+0x1c>
 8003bd8:	4631      	mov	r1, r6
 8003bda:	4622      	mov	r2, r4
 8003bdc:	f7ff fab6 	bl	800314c <memcpy>
 8003be0:	4631      	mov	r1, r6
 8003be2:	4638      	mov	r0, r7
 8003be4:	f7ff fda6 	bl	8003734 <_free_r>
 8003be8:	e7e9      	b.n	8003bbe <_realloc_r+0x1c>
 8003bea:	4635      	mov	r5, r6
 8003bec:	e7e7      	b.n	8003bbe <_realloc_r+0x1c>

08003bee <__ascii_wctomb>:
 8003bee:	b149      	cbz	r1, 8003c04 <__ascii_wctomb+0x16>
 8003bf0:	2aff      	cmp	r2, #255	; 0xff
 8003bf2:	bf85      	ittet	hi
 8003bf4:	238a      	movhi	r3, #138	; 0x8a
 8003bf6:	6003      	strhi	r3, [r0, #0]
 8003bf8:	700a      	strbls	r2, [r1, #0]
 8003bfa:	f04f 30ff 	movhi.w	r0, #4294967295
 8003bfe:	bf98      	it	ls
 8003c00:	2001      	movls	r0, #1
 8003c02:	4770      	bx	lr
 8003c04:	4608      	mov	r0, r1
 8003c06:	4770      	bx	lr

08003c08 <_malloc_usable_size_r>:
 8003c08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c0c:	1f18      	subs	r0, r3, #4
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	bfbc      	itt	lt
 8003c12:	580b      	ldrlt	r3, [r1, r0]
 8003c14:	18c0      	addlt	r0, r0, r3
 8003c16:	4770      	bx	lr

08003c18 <checkint>:
 8003c18:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8003c1c:	2b7e      	cmp	r3, #126	; 0x7e
 8003c1e:	dd10      	ble.n	8003c42 <checkint+0x2a>
 8003c20:	2b96      	cmp	r3, #150	; 0x96
 8003c22:	dc0c      	bgt.n	8003c3e <checkint+0x26>
 8003c24:	2201      	movs	r2, #1
 8003c26:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8003c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2e:	1e5a      	subs	r2, r3, #1
 8003c30:	4202      	tst	r2, r0
 8003c32:	d106      	bne.n	8003c42 <checkint+0x2a>
 8003c34:	4203      	tst	r3, r0
 8003c36:	bf0c      	ite	eq
 8003c38:	2002      	moveq	r0, #2
 8003c3a:	2001      	movne	r0, #1
 8003c3c:	4770      	bx	lr
 8003c3e:	2002      	movs	r0, #2
 8003c40:	4770      	bx	lr
 8003c42:	2000      	movs	r0, #0
 8003c44:	4770      	bx	lr
	...

08003c48 <powf>:
 8003c48:	ee10 1a10 	vmov	r1, s0
 8003c4c:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8003c50:	ee10 4a90 	vmov	r4, s1
 8003c54:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8003c58:	0062      	lsls	r2, r4, #1
 8003c5a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8003c5e:	eef0 4a60 	vmov.f32	s9, s1
 8003c62:	f102 30ff 	add.w	r0, r2, #4294967295
 8003c66:	4b92      	ldr	r3, [pc, #584]	; (8003eb0 <powf+0x268>)
 8003c68:	d255      	bcs.n	8003d16 <powf+0xce>
 8003c6a:	4298      	cmp	r0, r3
 8003c6c:	d855      	bhi.n	8003d1a <powf+0xd2>
 8003c6e:	2000      	movs	r0, #0
 8003c70:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 8003c74:	4a8f      	ldr	r2, [pc, #572]	; (8003eb4 <powf+0x26c>)
 8003c76:	eebf 2b00 	vmov.f64	d2, #240	; 0xbf800000 -1.0
 8003c7a:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 8003c7e:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 8003c82:	0ddb      	lsrs	r3, r3, #23
 8003c84:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 8003c88:	05db      	lsls	r3, r3, #23
 8003c8a:	ed94 6b00 	vldr	d6, [r4]
 8003c8e:	1ac9      	subs	r1, r1, r3
 8003c90:	ee07 1a90 	vmov	s15, r1
 8003c94:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
 8003c98:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c9c:	eea6 2b07 	vfma.f64	d2, d6, d7
 8003ca0:	ed92 7b42 	vldr	d7, [r2, #264]	; 0x108
 8003ca4:	ee22 6b02 	vmul.f64	d6, d2, d2
 8003ca8:	eea2 7b05 	vfma.f64	d7, d2, d5
 8003cac:	15db      	asrs	r3, r3, #23
 8003cae:	ed94 5b02 	vldr	d5, [r4, #8]
 8003cb2:	ee00 3a10 	vmov	s0, r3
 8003cb6:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8003cba:	ee30 0b05 	vadd.f64	d0, d0, d5
 8003cbe:	ed92 5b48 	vldr	d5, [r2, #288]	; 0x120
 8003cc2:	ed92 3b44 	vldr	d3, [r2, #272]	; 0x110
 8003cc6:	eea2 0b05 	vfma.f64	d0, d2, d5
 8003cca:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
 8003cce:	eea2 5b03 	vfma.f64	d5, d2, d3
 8003cd2:	eea6 0b05 	vfma.f64	d0, d6, d5
 8003cd6:	ee26 6b06 	vmul.f64	d6, d6, d6
 8003cda:	eea7 0b06 	vfma.f64	d0, d7, d6
 8003cde:	eeb7 7ae4 	vcvt.f64.f32	d7, s9
 8003ce2:	ee20 0b07 	vmul.f64	d0, d0, d7
 8003ce6:	ee10 3a90 	vmov	r3, s1
 8003cea:	2500      	movs	r5, #0
 8003cec:	0bda      	lsrs	r2, r3, #15
 8003cee:	2300      	movs	r3, #0
 8003cf0:	b292      	uxth	r2, r2
 8003cf2:	f248 04be 	movw	r4, #32958	; 0x80be
 8003cf6:	429d      	cmp	r5, r3
 8003cf8:	bf08      	it	eq
 8003cfa:	4294      	cmpeq	r4, r2
 8003cfc:	f080 8094 	bcs.w	8003e28 <powf+0x1e0>
 8003d00:	ed9f 7b65 	vldr	d7, [pc, #404]	; 8003e98 <powf+0x250>
 8003d04:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8003d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d0c:	dd76      	ble.n	8003dfc <powf+0x1b4>
 8003d0e:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8003d12:	f000 b8fd 	b.w	8003f10 <__math_oflowf>
 8003d16:	4298      	cmp	r0, r3
 8003d18:	d92d      	bls.n	8003d76 <powf+0x12e>
 8003d1a:	b952      	cbnz	r2, 8003d32 <powf+0xea>
 8003d1c:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8003d26:	f240 80ae 	bls.w	8003e86 <powf+0x23e>
 8003d2a:	ee30 0a24 	vadd.f32	s0, s0, s9
 8003d2e:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8003d32:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8003d36:	d105      	bne.n	8003d44 <powf+0xfc>
 8003d38:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8003d3c:	0064      	lsls	r4, r4, #1
 8003d3e:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8003d42:	e7f0      	b.n	8003d26 <powf+0xde>
 8003d44:	004b      	lsls	r3, r1, #1
 8003d46:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8003d4a:	d8ee      	bhi.n	8003d2a <powf+0xe2>
 8003d4c:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8003d50:	d1eb      	bne.n	8003d2a <powf+0xe2>
 8003d52:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8003d56:	f000 8096 	beq.w	8003e86 <powf+0x23e>
 8003d5a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8003d5e:	ea6f 0404 	mvn.w	r4, r4
 8003d62:	bf34      	ite	cc
 8003d64:	2300      	movcc	r3, #0
 8003d66:	2301      	movcs	r3, #1
 8003d68:	0fe4      	lsrs	r4, r4, #31
 8003d6a:	42a3      	cmp	r3, r4
 8003d6c:	f040 808e 	bne.w	8003e8c <powf+0x244>
 8003d70:	ee24 0aa4 	vmul.f32	s0, s9, s9
 8003d74:	e7db      	b.n	8003d2e <powf+0xe6>
 8003d76:	004d      	lsls	r5, r1, #1
 8003d78:	1e6a      	subs	r2, r5, #1
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d91b      	bls.n	8003db6 <powf+0x16e>
 8003d7e:	2900      	cmp	r1, #0
 8003d80:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003d84:	da0e      	bge.n	8003da4 <powf+0x15c>
 8003d86:	ee10 0a90 	vmov	r0, s1
 8003d8a:	f7ff ff45 	bl	8003c18 <checkint>
 8003d8e:	2801      	cmp	r0, #1
 8003d90:	d108      	bne.n	8003da4 <powf+0x15c>
 8003d92:	eeb1 0a40 	vneg.f32	s0, s0
 8003d96:	b93d      	cbnz	r5, 8003da8 <powf+0x160>
 8003d98:	2c00      	cmp	r4, #0
 8003d9a:	dac8      	bge.n	8003d2e <powf+0xe6>
 8003d9c:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8003da0:	f000 b8bc 	b.w	8003f1c <__math_divzerof>
 8003da4:	2000      	movs	r0, #0
 8003da6:	e7f6      	b.n	8003d96 <powf+0x14e>
 8003da8:	2c00      	cmp	r4, #0
 8003daa:	dac0      	bge.n	8003d2e <powf+0xe6>
 8003dac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003db0:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8003db4:	e7bb      	b.n	8003d2e <powf+0xe6>
 8003db6:	2900      	cmp	r1, #0
 8003db8:	da1e      	bge.n	8003df8 <powf+0x1b0>
 8003dba:	ee10 0a90 	vmov	r0, s1
 8003dbe:	f7ff ff2b 	bl	8003c18 <checkint>
 8003dc2:	b918      	cbnz	r0, 8003dcc <powf+0x184>
 8003dc4:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8003dc8:	f000 b8b8 	b.w	8003f3c <__math_invalidf>
 8003dcc:	2801      	cmp	r0, #1
 8003dce:	bf0c      	ite	eq
 8003dd0:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8003dd4:	2000      	movne	r0, #0
 8003dd6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003dda:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8003dde:	f4bf af47 	bcs.w	8003c70 <powf+0x28>
 8003de2:	eddf 0a35 	vldr	s1, [pc, #212]	; 8003eb8 <powf+0x270>
 8003de6:	ee20 0a20 	vmul.f32	s0, s0, s1
 8003dea:	ee10 3a10 	vmov	r3, s0
 8003dee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003df2:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8003df6:	e73b      	b.n	8003c70 <powf+0x28>
 8003df8:	2000      	movs	r0, #0
 8003dfa:	e7ee      	b.n	8003dda <powf+0x192>
 8003dfc:	ed9f 7b28 	vldr	d7, [pc, #160]	; 8003ea0 <powf+0x258>
 8003e00:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8003e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e08:	d803      	bhi.n	8003e12 <powf+0x1ca>
 8003e0a:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8003e0e:	f000 b873 	b.w	8003ef8 <__math_uflowf>
 8003e12:	ed9f 7b25 	vldr	d7, [pc, #148]	; 8003ea8 <powf+0x260>
 8003e16:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8003e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e1e:	d503      	bpl.n	8003e28 <powf+0x1e0>
 8003e20:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8003e24:	f000 b86e 	b.w	8003f04 <__math_may_uflowf>
 8003e28:	4924      	ldr	r1, [pc, #144]	; (8003ebc <powf+0x274>)
 8003e2a:	ed91 7b40 	vldr	d7, [r1, #256]	; 0x100
 8003e2e:	ee30 6b07 	vadd.f64	d6, d0, d7
 8003e32:	ec55 4b16 	vmov	r4, r5, d6
 8003e36:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003e3a:	f004 021f 	and.w	r2, r4, #31
 8003e3e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8003e42:	ed91 6b46 	vldr	d6, [r1, #280]	; 0x118
 8003e46:	ee30 0b47 	vsub.f64	d0, d0, d7
 8003e4a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8003e4e:	e9d2 6700 	ldrd	r6, r7, [r2]
 8003e52:	eea0 7b06 	vfma.f64	d7, d0, d6
 8003e56:	1824      	adds	r4, r4, r0
 8003e58:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8003e5c:	ed91 6b44 	vldr	d6, [r1, #272]	; 0x110
 8003e60:	2000      	movs	r0, #0
 8003e62:	1982      	adds	r2, r0, r6
 8003e64:	ea4f 31c4 	mov.w	r1, r4, lsl #15
 8003e68:	eb41 0307 	adc.w	r3, r1, r7
 8003e6c:	eea0 6b05 	vfma.f64	d6, d0, d5
 8003e70:	ee20 0b00 	vmul.f64	d0, d0, d0
 8003e74:	eea6 7b00 	vfma.f64	d7, d6, d0
 8003e78:	ec43 2b16 	vmov	d6, r2, r3
 8003e7c:	ee27 0b06 	vmul.f64	d0, d7, d6
 8003e80:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8003e84:	e753      	b.n	8003d2e <powf+0xe6>
 8003e86:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003e8a:	e750      	b.n	8003d2e <powf+0xe6>
 8003e8c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8003ec0 <powf+0x278>
 8003e90:	e74d      	b.n	8003d2e <powf+0xe6>
 8003e92:	bf00      	nop
 8003e94:	f3af 8000 	nop.w
 8003e98:	ffd1d571 	.word	0xffd1d571
 8003e9c:	405fffff 	.word	0x405fffff
 8003ea0:	00000000 	.word	0x00000000
 8003ea4:	c062c000 	.word	0xc062c000
 8003ea8:	00000000 	.word	0x00000000
 8003eac:	c062a000 	.word	0xc062a000
 8003eb0:	fefffffe 	.word	0xfefffffe
 8003eb4:	08004260 	.word	0x08004260
 8003eb8:	4b000000 	.word	0x4b000000
 8003ebc:	08004388 	.word	0x08004388
 8003ec0:	00000000 	.word	0x00000000

08003ec4 <with_errnof>:
 8003ec4:	b510      	push	{r4, lr}
 8003ec6:	ed2d 8b02 	vpush	{d8}
 8003eca:	eeb0 8a40 	vmov.f32	s16, s0
 8003ece:	4604      	mov	r4, r0
 8003ed0:	f7fd fec2 	bl	8001c58 <__errno>
 8003ed4:	eeb0 0a48 	vmov.f32	s0, s16
 8003ed8:	ecbd 8b02 	vpop	{d8}
 8003edc:	6004      	str	r4, [r0, #0]
 8003ede:	bd10      	pop	{r4, pc}

08003ee0 <xflowf>:
 8003ee0:	b130      	cbz	r0, 8003ef0 <xflowf+0x10>
 8003ee2:	eef1 7a40 	vneg.f32	s15, s0
 8003ee6:	2022      	movs	r0, #34	; 0x22
 8003ee8:	ee27 0a80 	vmul.f32	s0, s15, s0
 8003eec:	f7ff bfea 	b.w	8003ec4 <with_errnof>
 8003ef0:	eef0 7a40 	vmov.f32	s15, s0
 8003ef4:	e7f7      	b.n	8003ee6 <xflowf+0x6>
	...

08003ef8 <__math_uflowf>:
 8003ef8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8003f00 <__math_uflowf+0x8>
 8003efc:	f7ff bff0 	b.w	8003ee0 <xflowf>
 8003f00:	10000000 	.word	0x10000000

08003f04 <__math_may_uflowf>:
 8003f04:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8003f0c <__math_may_uflowf+0x8>
 8003f08:	f7ff bfea 	b.w	8003ee0 <xflowf>
 8003f0c:	1a200000 	.word	0x1a200000

08003f10 <__math_oflowf>:
 8003f10:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8003f18 <__math_oflowf+0x8>
 8003f14:	f7ff bfe4 	b.w	8003ee0 <xflowf>
 8003f18:	70000000 	.word	0x70000000

08003f1c <__math_divzerof>:
 8003f1c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003f20:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8003f24:	2800      	cmp	r0, #0
 8003f26:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8003f2a:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8003f38 <__math_divzerof+0x1c>
 8003f2e:	2022      	movs	r0, #34	; 0x22
 8003f30:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8003f34:	f7ff bfc6 	b.w	8003ec4 <with_errnof>
 8003f38:	00000000 	.word	0x00000000

08003f3c <__math_invalidf>:
 8003f3c:	eef0 7a40 	vmov.f32	s15, s0
 8003f40:	ee30 7a40 	vsub.f32	s14, s0, s0
 8003f44:	eef4 7a67 	vcmp.f32	s15, s15
 8003f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f4c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8003f50:	d602      	bvs.n	8003f58 <__math_invalidf+0x1c>
 8003f52:	2021      	movs	r0, #33	; 0x21
 8003f54:	f7ff bfb6 	b.w	8003ec4 <with_errnof>
 8003f58:	4770      	bx	lr
	...

08003f5c <_init>:
 8003f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f5e:	bf00      	nop
 8003f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f62:	bc08      	pop	{r3}
 8003f64:	469e      	mov	lr, r3
 8003f66:	4770      	bx	lr

08003f68 <_fini>:
 8003f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f6a:	bf00      	nop
 8003f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f6e:	bc08      	pop	{r3}
 8003f70:	469e      	mov	lr, r3
 8003f72:	4770      	bx	lr
